{"version":3,"file":"3438.9dfe2a288233ba39.js","mappings":"iMAOA,MAIMA,EAAS,MACXC,YAAYC,IACRC,OAAiBC,KAAMF,EAC3B,CACAG,SACI,SAAQC,KAAEC,IAAM,CAAEC,SAAOC,KAAWL,QAAM,EAAGE,KAAE,OAAQ,MAC3D,GAEJN,EAAOU,MAAQ,CACXC,IAbiB,4PAcjBC,GAZgB,6PAepB,MAIMC,EAAQ,MACVZ,YAAYC,IACRC,OAAiBC,KAAMF,GACvBE,KAAKU,WAAQC,CACjB,CACAV,SACI,MAAMW,KAAOP,KAAWL,MACxB,SAAQE,KAAEC,IAAM,CAAEC,SAAOS,KAAmBb,KAAKU,MAAO,CAChDI,CAACF,IAAO,MACT,EAAGV,KAAE,OAAQ,MACxB,GAEJO,EAAMH,MAAQ,CACVC,IAjBgB,s4BAkBhBC,GAhBe,o7BAmBnB,MAEMO,EAAY,MACdlB,YAAYC,IACRC,OAAiBC,KAAMF,EAC3B,CACAG,SACI,SAAQC,KAAEC,IAAM,CAAEC,SAAOC,KAAWL,QAAM,EAAGE,KAAE,OAAQ,MAC3D,GAEJa,EAAUT,MAVW,qVC1CrB,MAAMU,EAAcA,CAACC,EAAUC,IACK,OAAzBA,EAAGC,QAAQF,GAKhBJ,EAAqBA,CAACH,EAAOU,IACP,iBAAVV,GAAsBA,EAAMW,OAAS,EAC7CC,OAAOC,OAAO,CAAE,aAAa,EAAM,CAAE,aAAYb,MAAU,GAAQU,GAAeA,EAYtFI,EAAeC,IACjB,MAAMC,EAAM,CAAC,EACbC,MAZkBF,SACFd,IAAZc,GACcG,MAAMC,QAAQJ,GAAWA,EAAUA,EAAQK,MAAM,MAE1DC,OAAQC,GAAW,MAALA,GACdN,IAAKM,GAAMA,EAAEC,QACbF,OAAQC,GAAY,KAANA,GAEhB,GAIPL,CAAaF,GAASS,QAASF,GAAON,EAAIM,IAAK,GACxCN,GAELS,EAAS,uBACTC,EAAO,eAAAC,KAAAC,KAAG,UAAOC,EAAKC,EAAIC,EAAWC,GACvC,GAAW,MAAPH,GAA0B,MAAXA,EAAI,KAAeJ,EAAOQ,KAAKJ,GAAM,CACpD,MAAMK,EAASC,SAASC,cAAc,cACtC,GAAIF,EACA,OACIJ,GAAGO,iBAEAH,EAAOI,KAAKT,EAAKE,EAAWC,EAE3C,CACA,OAAO,CACX,GAAC,gBAXYO,EAAAC,EAAAC,EAAAC,GAAA,OAAAf,EAAAgB,MAAArD,KAAAsD,UAAA","names":["Avatar","constructor","hostRef","registerInstance","this","render","h","Host","class","getIonMode","style","ios","md","Badge","color","undefined","mode","createColorClasses","i","Thumbnail","hostContext","selector","el","closest","cssClassMap","length","Object","assign","getClassMap","classes","map","getClassList","Array","isArray","split","filter","c","trim","forEach","SCHEME","openURL","_ref","_asyncToGenerator","url","ev","direction","animation","test","router","document","querySelector","preventDefault","push","_x","_x2","_x3","_x4","apply","arguments"],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/ion-avatar_3.entry.js","./node_modules/@ionic/core/dist/esm/theme-01f3f29c.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, h, H as Host } from './index-b7d870cf.js';\nimport { b as getIonMode } from './ionic-global-1f99b929.js';\nimport { c as createColorClasses } from './theme-01f3f29c.js';\n\nconst avatarIosCss = \":host{border-radius:var(--border-radius);display:block}::slotted(ion-img),::slotted(img){border-radius:var(--border-radius);width:100%;height:100%;-o-object-fit:cover;object-fit:cover;overflow:hidden}:host{--border-radius:50%;width:48px;height:48px}\";\n\nconst avatarMdCss = \":host{border-radius:var(--border-radius);display:block}::slotted(ion-img),::slotted(img){border-radius:var(--border-radius);width:100%;height:100%;-o-object-fit:cover;object-fit:cover;overflow:hidden}:host{--border-radius:50%;width:64px;height:64px}\";\n\nconst Avatar = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    render() {\n        return (h(Host, { class: getIonMode(this) }, h(\"slot\", null)));\n    }\n};\nAvatar.style = {\n    ios: avatarIosCss,\n    md: avatarMdCss\n};\n\nconst badgeIosCss = \":host{--background:var(--ion-color-primary, #3880ff);--color:var(--ion-color-primary-contrast, #fff);--padding-top:3px;--padding-end:8px;--padding-bottom:3px;--padding-start:8px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);display:inline-block;min-width:10px;background:var(--background);color:var(--color);font-family:var(--ion-font-family, inherit);font-size:0.8125rem;font-weight:bold;line-height:1;text-align:center;white-space:nowrap;contain:content;vertical-align:baseline}:host(.ion-color){background:var(--ion-color-base);color:var(--ion-color-contrast)}:host(:empty){display:none}:host{border-radius:10px;font-size:max(13px, 0.8125rem)}\";\n\nconst badgeMdCss = \":host{--background:var(--ion-color-primary, #3880ff);--color:var(--ion-color-primary-contrast, #fff);--padding-top:3px;--padding-end:8px;--padding-bottom:3px;--padding-start:8px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);display:inline-block;min-width:10px;background:var(--background);color:var(--color);font-family:var(--ion-font-family, inherit);font-size:0.8125rem;font-weight:bold;line-height:1;text-align:center;white-space:nowrap;contain:content;vertical-align:baseline}:host(.ion-color){background:var(--ion-color-base);color:var(--ion-color-contrast)}:host(:empty){display:none}:host{--padding-top:3px;--padding-end:4px;--padding-bottom:4px;--padding-start:4px;border-radius:4px}\";\n\nconst Badge = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.color = undefined;\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { class: createColorClasses(this.color, {\n                [mode]: true,\n            }) }, h(\"slot\", null)));\n    }\n};\nBadge.style = {\n    ios: badgeIosCss,\n    md: badgeMdCss\n};\n\nconst thumbnailCss = \":host{--size:48px;--border-radius:0;border-radius:var(--border-radius);display:block;width:var(--size);height:var(--size)}::slotted(ion-img),::slotted(img){border-radius:var(--border-radius);width:100%;height:100%;-o-object-fit:cover;object-fit:cover;overflow:hidden}\";\n\nconst Thumbnail = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    render() {\n        return (h(Host, { class: getIonMode(this) }, h(\"slot\", null)));\n    }\n};\nThumbnail.style = thumbnailCss;\n\nexport { Avatar as ion_avatar, Badge as ion_badge, Thumbnail as ion_thumbnail };\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nconst hostContext = (selector, el) => {\n    return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color, cssClassMap) => {\n    return typeof color === 'string' && color.length > 0\n        ? Object.assign({ 'ion-color': true, [`ion-color-${color}`]: true }, cssClassMap) : cssClassMap;\n};\nconst getClassList = (classes) => {\n    if (classes !== undefined) {\n        const array = Array.isArray(classes) ? classes : classes.split(' ');\n        return array\n            .filter((c) => c != null)\n            .map((c) => c.trim())\n            .filter((c) => c !== '');\n    }\n    return [];\n};\nconst getClassMap = (classes) => {\n    const map = {};\n    getClassList(classes).forEach((c) => (map[c] = true));\n    return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction, animation) => {\n    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n        const router = document.querySelector('ion-router');\n        if (router) {\n            if (ev != null) {\n                ev.preventDefault();\n            }\n            return router.push(url, direction, animation);\n        }\n    }\n    return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n"],"x_google_ignoreList":[0,1]}