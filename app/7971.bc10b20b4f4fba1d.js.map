{"version":3,"file":"7971.bc10b20b4f4fba1d.js","mappings":"gJAGA,MAAMA,EAAcA,CAACC,EAAUC,IACK,OAAzBA,EAAGC,QAAQF,GAKhBG,EAAqBA,CAACC,EAAOC,IACP,iBAAVD,GAAsBA,EAAME,OAAS,EAC7CC,OAAOC,OAAO,CAAE,aAAa,EAAM,CAAC,aAAaJ,MAAU,GAAQC,GAAeA,EAYtFI,EAAeC,IACjB,MAAMC,EAAM,CAAC,EACbC,MAZkBF,SACFG,IAAZH,GACcI,MAAMC,QAAQL,GAAWA,EAAUA,EAAQM,MAAM,MAE1DC,OAAQC,GAAW,MAALA,GACdP,IAAKO,GAAMA,EAAEC,QACbF,OAAQC,GAAY,KAANA,GAEhB,GAIPN,CAAaF,GAASU,QAASF,GAAOP,EAAIO,IAAK,GACxCP,GAELU,EAAS,uBACTC,EAAO,eAAAC,KAAAC,KAAG,UAAOC,EAAKC,EAAIC,EAAWC,GACvC,GAAW,MAAPH,GAA0B,MAAXA,EAAI,KAAeJ,EAAOQ,KAAKJ,GAAM,CACpD,MAAMK,EAASC,SAASC,cAAc,cACtC,GAAIF,EACA,OACIJ,GAAGO,iBAEAH,EAAOI,KAAKT,EAAKE,EAAWC,EAE3C,CACA,OAAO,CACX,GAAC,gBAXYO,EAAAC,EAAAC,EAAAC,GAAA,OAAAf,EAAAgB,MAAAC,KAAAC,UAAA,4KCrBb,MAAMC,EAAQ,MACVC,YAAYC,IACRC,OAAiBL,KAAMI,GACvBJ,KAAKM,uBAAsBC,KAAYP,KAAM,sBAAuB,GAOpEA,KAAKf,IAAM,EACf,CACAuB,SAASC,GACLT,KAAKM,oBAAoBI,KAAKD,EAClC,CACAE,iBAAiBF,EAAUG,GACvB,GAAIH,IAAaG,EACb,OAEJ,MAAMC,EAAQJ,EAAW1C,OAAO+C,KAAKL,GAAY,GAC3CM,EAAQH,EAAW7C,OAAO+C,KAAKF,GAAY,GACjD,GAAIC,EAAM/C,SAAWiD,EAAMjD,QAI3B,UAAWkD,KAAOH,EACd,GAAIJ,EAASO,KAASJ,EAASI,GAE3B,YADAhB,KAAKQ,SAASC,QALlBT,KAAKQ,SAASC,EAStB,CACAQ,oBACIjB,KAAKM,oBAAoBI,MAC7B,CACA,mBAAWQ,GAAa,MAAO,CAC3BjC,IAAO,CAAC,YACRkC,UAAa,CAAC,YACdC,eAAkB,CAAC,oBACpB,GAGDC,EAAgB,MAClBlB,YAAYC,IACRC,OAAiBL,KAAMI,GACvBJ,KAAKsB,2BAA0Bf,KAAYP,KAAM,0BAA2B,EAChF,CACAuB,gBACIvB,KAAKsB,wBAAwBZ,MACjC,CACAO,oBACIjB,KAAKsB,wBAAwBZ,MACjC,CACA,mBAAWQ,GAAa,MAAO,CAC3BM,KAAQ,CAAC,iBACTC,GAAM,CAAC,iBACR,GAGDC,EAAqB,OACrBC,EAAwB,UAIxBC,EAAgBC,GAEX,IADMA,EAASpD,OAAQqD,GAAMA,EAAEhE,OAAS,GAAGiE,KAAK,KAmFrDC,EAAaC,IACf,IACIC,EADAL,EAAW,CAAC,IAEhB,GAAY,MAARI,EAAc,CACd,MAAME,EAAUF,EAAKG,QAAQ,KACzBD,GAAU,IACVD,EAAcD,EAAKI,UAAUF,EAAU,GACvCF,EAAOA,EAAKI,UAAU,EAAGF,IAE7BN,EAAWI,EACNzD,MAAM,KACNL,IAAK2D,GAAMA,EAAEnD,QACbF,OAAQqD,GAAMA,EAAEhE,OAAS,GACN,IAApB+D,EAAS/D,SACT+D,EAAW,CAAC,IAEpB,CACA,MAAO,CAAEA,WAAUK,gBA+BjBI,EAAa,eAAAvD,KAAAC,KAAG,UAAOuD,EAAMC,EAAOrD,EAAWsD,EAAOC,GAAU,EAAOtD,GACzE,IAEI,MAAMuD,EAASC,EAAcL,GAE7B,GAAIE,GAASD,EAAM1E,SAAW6E,EAC1B,OAAOD,QAEL,IAAIG,QAASC,MAAYC,KAAiBJ,EAAQG,IACxD,MAAME,EAAQR,EAAMC,GACdQ,QAAeN,EAAOO,WAAWF,EAAMG,GAAIH,EAAMI,OAAQjE,EAAWC,GAG1E,OAAI6D,EAAOP,UACPvD,EAAYuC,EACZgB,GAAU,GAGdA,QAAgBJ,EAAcW,EAAOI,QAASb,EAAOrD,EAAWsD,EAAQ,EAAGC,EAAStD,GAGhF6D,EAAOK,oBACDL,EAAOK,eAEVZ,CACX,OACOa,GACHC,cAAc,6CAA8CD,IACrD,CACX,CACJ,GAAC,gBA9BkB5D,EAAAC,EAAAC,EAAAC,GAAA,OAAAf,EAAAgB,MAAAC,KAAAC,UAAA,KAoCbwD,EAAY,eAAAC,KAAA1E,KAAG,UAAOuD,GACxB,MAAMoB,EAAM,GACZ,IAAIhB,EACAiB,EAAOrB,EAEX,KAAQI,EAASC,EAAcgB,IAAQ,CACnC,MAAMT,QAAWR,EAAOkB,aACxB,IAAIV,EAMA,MALAS,EAAOT,EAAGE,QACVF,EAAGE,aAAUhF,EACbsF,EAAIjE,KAAKyD,EAKjB,CACA,MAAO,CAAEQ,MAAKhB,SAClB,GAAC,gBAjBiBmB,GAAA,OAAAJ,EAAA3D,MAAAC,KAAAC,UAAA,KA2BZ8D,EAAkB,6FAClBnB,EAAiBL,IACnB,GAAKA,EAGL,OAAIA,EAAKyB,QAAQD,GACNxB,EAEIA,EAAK/C,cAAcuE,SACqB1F,GA8BrD4F,EAAoBA,CAACpC,EAAUqC,IAC1BA,EAAUC,KAAMC,GArBHC,EAACxC,EAAUuC,KAC/B,MAAQ5C,OAAMC,MAAO2C,EAIrB,QAHW/F,IAAPoD,GAGAD,EAAK1D,OAAS+D,EAAS/D,OACvB,OAAO,EAEX,QAASwG,EAAI,EAAGA,EAAI9C,EAAK1D,OAAQwG,IAAK,CAClC,MAAMC,EAAW/C,EAAK8C,GACtB,GAAiB,MAAbC,EACA,OAAO,EAEX,GAAIA,IAAa1C,EAASyC,GACtB,OAAO,CAEf,CACA,OAAO9C,EAAK1D,SAAW+D,EAAS/D,QAIIuG,CAAgBxC,EAAUuC,IAE5DI,EAAaA,CAACb,EAAKnB,KACrB,MAAMiC,EAAMC,KAAKC,IAAIhB,EAAI7F,OAAQ0E,EAAM1E,QACvC,IAAI8G,EAAQ,EACZ,QAASN,EAAI,EAAGA,EAAIG,EAAKH,IAAK,CAC1B,MAAMO,EAAUlB,EAAIW,GACdQ,EAAatC,EAAM8B,GAEzB,GAAIO,EAAQ1B,GAAG4B,gBAAkBD,EAAW3B,GACxC,MAEJ,GAAI0B,EAAQzB,OAAQ,CAChB,MAAM4B,EAAgBjH,OAAO+C,KAAK+D,EAAQzB,QAE1C,GAAI4B,EAAclH,SAAWgH,EAAWjD,SAAS/D,OAAQ,CAmBrD,MAAMmH,EAAiBD,EAAc7G,IAAK6C,GAAQ,IAAIA,KACtD,QAASkE,EAAI,EAAGA,EAAID,EAAenH,QAE3BmH,EAAeC,GAAGH,gBAAkBD,EAAWjD,SAASqD,GAFrBA,IAMvCN,GAER,CACJ,CAEAA,GACJ,CACA,OAAOA,GASLO,EAAkBA,CAACtD,EAAUW,KAC/B,MAAM4C,EAAgB,IAAIC,GAAexD,GACzC,IACIyD,EADAC,GAAiB,EAErB,QAASjB,EAAI,EAAGA,EAAI9B,EAAM1E,OAAQwG,IAAK,CACnC,MAAMkB,EAAgBhD,EAAM8B,GAAGzC,SAC/B,GAAyB,KAArB2D,EAAc,GACdD,GAAiB,MAEhB,CACD,UAAWE,KAAWD,EAAe,CACjC,MAAME,EAAON,EAAcO,OAE3B,GAAmB,MAAfF,EAAQ,GAAY,CACpB,GAAa,KAATC,EACA,OAAO,KAEXJ,EAAYA,GAAa,IACVA,EAAUhB,KAAOgB,EAAUhB,GAAK,CAAC,IACzCmB,EAAQG,MAAM,IAAMF,CAC/B,SACSA,IAASD,EACd,OAAO,IAEf,CACAF,GAAiB,CACrB,CACJ,CAEA,OADgBA,GAAiBA,KAA6C,KAAzBH,EAAcO,QAExD,KAEPL,EACO9C,EAAMrE,IAAI,CAAC6E,EAAOsB,MACrBnB,GAAIH,EAAMG,GACVtB,SAAUmB,EAAMnB,SAChBuB,OAAQyC,EAAY7C,EAAMI,OAAQkC,EAAUhB,IAC5CwB,YAAa9C,EAAM8C,YACnBC,YAAa/C,EAAM+C,eAGpBvD,GAMLqD,EAAcA,CAACG,EAAGC,IACbD,GAAKC,EAAIlI,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAGgI,GAAIC,QAAK5H,EAsCvD6H,EAAuBA,CAACrE,EAAUsE,KACpC,IAAIC,EAAQ,KACRC,EAAY,EAChB,UAAW7D,KAAS2D,EAAQ,CACxB,MAAMG,EAAenB,EAAgBtD,EAAUW,GAC/C,GAAqB,OAAjB8D,EAAuB,CACvB,MAAM1B,EAAQ2B,GAAgBD,GAC1B1B,EAAQyB,IACRA,EAAYzB,EACZwB,EAAQE,EAEhB,CACJ,CACA,OAAOF,GAaLG,GAAmB/D,IACrB,IAAIoC,EAAQ,EACR4B,EAAQ,EACZ,UAAWxD,KAASR,EAChB,UAAWiD,KAAWzC,EAAMnB,SACL,MAAf4D,EAAQ,GACRb,GAASF,KAAK+B,IAAI,EAAGD,GAEJ,KAAZf,IACLb,GAASF,KAAK+B,IAAI,EAAGD,IAEzBA,IAGR,OAAO5B,GAEX,MAAMS,GACFlF,YAAY0B,GACR7B,KAAK6B,SAAWA,EAAS+D,OAC7B,CACAD,OACI,OAAI3F,KAAK6B,SAAS/D,OAAS,EAChBkC,KAAK6B,SAAS6E,QAElB,EACX,EAGJ,MAAMC,EAAWA,CAAClJ,EAAImJ,IACdA,KAAQnJ,EACDA,EAAGmJ,GAEVnJ,EAAGoJ,aAAaD,GACTnJ,EAAGqJ,aAAaF,GAEpB,KAOLG,EAAiBxE,GACZjE,MAAMkD,KAAKe,EAAKyE,UAClBvI,OAAQhB,GAAsB,uBAAfA,EAAGwJ,SAClB9I,IAAKV,IACN,MAAMgE,EAAKkF,EAASlJ,EAAI,MACxB,MAAO,CACH+D,KAAMQ,EAAU2E,EAASlJ,EAAI,SAASoE,SACtCJ,GAAU,MAANA,OAAapD,EAAY2D,EAAUP,MAS7CyF,EAAc3E,GACT4E,GAAkBC,EAAe7E,IAOtC6E,EAAkBxD,GACbtF,MAAMkD,KAAKoC,EAAKoD,UAClBvI,OAAQhB,GAAsB,cAAfA,EAAGwJ,SAA2BxJ,EAAG0D,WAChDhD,IAAKV,IACN,MAAM0D,EAAYwF,EAASlJ,EAAI,aAC/B,MAAO,CACHoE,SAAUG,EAAU2E,EAASlJ,EAAI,QAAQoE,SACzCsB,GAAIhC,EAAU4D,cACd3B,OAAQ3F,EAAG2D,eACX2E,YAAatI,EAAGsI,YAChBD,YAAarI,EAAGqI,YAChBkB,SAAUI,EAAe3J,MAS/B0J,GAAqBE,IACvB,MAAMlB,EAAS,GACf,UAAWvC,KAAQyD,EACfC,EAAY,GAAInB,EAAQvC,GAE5B,OAAOuC,GAGLmB,EAAcA,CAAC9E,EAAO2D,EAAQvC,KAWhC,GAVApB,EAAQ,IACDA,EACH,CACIW,GAAIS,EAAKT,GACTtB,SAAU+B,EAAK/B,SACfuB,OAAQQ,EAAKR,OACb2C,YAAanC,EAAKmC,YAClBD,YAAalC,EAAKkC,cAGG,IAAzBlC,EAAKoD,SAASlJ,OAIlB,UAAWyJ,KAAS3D,EAAKoD,SACrBM,EAAY9E,EAAO2D,EAAQoB,QAJ3BpB,EAAOzG,KAAK8C,IAQdgF,GAAS,MACXrH,YAAYC,IACRC,OAAiBL,KAAMI,GACvBJ,KAAKyH,sBAAqBlH,KAAYP,KAAM,qBAAsB,GAClEA,KAAK0H,qBAAoBnH,KAAYP,KAAM,oBAAqB,GAChEA,KAAK2H,aAAe,KACpB3H,KAAK4H,MAAO,EACZ5H,KAAK6H,MAAQ,EACb7H,KAAK8H,UAAY,EAKjB9H,KAAKuC,KAAO,IAeZvC,KAAK+H,SAAU,CACnB,CACMC,oBAAoB,IAAAC,EAAAjI,KAAA,SAAAhB,KAAA,kBAzWtB4D,EAAcrD,SAAS2I,MAChBrF,QAAQC,UAEZ,IAAID,QAASC,IAChBqF,OAAOC,iBAAiB,iBAAkB,IAAMtF,IAAW,CAAEuF,MAAM,MAuWnE,MAAMC,QAAmBL,EAAKM,UAAUN,EAAKO,eAC7C,IAAmB,IAAfF,GACA,GAA0B,iBAAfA,EAAyB,CAChC,MAAQlE,YAAakE,EACfrG,EAAOD,EAAUoC,GACvB6D,EAAKQ,YAAYxG,EAAKJ,SAAUH,EAAoBO,EAAKC,mBACnD+F,EAAKS,kBAAkBzG,EAAKJ,SAAUH,EAChD,aAGMuG,EAAKU,iBACd,EAbqB,EAc1B,CACAC,mBACIT,OAAOC,iBAAiB,6BAA2BS,KAAS7I,KAAK8I,kBAAkBC,KAAK/I,MAAO,KAC/FmI,OAAOC,iBAAiB,yBAAuBS,KAAS7I,KAAK2I,gBAAgBI,KAAK/I,MAAO,KAC7F,CACMgJ,aAAa,IAAAC,EAAAjJ,KAAA,SAAAhB,KAAA,YACf,MAAMG,EAAY8J,EAAKC,mBACvB,IAAIrH,EAAWoH,EAAKT,cACpB,MAAMF,QAAmBW,EAAKV,UAAU1G,GACxC,IAAmB,IAAfyG,EACA,IAA0B,iBAAfA,EAIP,OAAO,EAHPzG,EAAWG,EAAUsG,EAAWlE,UAAUvC,QAGnC,CAGf,OAAOoH,EAAKP,kBAAkB7G,EAAU1C,EAAW,EAZpC,EAanB,CACAgK,aAAajK,GACTA,EAAGkK,OAAOC,SAAS,EAAIC,IACnBtJ,KAAKuJ,OACLD,KAER,CAEME,gBAAgB,IAAAC,EAAAzJ,KAAA,SAAAhB,KAAA,YAClB,MAAMsJ,QAAmBmB,EAAKlB,YAC9B,OAAmB,IAAfD,GAC0B,iBAAfA,GACAA,EAAWlE,QAMd,EAVM,EAWtB,CAQM1E,KAAIgK,GAAyC,IAAAC,EAAA3J,KAAA,SAAAhB,KAAA,UAAxCiD,EAAM9C,EAAY,UAAWC,GACpC,IAAIwK,EACJ,GAAI3H,EAAK4H,WAAW,KAAM,CACtB,MAAMC,EAA2C,QAA5BF,EAAKD,EAAKhC,oBAAiC,IAAPiC,EAAgBA,EAAK,IAExE3K,EAAM,IAAI8K,IAAI9H,EAAM,gBAAgB6H,KAC1C7H,EAAOhD,EAAI+K,SAAW/K,EAAIgL,MAC9B,CACA,IAAIC,EAAalI,EAAUC,GAC3B,MAAMqG,QAAmBqB,EAAKpB,UAAU2B,EAAWrI,UACnD,IAAmB,IAAfyG,EACA,IAA0B,iBAAfA,EAIP,OAAO,EAHP4B,EAAalI,EAAUsG,EAAWlE,SAG3B,CAGfuF,SAAKlB,YAAYyB,EAAWrI,SAAU1C,EAAW+K,EAAWhI,aACrDyH,EAAKjB,kBAAkBwB,EAAWrI,SAAU1C,EAAWC,EAAW,GAAAW,MAAAC,KAAAC,UAC7E,CAEAsJ,OACIpB,cAAOgC,QAAQZ,OACR1G,QAAQC,QAAQ9C,KAAKoK,YAChC,CAEMC,aAAa,IAAAC,EAAAtK,KAAA,SAAAhB,KAAA,YAlhBFuL,KACjBC,QAAQC,MAAM,qBAAqBF,EAAOzM,WAC1C,UAAW0E,KAAS+H,EAAQ,CACxB,MAAM1I,EAAW,GACjBW,EAAM5D,QAAS8L,GAAM7I,EAASnC,QAAQgL,EAAE7I,WACxC,MAAM8B,EAAMnB,EAAMrE,IAAKuM,GAAMA,EAAEvH,IAC/BqH,QAAQG,MAAM,MAAM/I,EAAaC,KAAa,wCAAyC,OAAQ,IAAI8B,EAAI5B,KAAK,SAChH,CACAyI,QAAQI,YA2gBJC,CAAY3D,EAAWoD,EAAK7M,KAzgBZyG,KACpBsG,QAAQC,MAAM,wBAAwBvG,EAAUpG,WAChD,UAAWsG,KAAYF,EACfE,EAAS3C,IACT+I,QAAQG,MAAM,SAAU,MAAM/I,EAAawC,EAAS5C,QAAS,oBAAqB,QAAS,MAAMI,EAAawC,EAAS3C,GAAGI,YAAa,qBAG/I2I,QAAQI,YAmgBJE,CAAe/D,EAAcuD,EAAK7M,IAAK,EAFxB,EAGnB,CAEMsN,WAAW5L,GAAW,IAAA6L,EAAAhL,KAAA,SAAAhB,KAAA,YACxB,GAAIgM,EAAKpD,KACLqD,cAAgB,6DACT,EAEX,MAAQtH,MAAKhB,gBAAiBc,EAAa0E,OAAO5I,SAAS2I,MAErD1F,EAzSU0I,EAACvH,EAAKwC,KAC1B,IAAIC,EAAQ,KACR+E,EAAa,EACjB,UAAW3I,KAAS2D,EAAQ,CACxB,MAAMvB,EAAQJ,EAAWb,EAAKnB,GAC1BoC,EAAQuG,IACR/E,EAAQ5D,EACR2I,EAAavG,EAErB,CACA,OAAIwB,EACOA,EAAMjI,IAAI,CAAC6E,EAAOsB,KACrB,IAAIsF,EACJ,MAAQ,CACJzG,GAAIH,EAAMG,GACVtB,SAAUmB,EAAMnB,SAChBuB,OAAQyC,EAAY7C,EAAMI,OAA0B,QAAjBwG,EAAKjG,EAAIW,UAAuB,IAAPsF,OAAgB,EAASA,EAAGxG,WAI7F,MAqRW8H,CAAgBvH,EADfuD,EAAW8D,EAAKvN,KAE/B,IAAK+E,EACDyI,cAAgB,qCAAsCtH,EAAIxF,IAAKmG,GAAMA,EAAEnB,MAChE,EAEX,MAAMtB,EA7mBWW,KACrB,MAAMX,EAAW,GACjB,UAAWmB,KAASR,EAChB,UAAWiD,KAAWzC,EAAMnB,SACxB,GAAmB,MAAf4D,EAAQ,GAAY,CAEpB,MAAM2F,EAAQpI,EAAMI,QAAUJ,EAAMI,OAAOqC,EAAQG,MAAM,IACzD,IAAKwF,EACD,OAAO,KAEXvJ,EAASnC,KAAK0L,EAClB,KACqB,KAAZ3F,GACL5D,EAASnC,KAAK+F,GAI1B,OAAO5D,GA4lBcwJ,CAAgB7I,GACjC,OAAKX,GAILmJ,EAAKvC,YAAY5G,EAAU1C,SACrB6L,EAAKM,kBAAkB3I,EAAQH,EAAOd,EAAoBG,EAAU,KAAM8B,EAAI7F,SAC7E,OALHmN,KAAgB,uFACT,EAIC,EAnBY,EAoB5B,CAEAnC,oBACI,MAAMjH,EAAW7B,KAAKwI,cAClB3G,GAAYoC,EAAkBpC,EAAUkF,EAAc/G,KAAKvC,MAC3DuC,KAAK0I,kBAAkB7G,EAAUH,EAEzC,CAEAiH,kBACI,OAAO3I,KAAK0I,kBAAkB1I,KAAKwI,cAAe9G,EACtD,CACAwH,mBACI,IAAIU,EACJ,MAAM2B,EAAMpD,OACc,OAAtBoD,EAAIpB,QAAQtC,QACZ7H,KAAK6H,QACL0D,EAAIpB,QAAQqB,aAAaxL,KAAK6H,MAAO0D,EAAIhM,SAASkM,MAAwC,QAAhC7B,EAAK2B,EAAIhM,SAASmM,gBAA6B,IAAP9B,OAAgB,EAASA,EAAG+B,OAElI,MAAM9D,EAAQ0D,EAAIpB,QAAQtC,MACpBC,EAAY9H,KAAK8H,UAEvB,OADA9H,KAAK8H,UAAYD,EACbA,EAAQC,GAAcD,GAASC,GAAaA,EAAY,EACjDnG,EAEPkG,EAAQC,EA/qBO,OAkrBZpG,CACX,CACMgH,kBAAkB7G,EAAU1C,EAAWC,GAAW,IAAAwM,EAAA5L,KAAA,SAAAhB,KAAA,YACpD,IAAK6C,EACD2B,cAAc,uDACP,EAGX,MAAMU,EAAY6C,EAAc6E,EAAKnO,IAC/B2G,EAAWH,EAAkBpC,EAAUqC,GAC7C,IAAI2H,EAAe,KACnB,GAAIzH,EAAU,CACV,MAAQvC,SAAUiK,EAAY5J,eAAgBkC,EAAS3C,GACvDmK,EAAKnD,YAAYqD,EAAY3M,EAAW+C,GACxC2J,EAAezH,EAAS5C,KACxBK,EAAWiK,CACf,CAEA,MAAMvB,EAASrD,EAAW0E,EAAKnO,IACzB+E,EAAQ0D,EAAqBrE,EAAU0I,GAC7C,OAAK/H,EAKEoJ,EAAKN,kBAAkB/L,SAAS2I,KAAM1F,EAAOrD,EAAW0C,EAAUgK,EAAc,EAAGzM,KAAS,EAJ/FoE,KAAc,sDACP,EAG0F,EAvBjD,EAwBxD,CACM8H,kBAAiBS,EAAAC,EAAAC,EAAAC,EAAAC,GAAuE,IAAAC,EAAApM,KAAA,SAAAhB,KAAA,UAAtE4E,EAAMpB,EAAOrD,EAAW0C,EAAUgK,EAAcpJ,EAAQ,EAAGrD,GAC/E,MAAMiN,QAAeD,EAAKE,OAC1B,IAAI5J,GAAU,EACd,IACIA,QAAgB0J,EAAK9J,cAAcsB,EAAMpB,EAAOrD,EAAW0C,EAAUgK,EAAcpJ,EAAOrD,EAC9F,OACOmE,KACHC,OAAc,iDAAkDD,GACpE,CACA8I,WACO3J,CAAQ,GAAA3C,MAAAC,KAAAC,UACnB,CACMqM,OAAO,IAAAC,EAAAvM,KAAA,SAAAhB,KAAA,YACT,MAAMwN,EAAID,EAAKnC,YACf,IAAItH,EACJyJ,SAAKnC,YAAc,IAAIvH,QAAS6H,GAAO5H,EAAU4H,QACvCrM,IAANmO,UACMA,GAEH1J,CAAQ,EAPN,EAQb,CAOMyF,YAAyC,IAAAkE,EAAAzM,KAAA,SAAAhB,KAAA,UAA/ByC,EAAKgL,EAAKjE,cAAehH,GAIrC,QAHanD,IAATmD,IACAA,EAAOQ,EAAUyK,EAAK9E,cAAc9F,WAEnCJ,IAAOD,EACR,OAAO,EAEX,MAAM+I,EAASrD,EAAWuF,EAAKhP,IACzBiP,EAAYxG,EAAqB1E,EAAM+I,GAEvCoC,EAAkBD,GAAaA,EAAUA,EAAU5O,OAAS,GAAGiI,YAC/D6G,GAAWD,UAAwBA,KACzC,IAAiB,IAAbC,GAA0C,iBAAbA,EAC7B,OAAOA,EAEX,MAAMC,EAAU3G,EAAqBzE,EAAI8I,GAEnCuC,EAAkBD,GAAWA,EAAQA,EAAQ/O,OAAS,GAAGgI,YAC/D,OAAOgH,GAAkBA,GAAyB,GAAA/M,MAAAC,KAAAC,UACtD,CACMqC,cAAayK,EAAAC,EAAAC,EAAAC,EAAAC,GAAuE,IAAAC,EAAApN,KAAA,SAAAhB,KAAA,UAAtE4E,EAAMpB,EAAOrD,EAAW0C,EAAUgK,EAAcpJ,EAAQ,EAAGrD,GAC3E,GAAIgO,EAAKxF,KACLqD,cAAgB,6DACT,EAEXmC,EAAKxF,MAAO,EAEZ,MAAMyF,EAAaD,EAAKE,iBAAiBzL,EAAUgK,GAC/CwB,GACAD,EAAK3F,mBAAmB/G,KAAK2M,GAEjC,MAAM3K,QAAgBJ,EAAcsB,EAAMpB,EAAOrD,EAAWsD,GAAO,EAAOrD,GAC1EgO,SAAKxF,MAAO,EAERyF,GACAD,EAAK1F,kBAAkBhH,KAAK2M,GAEzB3K,CAAQ,GAAA3C,MAAAC,KAAAC,UACnB,CACAwI,YAAY5G,EAAU1C,EAAW+C,GAC7BlC,KAAK6H,QA/vBS0F,EAACpD,EAAS5H,EAAMwF,EAASlG,EAAU1C,EAAW0I,EAAO3F,KACvE,MAAMjD,EAXUuO,EAAC3L,EAAUkG,EAAS7F,KACpC,IAAIjD,EAAM2C,EAAaC,GACvB,OAAIkG,IACA9I,EAAM,IAAMA,QAEIZ,IAAhB6D,IACAjD,GAAO,IAAMiD,GAEVjD,GAGKuO,CAAY,IAAIxL,EAAUO,GAAMV,YAAaA,GAAWkG,EAAS7F,GACzE/C,IAAcwC,EACdwI,EAAQsD,UAAU5F,EAAO,GAAI5I,GAG7BkL,EAAQqB,aAAa3D,EAAO,GAAI5I,IA0vBhCsO,CAAcpF,OAAOgC,QAASnK,KAAKuC,KAAMvC,KAAK+H,QAASlG,EAAU1C,EAAWa,KAAK6H,MAAO3F,EAC5F,CACAsG,cACI,MAxsBakF,EAACC,EAAKpL,EAAMwF,KAC7B,MAAM6F,EAAS5L,EAusB0BhC,KAAKuC,MAvsBfV,SACzBmI,EAAWjC,EAAU4F,EAAIE,KAAKjI,MAAM,GAAK+H,EAAI3D,SAEnD,MArBiB8D,EAACF,EAAQ/L,KAC1B,GAAI+L,EAAO9P,OAAS+D,EAAS/D,OACzB,OAAO,KAEX,GAAI8P,EAAO9P,QAAU,GAAmB,KAAd8P,EAAO,GAC7B,OAAO/L,EAEX,QAASyC,EAAI,EAAGA,EAAIsJ,EAAO9P,OAAQwG,IAC/B,GAAIsJ,EAAOtJ,KAAOzC,EAASyC,GACvB,OAAO,KAGf,OAAIzC,EAAS/D,SAAW8P,EAAO9P,OACpB,CAAC,IAEL+D,EAAS+D,MAAMgI,EAAO9P,SAMtBgQ,CAAaF,EADH5L,EAAUgI,GAAUnI,WAqsB1B6L,CAAavF,OAAOuD,SAAU1L,EAAWA,KAAK+H,QACzD,CACAuF,iBAAiBxB,EAAYiC,GACzB,MAAMvM,EAAOxB,KAAK2H,aACZlG,EAAKG,EAAakK,GAExB,OADA9L,KAAK2H,aAAelG,EAChBA,IAAOD,EACA,KAGJ,CACHA,OACAwM,eAHmBD,EAAuBnM,EAAamM,GAAwB,KAI/EtM,KAER,CACA,MAAIhE,GAAO,SAAOwQ,KAAWjO,KAAO,GAKlCkO,GAAU,UAAVA,EAAa,MACf/N,YAAYC,IACRC,OAAiBL,KAAMI,GAKvBJ,KAAKmO,gBAAkB,UACvBnO,KAAKoO,QAAWlP,KACZJ,OAAQkB,KAAK2L,KAAMzM,EAAIc,KAAKmO,gBAAiBnO,KAAKqO,iBAE1D,CACAC,SACI,MAAMC,KAAOC,KAAWxO,MAClByO,EAAQ,CACV9C,KAAM3L,KAAK2L,KACX+C,IAAK1O,KAAK0O,IACVC,OAAQ3O,KAAK2O,QAEjB,SAAQC,KAAEC,IAAM,CAAE7N,IAAK,2CAA4CoN,QAASpO,KAAKoO,QAASU,SAAOnR,KAAmBqC,KAAKpC,MAAO,CACxH2F,CAACgL,IAAO,EACR,mBAAmB,MACpB,EAAGK,KAAE,IAAK7Q,OAAOC,OAAO,CAAEgD,IAAK,4CAA8CyN,IAAK,EAAGG,KAAE,OAAQ,CAAE5N,IAAK,8CACjH,GAEJkN,SAAWa,MA3BW,8ZAEhBb,CAAU","names":["hostContext","selector","el","closest","createColorClasses","color","cssClassMap","length","Object","assign","getClassMap","classes","map","getClassList","undefined","Array","isArray","split","filter","c","trim","forEach","SCHEME","openURL","_ref","_asyncToGenerator","url","ev","direction","animation","test","router","document","querySelector","preventDefault","push","_x","_x2","_x3","_x4","apply","this","arguments","Route","constructor","hostRef","registerInstance","ionRouteDataChanged","createEvent","onUpdate","newValue","emit","onComponentProps","oldValue","keys1","keys","keys2","key","connectedCallback","watchers","component","componentProps","RouteRedirect","ionRouteRedirectChanged","propDidChange","from","to","ROUTER_INTENT_NONE","ROUTER_INTENT_FORWARD","generatePath","segments","s","join","parsePath","path","queryString","qsStart","indexOf","substring","writeNavState","root","chain","index","changed","outlet","searchNavNode","Promise","resolve","componentOnReady","route","result","setRouteId","id","params","element","markVisible","e","printIonError","readNavState","_ref2","ids","node","getRouteId","_x5","OUTLET_SELECTOR","matches","findRouteRedirect","redirects","find","redirect","matchesRedirect","i","expected","matchesIDs","len","Math","min","score","routeId","routeChain","toLowerCase","routeIdParams","pathWithParams","j","matchesSegments","inputSegments","RouterSegments","allparams","matchesDefault","chainSegments","segment","data","next","slice","mergeParams","beforeEnter","beforeLeave","a","b","findChainForSegments","chains","match","bestScore","matchedChain","computePriority","level","pow","shift","readProp","prop","hasAttribute","getAttribute","readRedirects","children","tagName","readRoutes","flattenRouterTree","readRouteNodes","nodes","flattenNode","child","Router","ionRouteWillChange","ionRouteDidChange","previousPath","busy","state","lastState","useHash","componentWillLoad","_this","body","window","addEventListener","once","canProceed","runGuards","getSegments","setSegments","writeNavStateRoot","onRoutesChanged","componentDidLoad","debounce","onRedirectChanged","bind","onPopState","_this2","historyDirection","onBackButton","detail","register","processNextHandler","back","canTransition","_this3","_x6","_this4","_a","startsWith","currentPath","URL","pathname","search","parsedPath","history","waitPromise","printDebug","_this5","routes","console","group","r","debug","groupEnd","printRoutes","printRedirects","navChanged","_this6","printIonWarning","findChainForIDs","maxMatches","param","chainToSegments","safeWriteNavState","win","replaceState","title","location","href","_this7","redirectFrom","toSegments","_x7","_x8","_x9","_x0","_x1","_this8","unlock","lock","_this9","p","_this0","fromChain","beforeLeaveHook","canLeave","toChain","beforeEnterHook","_x10","_x11","_x12","_x13","_x14","_this1","routeEvent","routeChangeEvent","writeSegments","generateUrl","pushState","readSegments","loc","prefix","hash","removePrefix","redirectFromSegments","redirectedFrom","getElement","RouterLink","routerDirection","onClick","routerAnimation","render","mode","getIonMode","attrs","rel","target","h","Host","class","style"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/theme-DiVJyqlX.js","./node_modules/@ionic/core/dist/esm/ion-route_4.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nconst hostContext = (selector, el) => {\n    return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color, cssClassMap) => {\n    return typeof color === 'string' && color.length > 0\n        ? Object.assign({ 'ion-color': true, [`ion-color-${color}`]: true }, cssClassMap) : cssClassMap;\n};\nconst getClassList = (classes) => {\n    if (classes !== undefined) {\n        const array = Array.isArray(classes) ? classes : classes.split(' ');\n        return array\n            .filter((c) => c != null)\n            .map((c) => c.trim())\n            .filter((c) => c !== '');\n    }\n    return [];\n};\nconst getClassMap = (classes) => {\n    const map = {};\n    getClassList(classes).forEach((c) => (map[c] = true));\n    return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction, animation) => {\n    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n        const router = document.querySelector('ion-router');\n        if (router) {\n            if (ev != null) {\n                ev.preventDefault();\n            }\n            return router.push(url, direction, animation);\n        }\n    }\n    return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, c as createEvent, j as printIonError, f as printIonWarning, g as getElement, h, d as Host } from './index-4DxY6_gG.js';\nimport { c as componentOnReady, p as debounce } from './helpers-8KSQQGQy.js';\nimport { o as openURL, c as createColorClasses } from './theme-DiVJyqlX.js';\nimport { b as getIonMode } from './ionic-global-CTSyufhF.js';\n\nconst Route = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\n        /**\n         * Relative path that needs to match in order for this route to apply.\n         *\n         * Accepts paths similar to expressjs so that you can define parameters\n         * in the url /foo/:bar where bar would be available in incoming props.\n         */\n        this.url = '';\n    }\n    onUpdate(newValue) {\n        this.ionRouteDataChanged.emit(newValue);\n    }\n    onComponentProps(newValue, oldValue) {\n        if (newValue === oldValue) {\n            return;\n        }\n        const keys1 = newValue ? Object.keys(newValue) : [];\n        const keys2 = oldValue ? Object.keys(oldValue) : [];\n        if (keys1.length !== keys2.length) {\n            this.onUpdate(newValue);\n            return;\n        }\n        for (const key of keys1) {\n            if (newValue[key] !== oldValue[key]) {\n                this.onUpdate(newValue);\n                return;\n            }\n        }\n    }\n    connectedCallback() {\n        this.ionRouteDataChanged.emit();\n    }\n    static get watchers() { return {\n        \"url\": [\"onUpdate\"],\n        \"component\": [\"onUpdate\"],\n        \"componentProps\": [\"onComponentProps\"]\n    }; }\n};\n\nconst RouteRedirect = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\n    }\n    propDidChange() {\n        this.ionRouteRedirectChanged.emit();\n    }\n    connectedCallback() {\n        this.ionRouteRedirectChanged.emit();\n    }\n    static get watchers() { return {\n        \"from\": [\"propDidChange\"],\n        \"to\": [\"propDidChange\"]\n    }; }\n};\n\nconst ROUTER_INTENT_NONE = 'root';\nconst ROUTER_INTENT_FORWARD = 'forward';\nconst ROUTER_INTENT_BACK = 'back';\n\n/** Join the non empty segments with \"/\". */\nconst generatePath = (segments) => {\n    const path = segments.filter((s) => s.length > 0).join('/');\n    return '/' + path;\n};\nconst generateUrl = (segments, useHash, queryString) => {\n    let url = generatePath(segments);\n    if (useHash) {\n        url = '#' + url;\n    }\n    if (queryString !== undefined) {\n        url += '?' + queryString;\n    }\n    return url;\n};\nconst writeSegments = (history, root, useHash, segments, direction, state, queryString) => {\n    const url = generateUrl([...parsePath(root).segments, ...segments], useHash, queryString);\n    if (direction === ROUTER_INTENT_FORWARD) {\n        history.pushState(state, '', url);\n    }\n    else {\n        history.replaceState(state, '', url);\n    }\n};\n/**\n * Transforms a chain to a list of segments.\n *\n * Notes:\n * - parameter segments of the form :param are replaced with their value,\n * - null is returned when a value is missing for any parameter segment.\n */\nconst chainToSegments = (chain) => {\n    const segments = [];\n    for (const route of chain) {\n        for (const segment of route.segments) {\n            if (segment[0] === ':') {\n                // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n                const param = route.params && route.params[segment.slice(1)];\n                if (!param) {\n                    return null;\n                }\n                segments.push(param);\n            }\n            else if (segment !== '') {\n                segments.push(segment);\n            }\n        }\n    }\n    return segments;\n};\n/**\n * Removes the prefix segments from the path segments.\n *\n * Return:\n * - null when the path segments do not start with the passed prefix,\n * - the path segments after the prefix otherwise.\n */\nconst removePrefix = (prefix, segments) => {\n    if (prefix.length > segments.length) {\n        return null;\n    }\n    if (prefix.length <= 1 && prefix[0] === '') {\n        return segments;\n    }\n    for (let i = 0; i < prefix.length; i++) {\n        if (prefix[i] !== segments[i]) {\n            return null;\n        }\n    }\n    if (segments.length === prefix.length) {\n        return [''];\n    }\n    return segments.slice(prefix.length);\n};\nconst readSegments = (loc, root, useHash) => {\n    const prefix = parsePath(root).segments;\n    const pathname = useHash ? loc.hash.slice(1) : loc.pathname;\n    const segments = parsePath(pathname).segments;\n    return removePrefix(prefix, segments);\n};\n/**\n * Parses the path to:\n * - segments an array of '/' separated parts,\n * - queryString (undefined when no query string).\n */\nconst parsePath = (path) => {\n    let segments = [''];\n    let queryString;\n    if (path != null) {\n        const qsStart = path.indexOf('?');\n        if (qsStart > -1) {\n            queryString = path.substring(qsStart + 1);\n            path = path.substring(0, qsStart);\n        }\n        segments = path\n            .split('/')\n            .map((s) => s.trim())\n            .filter((s) => s.length > 0);\n        if (segments.length === 0) {\n            segments = [''];\n        }\n    }\n    return { segments, queryString };\n};\n\nconst printRoutes = (routes) => {\n    console.group(`[ion-core] ROUTES[${routes.length}]`);\n    for (const chain of routes) {\n        const segments = [];\n        chain.forEach((r) => segments.push(...r.segments));\n        const ids = chain.map((r) => r.id);\n        console.debug(`%c ${generatePath(segments)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n    }\n    console.groupEnd();\n};\nconst printRedirects = (redirects) => {\n    console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n    for (const redirect of redirects) {\n        if (redirect.to) {\n            console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to.segments)}`, 'font-weight: bold');\n        }\n    }\n    console.groupEnd();\n};\n\n/**\n * Activates the passed route chain.\n *\n * There must be exactly one outlet per route entry in the chain.\n *\n * The methods calls setRouteId on each of the outlet with the corresponding route entry in the chain.\n * setRouteId will create or select the view in the outlet.\n */\nconst writeNavState = async (root, chain, direction, index, changed = false, animation) => {\n    try {\n        // find next navigation outlet in the DOM\n        const outlet = searchNavNode(root);\n        // make sure we can continue interacting the DOM, otherwise abort\n        if (index >= chain.length || !outlet) {\n            return changed;\n        }\n        await new Promise((resolve) => componentOnReady(outlet, resolve));\n        const route = chain[index];\n        const result = await outlet.setRouteId(route.id, route.params, direction, animation);\n        // if the outlet changed the page, reset navigation to neutral (no direction)\n        // this means nested outlets will not animate\n        if (result.changed) {\n            direction = ROUTER_INTENT_NONE;\n            changed = true;\n        }\n        // recursively set nested outlets\n        changed = await writeNavState(result.element, chain, direction, index + 1, changed, animation);\n        // once all nested outlets are visible let's make the parent visible too,\n        // using markVisible prevents flickering\n        if (result.markVisible) {\n            await result.markVisible();\n        }\n        return changed;\n    }\n    catch (e) {\n        printIonError('[ion-router] - Exception in writeNavState:', e);\n        return false;\n    }\n};\n/**\n * Recursively walks the outlet in the DOM.\n *\n * The function returns a list of RouteID corresponding to each of the outlet and the last outlet without a RouteID.\n */\nconst readNavState = async (root) => {\n    const ids = [];\n    let outlet;\n    let node = root;\n    // eslint-disable-next-line no-cond-assign\n    while ((outlet = searchNavNode(node))) {\n        const id = await outlet.getRouteId();\n        if (id) {\n            node = id.element;\n            id.element = undefined;\n            ids.push(id);\n        }\n        else {\n            break;\n        }\n    }\n    return { ids, outlet };\n};\nconst waitUntilNavNode = () => {\n    if (searchNavNode(document.body)) {\n        return Promise.resolve();\n    }\n    return new Promise((resolve) => {\n        window.addEventListener('ionNavWillLoad', () => resolve(), { once: true });\n    });\n};\n/** Selector for all the outlets supported by the router. */\nconst OUTLET_SELECTOR = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\nconst searchNavNode = (root) => {\n    if (!root) {\n        return undefined;\n    }\n    if (root.matches(OUTLET_SELECTOR)) {\n        return root;\n    }\n    const outlet = root.querySelector(OUTLET_SELECTOR);\n    return outlet !== null && outlet !== void 0 ? outlet : undefined;\n};\n\n/**\n * Returns whether the given redirect matches the given path segments.\n *\n * A redirect matches when the segments of the path and redirect.from are equal.\n * Note that segments are only checked until redirect.from contains a '*' which matches any path segment.\n * The path ['some', 'path', 'to', 'page'] matches both ['some', 'path', 'to', 'page'] and ['some', 'path', '*'].\n */\nconst matchesRedirect = (segments, redirect) => {\n    const { from, to } = redirect;\n    if (to === undefined) {\n        return false;\n    }\n    if (from.length > segments.length) {\n        return false;\n    }\n    for (let i = 0; i < from.length; i++) {\n        const expected = from[i];\n        if (expected === '*') {\n            return true;\n        }\n        if (expected !== segments[i]) {\n            return false;\n        }\n    }\n    return from.length === segments.length;\n};\n/** Returns the first redirect matching the path segments or undefined when no match found. */\nconst findRouteRedirect = (segments, redirects) => {\n    return redirects.find((redirect) => matchesRedirect(segments, redirect));\n};\nconst matchesIDs = (ids, chain) => {\n    const len = Math.min(ids.length, chain.length);\n    let score = 0;\n    for (let i = 0; i < len; i++) {\n        const routeId = ids[i];\n        const routeChain = chain[i];\n        // Skip results where the route id does not match the chain at the same index\n        if (routeId.id.toLowerCase() !== routeChain.id) {\n            break;\n        }\n        if (routeId.params) {\n            const routeIdParams = Object.keys(routeId.params);\n            // Only compare routes with the chain that have the same number of parameters.\n            if (routeIdParams.length === routeChain.segments.length) {\n                // Maps the route's params into a path based on the path variable names,\n                // to compare against the route chain format.\n                //\n                // Before:\n                // ```ts\n                // {\n                //  params: {\n                //    s1: 'a',\n                //    s2: 'b'\n                //  }\n                // }\n                // ```\n                //\n                // After:\n                // ```ts\n                // [':s1',':s2']\n                // ```\n                //\n                const pathWithParams = routeIdParams.map((key) => `:${key}`);\n                for (let j = 0; j < pathWithParams.length; j++) {\n                    // Skip results where the path variable is not a match\n                    if (pathWithParams[j].toLowerCase() !== routeChain.segments[j]) {\n                        break;\n                    }\n                    // Weight path matches for the same index higher.\n                    score++;\n                }\n            }\n        }\n        // Weight id matches\n        score++;\n    }\n    return score;\n};\n/**\n * Matches the segments against the chain.\n *\n * Returns:\n * - null when there is no match,\n * - a chain with the params properties updated with the parameter segments on match.\n */\nconst matchesSegments = (segments, chain) => {\n    const inputSegments = new RouterSegments(segments);\n    let matchesDefault = false;\n    let allparams;\n    for (let i = 0; i < chain.length; i++) {\n        const chainSegments = chain[i].segments;\n        if (chainSegments[0] === '') {\n            matchesDefault = true;\n        }\n        else {\n            for (const segment of chainSegments) {\n                const data = inputSegments.next();\n                // data param\n                if (segment[0] === ':') {\n                    if (data === '') {\n                        return null;\n                    }\n                    allparams = allparams || [];\n                    const params = allparams[i] || (allparams[i] = {});\n                    params[segment.slice(1)] = data;\n                }\n                else if (data !== segment) {\n                    return null;\n                }\n            }\n            matchesDefault = false;\n        }\n    }\n    const matches = matchesDefault ? matchesDefault === (inputSegments.next() === '') : true;\n    if (!matches) {\n        return null;\n    }\n    if (allparams) {\n        return chain.map((route, i) => ({\n            id: route.id,\n            segments: route.segments,\n            params: mergeParams(route.params, allparams[i]),\n            beforeEnter: route.beforeEnter,\n            beforeLeave: route.beforeLeave,\n        }));\n    }\n    return chain;\n};\n/**\n * Merges the route parameter objects.\n * Returns undefined when both parameters are undefined.\n */\nconst mergeParams = (a, b) => {\n    return a || b ? Object.assign(Object.assign({}, a), b) : undefined;\n};\n/**\n * Finds the best match for the ids in the chains.\n *\n * Returns the best match or null when no match is found.\n * When a chain is returned the parameters are updated from the RouteIDs.\n * That is they contain both the componentProps of the <ion-route> and the parameter segment.\n */\nconst findChainForIDs = (ids, chains) => {\n    let match = null;\n    let maxMatches = 0;\n    for (const chain of chains) {\n        const score = matchesIDs(ids, chain);\n        if (score > maxMatches) {\n            match = chain;\n            maxMatches = score;\n        }\n    }\n    if (match) {\n        return match.map((route, i) => {\n            var _a;\n            return ({\n                id: route.id,\n                segments: route.segments,\n                params: mergeParams(route.params, (_a = ids[i]) === null || _a === void 0 ? void 0 : _a.params),\n            });\n        });\n    }\n    return null;\n};\n/**\n * Finds the best match for the segments in the chains.\n *\n * Returns the best match or null when no match is found.\n * When a chain is returned the parameters are updated from the segments.\n * That is they contain both the componentProps of the <ion-route> and the parameter segments.\n */\nconst findChainForSegments = (segments, chains) => {\n    let match = null;\n    let bestScore = 0;\n    for (const chain of chains) {\n        const matchedChain = matchesSegments(segments, chain);\n        if (matchedChain !== null) {\n            const score = computePriority(matchedChain);\n            if (score > bestScore) {\n                bestScore = score;\n                match = matchedChain;\n            }\n        }\n    }\n    return match;\n};\n/**\n * Computes the priority of a chain.\n *\n * Parameter segments are given a lower priority over fixed segments.\n *\n * Considering the following 2 chains matching the path /path/to/page:\n * - /path/to/:where\n * - /path/to/page\n *\n * The second one will be given a higher priority because \"page\" is a fixed segment (vs \":where\", a parameter segment).\n */\nconst computePriority = (chain) => {\n    let score = 1;\n    let level = 1;\n    for (const route of chain) {\n        for (const segment of route.segments) {\n            if (segment[0] === ':') {\n                score += Math.pow(1, level);\n            }\n            else if (segment !== '') {\n                score += Math.pow(2, level);\n            }\n            level++;\n        }\n    }\n    return score;\n};\nclass RouterSegments {\n    constructor(segments) {\n        this.segments = segments.slice();\n    }\n    next() {\n        if (this.segments.length > 0) {\n            return this.segments.shift();\n        }\n        return '';\n    }\n}\n\nconst readProp = (el, prop) => {\n    if (prop in el) {\n        return el[prop];\n    }\n    if (el.hasAttribute(prop)) {\n        return el.getAttribute(prop);\n    }\n    return null;\n};\n/**\n * Extracts the redirects (that is <ion-route-redirect> elements inside the root).\n *\n * The redirects are returned as a list of RouteRedirect.\n */\nconst readRedirects = (root) => {\n    return Array.from(root.children)\n        .filter((el) => el.tagName === 'ION-ROUTE-REDIRECT')\n        .map((el) => {\n        const to = readProp(el, 'to');\n        return {\n            from: parsePath(readProp(el, 'from')).segments,\n            to: to == null ? undefined : parsePath(to),\n        };\n    });\n};\n/**\n * Extracts all the routes (that is <ion-route> elements inside the root).\n *\n * The routes are returned as a list of chains - the flattened tree.\n */\nconst readRoutes = (root) => {\n    return flattenRouterTree(readRouteNodes(root));\n};\n/**\n * Reads the route nodes as a tree modeled after the DOM tree of <ion-route> elements.\n *\n * Note: routes without a component are ignored together with their children.\n */\nconst readRouteNodes = (node) => {\n    return Array.from(node.children)\n        .filter((el) => el.tagName === 'ION-ROUTE' && el.component)\n        .map((el) => {\n        const component = readProp(el, 'component');\n        return {\n            segments: parsePath(readProp(el, 'url')).segments,\n            id: component.toLowerCase(),\n            params: el.componentProps,\n            beforeLeave: el.beforeLeave,\n            beforeEnter: el.beforeEnter,\n            children: readRouteNodes(el),\n        };\n    });\n};\n/**\n * Flattens a RouterTree in a list of chains.\n *\n * Each chain represents a path from the root node to a terminal node.\n */\nconst flattenRouterTree = (nodes) => {\n    const chains = [];\n    for (const node of nodes) {\n        flattenNode([], chains, node);\n    }\n    return chains;\n};\n/** Flattens a route node recursively and push each branch to the chains list. */\nconst flattenNode = (chain, chains, node) => {\n    chain = [\n        ...chain,\n        {\n            id: node.id,\n            segments: node.segments,\n            params: node.params,\n            beforeLeave: node.beforeLeave,\n            beforeEnter: node.beforeEnter,\n        },\n    ];\n    if (node.children.length === 0) {\n        chains.push(chain);\n        return;\n    }\n    for (const child of node.children) {\n        flattenNode(chain, chains, child);\n    }\n};\n\nconst Router = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n        this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n        this.previousPath = null;\n        this.busy = false;\n        this.state = 0;\n        this.lastState = 0;\n        /**\n         * The root path to use when matching URLs. By default, this is set to \"/\", but you can specify\n         * an alternate prefix for all URL paths.\n         */\n        this.root = '/';\n        /**\n         * The router can work in two \"modes\":\n         * - With hash: `/index.html#/path/to/page`\n         * - Without hash: `/path/to/page`\n         *\n         * Using one or another might depend in the requirements of your app and/or where it's deployed.\n         *\n         * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n         * requires additional server-side configuration in order to properly work.\n         *\n         * On the other side hash-navigation is much easier to deploy, it even works over the file protocol.\n         *\n         * By default, this property is `true`, change to `false` to allow hash-less URLs.\n         */\n        this.useHash = true;\n    }\n    async componentWillLoad() {\n        await waitUntilNavNode();\n        const canProceed = await this.runGuards(this.getSegments());\n        if (canProceed !== true) {\n            if (typeof canProceed === 'object') {\n                const { redirect } = canProceed;\n                const path = parsePath(redirect);\n                this.setSegments(path.segments, ROUTER_INTENT_NONE, path.queryString);\n                await this.writeNavStateRoot(path.segments, ROUTER_INTENT_NONE);\n            }\n        }\n        else {\n            await this.onRoutesChanged();\n        }\n    }\n    componentDidLoad() {\n        window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n        window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n    }\n    async onPopState() {\n        const direction = this.historyDirection();\n        let segments = this.getSegments();\n        const canProceed = await this.runGuards(segments);\n        if (canProceed !== true) {\n            if (typeof canProceed === 'object') {\n                segments = parsePath(canProceed.redirect).segments;\n            }\n            else {\n                return false;\n            }\n        }\n        return this.writeNavStateRoot(segments, direction);\n    }\n    onBackButton(ev) {\n        ev.detail.register(0, (processNextHandler) => {\n            this.back();\n            processNextHandler();\n        });\n    }\n    /** @internal */\n    async canTransition() {\n        const canProceed = await this.runGuards();\n        if (canProceed !== true) {\n            if (typeof canProceed === 'object') {\n                return canProceed.redirect;\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Navigate to the specified path.\n     *\n     * @param path The path to navigate to.\n     * @param direction The direction of the animation. Defaults to `\"forward\"`.\n     * @param animation A custom animation to use for the transition.\n     */\n    async push(path, direction = 'forward', animation) {\n        var _a;\n        if (path.startsWith('.')) {\n            const currentPath = (_a = this.previousPath) !== null && _a !== void 0 ? _a : '/';\n            // Convert currentPath to an URL by pre-pending a protocol and a host to resolve the relative path.\n            const url = new URL(path, `https://host/${currentPath}`);\n            path = url.pathname + url.search;\n        }\n        let parsedPath = parsePath(path);\n        const canProceed = await this.runGuards(parsedPath.segments);\n        if (canProceed !== true) {\n            if (typeof canProceed === 'object') {\n                parsedPath = parsePath(canProceed.redirect);\n            }\n            else {\n                return false;\n            }\n        }\n        this.setSegments(parsedPath.segments, direction, parsedPath.queryString);\n        return this.writeNavStateRoot(parsedPath.segments, direction, animation);\n    }\n    /** Go back to previous page in the window.history. */\n    back() {\n        window.history.back();\n        return Promise.resolve(this.waitPromise);\n    }\n    /** @internal */\n    async printDebug() {\n        printRoutes(readRoutes(this.el));\n        printRedirects(readRedirects(this.el));\n    }\n    /** @internal */\n    async navChanged(direction) {\n        if (this.busy) {\n            printIonWarning('[ion-router] - Router is busy, navChanged was cancelled.');\n            return false;\n        }\n        const { ids, outlet } = await readNavState(window.document.body);\n        const routes = readRoutes(this.el);\n        const chain = findChainForIDs(ids, routes);\n        if (!chain) {\n            printIonWarning('[ion-router] - No matching URL for', ids.map((i) => i.id));\n            return false;\n        }\n        const segments = chainToSegments(chain);\n        if (!segments) {\n            printIonWarning('[ion-router] - Router could not match path because some required param is missing.');\n            return false;\n        }\n        this.setSegments(segments, direction);\n        await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, segments, null, ids.length);\n        return true;\n    }\n    /** This handler gets called when a `ion-route-redirect` component is added to the DOM or if the from or to property of such node changes. */\n    onRedirectChanged() {\n        const segments = this.getSegments();\n        if (segments && findRouteRedirect(segments, readRedirects(this.el))) {\n            this.writeNavStateRoot(segments, ROUTER_INTENT_NONE);\n        }\n    }\n    /** This handler gets called when a `ion-route` component is added to the DOM or if the from or to property of such node changes. */\n    onRoutesChanged() {\n        return this.writeNavStateRoot(this.getSegments(), ROUTER_INTENT_NONE);\n    }\n    historyDirection() {\n        var _a;\n        const win = window;\n        if (win.history.state === null) {\n            this.state++;\n            win.history.replaceState(this.state, win.document.title, (_a = win.document.location) === null || _a === void 0 ? void 0 : _a.href);\n        }\n        const state = win.history.state;\n        const lastState = this.lastState;\n        this.lastState = state;\n        if (state > lastState || (state >= lastState && lastState > 0)) {\n            return ROUTER_INTENT_FORWARD;\n        }\n        if (state < lastState) {\n            return ROUTER_INTENT_BACK;\n        }\n        return ROUTER_INTENT_NONE;\n    }\n    async writeNavStateRoot(segments, direction, animation) {\n        if (!segments) {\n            printIonError('[ion-router] - URL is not part of the routing set.');\n            return false;\n        }\n        // lookup redirect rule\n        const redirects = readRedirects(this.el);\n        const redirect = findRouteRedirect(segments, redirects);\n        let redirectFrom = null;\n        if (redirect) {\n            const { segments: toSegments, queryString } = redirect.to;\n            this.setSegments(toSegments, direction, queryString);\n            redirectFrom = redirect.from;\n            segments = toSegments;\n        }\n        // lookup route chain\n        const routes = readRoutes(this.el);\n        const chain = findChainForSegments(segments, routes);\n        if (!chain) {\n            printIonError('[ion-router] - The path does not match any route.');\n            return false;\n        }\n        // write DOM give\n        return this.safeWriteNavState(document.body, chain, direction, segments, redirectFrom, 0, animation);\n    }\n    async safeWriteNavState(node, chain, direction, segments, redirectFrom, index = 0, animation) {\n        const unlock = await this.lock();\n        let changed = false;\n        try {\n            changed = await this.writeNavState(node, chain, direction, segments, redirectFrom, index, animation);\n        }\n        catch (e) {\n            printIonError('[ion-router] - Exception in safeWriteNavState:', e);\n        }\n        unlock();\n        return changed;\n    }\n    async lock() {\n        const p = this.waitPromise;\n        let resolve;\n        this.waitPromise = new Promise((r) => (resolve = r));\n        if (p !== undefined) {\n            await p;\n        }\n        return resolve;\n    }\n    /**\n     * Executes the beforeLeave hook of the source route and the beforeEnter hook of the target route if they exist.\n     *\n     * When the beforeLeave hook does not return true (to allow navigating) then that value is returned early and the beforeEnter is executed.\n     * Otherwise the beforeEnterHook hook of the target route is executed.\n     */\n    async runGuards(to = this.getSegments(), from) {\n        if (from === undefined) {\n            from = parsePath(this.previousPath).segments;\n        }\n        if (!to || !from) {\n            return true;\n        }\n        const routes = readRoutes(this.el);\n        const fromChain = findChainForSegments(from, routes);\n        // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n        const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\n        const canLeave = beforeLeaveHook ? await beforeLeaveHook() : true;\n        if (canLeave === false || typeof canLeave === 'object') {\n            return canLeave;\n        }\n        const toChain = findChainForSegments(to, routes);\n        // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n        const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\n        return beforeEnterHook ? beforeEnterHook() : true;\n    }\n    async writeNavState(node, chain, direction, segments, redirectFrom, index = 0, animation) {\n        if (this.busy) {\n            printIonWarning('[ion-router] - Router is busy, transition was cancelled.');\n            return false;\n        }\n        this.busy = true;\n        // generate route event and emit will change\n        const routeEvent = this.routeChangeEvent(segments, redirectFrom);\n        if (routeEvent) {\n            this.ionRouteWillChange.emit(routeEvent);\n        }\n        const changed = await writeNavState(node, chain, direction, index, false, animation);\n        this.busy = false;\n        // emit did change\n        if (routeEvent) {\n            this.ionRouteDidChange.emit(routeEvent);\n        }\n        return changed;\n    }\n    setSegments(segments, direction, queryString) {\n        this.state++;\n        writeSegments(window.history, this.root, this.useHash, segments, direction, this.state, queryString);\n    }\n    getSegments() {\n        return readSegments(window.location, this.root, this.useHash);\n    }\n    routeChangeEvent(toSegments, redirectFromSegments) {\n        const from = this.previousPath;\n        const to = generatePath(toSegments);\n        this.previousPath = to;\n        if (to === from) {\n            return null;\n        }\n        const redirectedFrom = redirectFromSegments ? generatePath(redirectFromSegments) : null;\n        return {\n            from,\n            redirectedFrom,\n            to,\n        };\n    }\n    get el() { return getElement(this); }\n};\n\nconst routerLinkCss = \":host{--background:transparent;--color:var(--ion-color-primary, #0054e9);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\n\nconst RouterLink = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * When using a router, it specifies the transition direction when navigating to\n         * another page using `href`.\n         */\n        this.routerDirection = 'forward';\n        this.onClick = (ev) => {\n            openURL(this.href, ev, this.routerDirection, this.routerAnimation);\n        };\n    }\n    render() {\n        const mode = getIonMode(this);\n        const attrs = {\n            href: this.href,\n            rel: this.rel,\n            target: this.target,\n        };\n        return (h(Host, { key: 'd7f2affcde45c5fbb6cb46cd1c30008ee92a68c5', onClick: this.onClick, class: createColorClasses(this.color, {\n                [mode]: true,\n                'ion-activatable': true,\n            }) }, h(\"a\", Object.assign({ key: 'babafae85ca5c6429958d383feff0493ff8cf33e' }, attrs), h(\"slot\", { key: '50314e9555bbf6dffa0c50c3f763009dee59b10b' }))));\n    }\n};\nRouterLink.style = routerLinkCss;\n\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };\n"],"x_google_ignoreList":[0,1]}