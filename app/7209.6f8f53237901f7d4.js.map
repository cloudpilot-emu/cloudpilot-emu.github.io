{"version":3,"file":"7209.6f8f53237901f7d4.js","mappings":"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","names":["PickerColumnInternal","constructor","hostRef","registerInstance","this","ionChange","createEvent","isScrolling","isColumnVisible","canExitInputMode","centerPickerItemInView","target","smooth","el","top","offsetTop","clientHeight","scrollTop","scroll","left","behavior","undefined","setPickerItemActiveState","item","isActive","classList","add","PICKER_ITEM_ACTIVE_CLASS","part","PICKER_ITEM_ACTIVE_PART","remove","inputModeChange","ev","numericInput","useInputMode","inputModeColumn","detail","setInputModeActive","state","scrollEndCallback","initializeScrollListener","enableHaptics","isPlatform","timeout","activeEl","activeItem","scrollCallback","raf","clearTimeout","hapticSelectionStart","bbox","getBoundingClientRect","activeElement","shadowRoot","elementFromPoint","x","width","y","height","disabled","hapticSelectionChanged","exitInputMode","setTimeout","hapticSelectionEnd","dataIndex","getAttribute","index","parseInt","selectedItem","items","value","setValue","addEventListener","destroyScrollListener","removeEventListener","parentEl","color","valueChange","scrollActiveItemIntoView","componentWillLoad","IntersectionObserver","entries","isIntersecting","oldActive","getElementRoot","querySelector","threshold","observe","closest","componentDidRender","_a","_this","_asyncToGenerator","_this2","findItem","find","emit","selector","render","pickerDisabled","mode","getIonMode","h","Host","exportparts","PICKER_ITEM_PART","tabindex","class","createColorClasses","map","onClick","text","getElement","watchers","style","ios","md","hostContext","cssClassMap","length","Object","assign","getClassMap","classes","getClassList","Array","isArray","split","filter","c","trim","forEach","SCHEME","openURL","_ref","url","direction","animation","test","router","document","preventDefault","push","_x","_x2","_x3","_x4","apply","arguments"],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/ion-picker-column-internal.entry.js","./node_modules/@ionic/core/dist/esm/theme-01f3f29c.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, d as createEvent, h, H as Host, f as getElement } from './index-b7d870cf.js';\nimport { r as raf, g as getElementRoot } from './helpers-ae653409.js';\nimport { a as hapticSelectionStart, b as hapticSelectionChanged, h as hapticSelectionEnd } from './haptic-554688a5.js';\nimport { a as isPlatform, b as getIonMode } from './ionic-global-1f99b929.js';\nimport { c as createColorClasses } from './theme-01f3f29c.js';\nimport './capacitor-59395cbd.js';\nimport './index-a5d50daf.js';\n\nconst pickerColumnInternalIosCss = \":host{-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px;padding-top:0px;padding-bottom:0px;height:200px;outline:none;font-size:22px;-webkit-scroll-snap-type:y mandatory;-ms-scroll-snap-type:y mandatory;scroll-snap-type:y mandatory;overflow-x:hidden;overflow-y:scroll;scrollbar-width:none;text-align:center}:host::-webkit-scrollbar{display:none}:host .picker-item{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;display:block;width:100%;height:34px;border:0px;outline:none;background:transparent;color:inherit;font-family:var(--ion-font-family, inherit);font-size:inherit;line-height:34px;text-align:inherit;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;overflow:hidden;scroll-snap-align:center}:host .picker-item-empty,:host .picker-item[disabled]{cursor:default}:host .picker-item-empty,:host(:not([disabled])) .picker-item[disabled]{scroll-snap-align:none}:host([disabled]){overflow-y:hidden}:host .picker-item[disabled]{opacity:0.4}:host(.picker-column-active) .picker-item.picker-item-active{color:var(--ion-color-base)}@media (any-hover: hover){:host(:focus){outline:none;background:rgba(var(--ion-color-base-rgb), 0.2)}}\";\n\nconst pickerColumnInternalMdCss = \":host{-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px;padding-top:0px;padding-bottom:0px;height:200px;outline:none;font-size:22px;-webkit-scroll-snap-type:y mandatory;-ms-scroll-snap-type:y mandatory;scroll-snap-type:y mandatory;overflow-x:hidden;overflow-y:scroll;scrollbar-width:none;text-align:center}:host::-webkit-scrollbar{display:none}:host .picker-item{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;display:block;width:100%;height:34px;border:0px;outline:none;background:transparent;color:inherit;font-family:var(--ion-font-family, inherit);font-size:inherit;line-height:34px;text-align:inherit;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;overflow:hidden;scroll-snap-align:center}:host .picker-item-empty,:host .picker-item[disabled]{cursor:default}:host .picker-item-empty,:host(:not([disabled])) .picker-item[disabled]{scroll-snap-align:none}:host([disabled]){overflow-y:hidden}:host .picker-item[disabled]{opacity:0.4}:host(.picker-column-active) .picker-item.picker-item-active{color:var(--ion-color-base)}@media (any-hover: hover){:host(:focus){outline:none;background:rgba(var(--ion-color-base-rgb), 0.2)}}:host .picker-item-active{color:var(--ion-color-base)}\";\n\nconst PickerColumnInternal = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionChange = createEvent(this, \"ionChange\", 7);\n        this.isScrolling = false;\n        this.isColumnVisible = false;\n        this.canExitInputMode = true;\n        this.centerPickerItemInView = (target, smooth = true, canExitInputMode = true) => {\n            const { el, isColumnVisible } = this;\n            if (isColumnVisible) {\n                // (Vertical offset from parent) - (three empty picker rows) + (half the height of the target to ensure the scroll triggers)\n                const top = target.offsetTop - 3 * target.clientHeight + target.clientHeight / 2;\n                if (el.scrollTop !== top) {\n                    /**\n                     * Setting this flag prevents input\n                     * mode from exiting in the picker column's\n                     * scroll callback. This is useful when the user manually\n                     * taps an item or types on the keyboard as both\n                     * of these can cause a scroll to occur.\n                     */\n                    this.canExitInputMode = canExitInputMode;\n                    el.scroll({\n                        top,\n                        left: 0,\n                        behavior: smooth ? 'smooth' : undefined,\n                    });\n                }\n            }\n        };\n        this.setPickerItemActiveState = (item, isActive) => {\n            if (isActive) {\n                item.classList.add(PICKER_ITEM_ACTIVE_CLASS);\n                item.part.add(PICKER_ITEM_ACTIVE_PART);\n            }\n            else {\n                item.classList.remove(PICKER_ITEM_ACTIVE_CLASS);\n                item.part.remove(PICKER_ITEM_ACTIVE_PART);\n            }\n        };\n        /**\n         * When ionInputModeChange is emitted, each column\n         * needs to check if it is the one being made available\n         * for text entry.\n         */\n        this.inputModeChange = (ev) => {\n            if (!this.numericInput) {\n                return;\n            }\n            const { useInputMode, inputModeColumn } = ev.detail;\n            /**\n             * If inputModeColumn is undefined then this means\n             * all numericInput columns are being selected.\n             */\n            const isColumnActive = inputModeColumn === undefined || inputModeColumn === this.el;\n            if (!useInputMode || !isColumnActive) {\n                this.setInputModeActive(false);\n                return;\n            }\n            this.setInputModeActive(true);\n        };\n        /**\n         * Setting isActive will cause a re-render.\n         * As a result, we do not want to cause the\n         * re-render mid scroll as this will cause\n         * the picker column to jump back to\n         * whatever value was selected at the\n         * start of the scroll interaction.\n         */\n        this.setInputModeActive = (state) => {\n            if (this.isScrolling) {\n                this.scrollEndCallback = () => {\n                    this.isActive = state;\n                };\n                return;\n            }\n            this.isActive = state;\n        };\n        /**\n         * When the column scrolls, the component\n         * needs to determine which item is centered\n         * in the view and will emit an ionChange with\n         * the item object.\n         */\n        this.initializeScrollListener = () => {\n            /**\n             * The haptics for the wheel picker are\n             * an iOS-only feature. As a result, they should\n             * be disabled on Android.\n             */\n            const enableHaptics = isPlatform('ios');\n            const { el } = this;\n            let timeout;\n            let activeEl = this.activeItem;\n            const scrollCallback = () => {\n                raf(() => {\n                    if (timeout) {\n                        clearTimeout(timeout);\n                        timeout = undefined;\n                    }\n                    if (!this.isScrolling) {\n                        enableHaptics && hapticSelectionStart();\n                        this.isScrolling = true;\n                    }\n                    /**\n                     * Select item in the center of the column\n                     * which is the month/year that we want to select\n                     */\n                    const bbox = el.getBoundingClientRect();\n                    const centerX = bbox.x + bbox.width / 2;\n                    const centerY = bbox.y + bbox.height / 2;\n                    const activeElement = el.shadowRoot.elementFromPoint(centerX, centerY);\n                    if (activeEl !== null) {\n                        this.setPickerItemActiveState(activeEl, false);\n                    }\n                    if (activeElement === null || activeElement.disabled) {\n                        return;\n                    }\n                    /**\n                     * If we are selecting a new value,\n                     * we need to run haptics again.\n                     */\n                    if (activeElement !== activeEl) {\n                        enableHaptics && hapticSelectionChanged();\n                        if (this.canExitInputMode) {\n                            /**\n                             * The native iOS wheel picker\n                             * only dismisses the keyboard\n                             * once the selected item has changed\n                             * as a result of a swipe\n                             * from the user. If `canExitInputMode` is\n                             * `false` then this means that the\n                             * scroll is happening as a result of\n                             * the `value` property programmatically changing\n                             * either by an application or by the user via the keyboard.\n                             */\n                            this.exitInputMode();\n                        }\n                    }\n                    activeEl = activeElement;\n                    this.setPickerItemActiveState(activeElement, true);\n                    timeout = setTimeout(() => {\n                        this.isScrolling = false;\n                        enableHaptics && hapticSelectionEnd();\n                        /**\n                         * Certain tasks (such as those that\n                         * cause re-renders) should only be done\n                         * once scrolling has finished, otherwise\n                         * flickering may occur.\n                         */\n                        const { scrollEndCallback } = this;\n                        if (scrollEndCallback) {\n                            scrollEndCallback();\n                            this.scrollEndCallback = undefined;\n                        }\n                        /**\n                         * Reset this flag as the\n                         * next scroll interaction could\n                         * be a scroll from the user. In this\n                         * case, we should exit input mode.\n                         */\n                        this.canExitInputMode = true;\n                        const dataIndex = activeElement.getAttribute('data-index');\n                        /**\n                         * If no value it is\n                         * possible we hit one of the\n                         * empty padding columns.\n                         */\n                        if (dataIndex === null) {\n                            return;\n                        }\n                        const index = parseInt(dataIndex, 10);\n                        const selectedItem = this.items[index];\n                        if (selectedItem.value !== this.value) {\n                            this.setValue(selectedItem.value);\n                        }\n                    }, 250);\n                });\n            };\n            /**\n             * Wrap this in an raf so that the scroll callback\n             * does not fire when component is initially shown.\n             */\n            raf(() => {\n                el.addEventListener('scroll', scrollCallback);\n                this.destroyScrollListener = () => {\n                    el.removeEventListener('scroll', scrollCallback);\n                };\n            });\n        };\n        /**\n         * Tells the parent picker to\n         * exit text entry mode. This is only called\n         * when the selected item changes during scroll, so\n         * we know that the user likely wants to scroll\n         * instead of type.\n         */\n        this.exitInputMode = () => {\n            const { parentEl } = this;\n            if (parentEl == null)\n                return;\n            parentEl.exitInputMode();\n            /**\n             * setInputModeActive only takes\n             * effect once scrolling stops to avoid\n             * a component re-render while scrolling.\n             * However, we want the visual active\n             * indicator to go away immediately, so\n             * we call classList.remove here.\n             */\n            this.el.classList.remove('picker-column-active');\n        };\n        this.isActive = false;\n        this.disabled = false;\n        this.items = [];\n        this.value = undefined;\n        this.color = 'primary';\n        this.numericInput = false;\n    }\n    valueChange() {\n        if (this.isColumnVisible) {\n            /**\n             * Only scroll the active item into view when the picker column\n             * is actively visible to the user.\n             */\n            this.scrollActiveItemIntoView();\n        }\n    }\n    /**\n     * Only setup scroll listeners\n     * when the picker is visible, otherwise\n     * the container will have a scroll\n     * height of 0px.\n     */\n    componentWillLoad() {\n        const visibleCallback = (entries) => {\n            const ev = entries[0];\n            if (ev.isIntersecting) {\n                const { activeItem, el } = this;\n                this.isColumnVisible = true;\n                /**\n                 * Because this initial call to scrollActiveItemIntoView has to fire before\n                 * the scroll listener is set up, we need to manage the active class manually.\n                 */\n                const oldActive = getElementRoot(el).querySelector(`.${PICKER_ITEM_ACTIVE_CLASS}`);\n                if (oldActive) {\n                    this.setPickerItemActiveState(oldActive, false);\n                }\n                this.scrollActiveItemIntoView();\n                if (activeItem) {\n                    this.setPickerItemActiveState(activeItem, true);\n                }\n                this.initializeScrollListener();\n            }\n            else {\n                this.isColumnVisible = false;\n                if (this.destroyScrollListener) {\n                    this.destroyScrollListener();\n                    this.destroyScrollListener = undefined;\n                }\n            }\n        };\n        new IntersectionObserver(visibleCallback, { threshold: 0.001 }).observe(this.el);\n        const parentEl = (this.parentEl = this.el.closest('ion-picker-internal'));\n        if (parentEl !== null) {\n            // TODO(FW-2832): type\n            parentEl.addEventListener('ionInputModeChange', (ev) => this.inputModeChange(ev));\n        }\n    }\n    componentDidRender() {\n        var _a;\n        const { activeItem, items, isColumnVisible, value } = this;\n        if (isColumnVisible) {\n            if (activeItem) {\n                this.scrollActiveItemIntoView();\n            }\n            else if (((_a = items[0]) === null || _a === void 0 ? void 0 : _a.value) !== value) {\n                /**\n                 * If the picker column does not have an active item and the current value\n                 * does not match the first item in the picker column, that means\n                 * the value is out of bounds. In this case, we assign the value to the\n                 * first item to match the scroll position of the column.\n                 *\n                 */\n                this.setValue(items[0].value);\n            }\n        }\n    }\n    /** @internal  */\n    async scrollActiveItemIntoView() {\n        const activeEl = this.activeItem;\n        if (activeEl) {\n            this.centerPickerItemInView(activeEl, false, false);\n        }\n    }\n    /**\n     * Sets the value prop and fires the ionChange event.\n     * This is used when we need to fire ionChange from\n     * user-generated events that cannot be caught with normal\n     * input/change event listeners.\n     * @internal\n     */\n    async setValue(value) {\n        const { items } = this;\n        this.value = value;\n        const findItem = items.find((item) => item.value === value && item.disabled !== true);\n        if (findItem) {\n            this.ionChange.emit(findItem);\n        }\n    }\n    get activeItem() {\n        // If the whole picker column is disabled, the current value should appear active\n        // If the current value item is specifically disabled, it should not appear active\n        const selector = `.picker-item[data-value=\"${this.value}\"]${this.disabled ? '' : ':not([disabled])'}`;\n        return getElementRoot(this.el).querySelector(selector);\n    }\n    render() {\n        const { items, color, disabled: pickerDisabled, isActive, numericInput } = this;\n        const mode = getIonMode(this);\n        /**\n         * exportparts is needed so ion-datetime can expose the parts\n         * from two layers of shadow nesting. If this causes problems,\n         * the attribute can be moved to datetime.tsx and set on every\n         * instance of ion-picker-column-internal there instead.\n         */\n        return (h(Host, { exportparts: `${PICKER_ITEM_PART}, ${PICKER_ITEM_ACTIVE_PART}`, disabled: pickerDisabled, tabindex: pickerDisabled ? null : 0, class: createColorClasses(color, {\n                [mode]: true,\n                ['picker-column-active']: isActive,\n                ['picker-column-numeric-input']: numericInput,\n            }) }, h(\"div\", { class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), items.map((item, index) => {\n            const isItemDisabled = pickerDisabled || item.disabled || false;\n            return (h(\"button\", { tabindex: \"-1\", class: {\n                    'picker-item': true,\n                }, \"data-value\": item.value, \"data-index\": index, onClick: (ev) => {\n                    this.centerPickerItemInView(ev.target, true);\n                }, disabled: isItemDisabled, part: PICKER_ITEM_PART }, item.text));\n        }), h(\"div\", { class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\")));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"value\": [\"valueChange\"]\n    }; }\n};\nconst PICKER_ITEM_ACTIVE_CLASS = 'picker-item-active';\nconst PICKER_ITEM_PART = 'wheel-item';\nconst PICKER_ITEM_ACTIVE_PART = 'active';\nPickerColumnInternal.style = {\n    ios: pickerColumnInternalIosCss,\n    md: pickerColumnInternalMdCss\n};\n\nexport { PickerColumnInternal as ion_picker_column_internal };\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nconst hostContext = (selector, el) => {\n    return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color, cssClassMap) => {\n    return typeof color === 'string' && color.length > 0\n        ? Object.assign({ 'ion-color': true, [`ion-color-${color}`]: true }, cssClassMap) : cssClassMap;\n};\nconst getClassList = (classes) => {\n    if (classes !== undefined) {\n        const array = Array.isArray(classes) ? classes : classes.split(' ');\n        return array\n            .filter((c) => c != null)\n            .map((c) => c.trim())\n            .filter((c) => c !== '');\n    }\n    return [];\n};\nconst getClassMap = (classes) => {\n    const map = {};\n    getClassList(classes).forEach((c) => (map[c] = true));\n    return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction, animation) => {\n    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n        const router = document.querySelector('ion-router');\n        if (router) {\n            if (ev != null) {\n                ev.preventDefault();\n            }\n            return router.push(url, direction, animation);\n        }\n    }\n    return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n"],"x_google_ignoreList":[0,1]}