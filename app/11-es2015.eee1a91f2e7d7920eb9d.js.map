{"version":3,"sources":["webpack:///src/app/tabs/tabs.page.ts","webpack:///src/app/tabs/tabs-routing.module.ts","webpack:///src/app/tabs/tabs.page.html","webpack:///src/app/tabs/tabs.module.ts","webpack:///src/app/service/canvas-display.service.ts"],"names":["canvasArea","availableHeight","availableWidth","scaledWidth","scaledHeight","Math","min","devicePixelRatio","routes","path","component","TabsPage","router","updateUseSmallUI","isMD","document","querySelector","headerHeight","this","useSmallUI","window","innerHeight","innerWidth","addEventListener","url","children","loadChildren","then","m","EmulationPageModule","SessionsPageModule","SettingsPageModule","AboutPageModule","redirectTo","pathMatch","TabsPageRoutingModule","forChild","TabsPageModule","BACKGROUND_COLOR_SILKSCREEN","BACKGROUND_COLOR_DEFAULT","SCALE","BORDER","round","WIDTH","HEIGHT","loadImage","Promise","resolve","reject","image","Image","onload","onerror","src","prerenderButtons","canvas","createElement","width","height","ctx","getContext","Error","drawImage","IMAGE_SILKSCREEN_DEFAULT","IMAGE_SILKSCREEN_M515","IMAGE_BUTTONS_DEFAULT","IMAGE_BUTTONS_M515","CanvasDisplayService","session","fillCanvasRect","backgroundColor","drawSilkscreen","drawButtons","silkscreenImage","fillRect","imageSmoothingEnabled","imageSmoothingQuality","activeButtons","buttonsImage","includes","x","y","style","beginPath","rect","fillStyle","fill","device","m515"],"mappings":"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","file":"x","sourcesContent":["import { HEIGHT, WIDTH } from '../service/canvas-display.service';\n\nimport { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\nfunction canvasArea(availableHeight: number, availableWidth: number): number {\n    availableHeight = Math.min(availableHeight, HEIGHT / devicePixelRatio);\n    availableWidth = Math.min(availableWidth, WIDTH / devicePixelRatio);\n\n    let scaledWidth: number;\n    let scaledHeight: number;\n\n    if (availableWidth / availableHeight > WIDTH / HEIGHT) {\n        scaledHeight = availableHeight;\n        scaledWidth = (availableHeight / HEIGHT) * WIDTH;\n    } else {\n        scaledWidth = availableWidth;\n        scaledHeight = (availableWidth / WIDTH) * HEIGHT;\n    }\n\n    return scaledWidth * scaledHeight;\n}\n\n@Component({\n    selector: 'app-tabs',\n    templateUrl: 'tabs.page.html',\n    styleUrls: ['tabs.page.scss'],\n})\nexport class TabsPage {\n    constructor(private router: Router) {\n        window.addEventListener('resize', this.updateUseSmallUI);\n\n        this.updateUseSmallUI();\n    }\n\n    get smallUI(): boolean {\n        return this.router.url === '/tab/emulation' && this.useSmallUI;\n    }\n\n    private updateUseSmallUI = (): void => {\n        const isMD = !!document.querySelector('html.md');\n        const headerHeight = isMD ? 56 : 44;\n        const tabbarHeight = isMD ? 57 : 51;\n        const canvasPadding = 6;\n\n        this.useSmallUI =\n            canvasArea(window.innerHeight - headerHeight - tabbarHeight - canvasPadding, window.innerWidth - 6) <\n            canvasArea(window.innerHeight - headerHeight - 25 - canvasPadding, window.innerWidth - 6);\n    };\n\n    private useSmallUI = false;\n}\n","import { RouterModule, Routes } from '@angular/router';\n\nimport { NgModule } from '@angular/core';\nimport { TabsPage } from './tabs.page';\n\nconst routes: Routes = [\n    {\n        path: 'tab',\n        component: TabsPage,\n        children: [\n            {\n                path: 'emulation',\n                loadChildren: () => import('../page/emulation/emulation.module').then((m) => m.EmulationPageModule),\n            },\n            {\n                path: 'sessions',\n                loadChildren: () => import('../page/sessions/sessions.module').then((m) => m.SessionsPageModule),\n            },\n            {\n                path: 'settings',\n                loadChildren: () => import('../page/settings/settings.module').then((m) => m.SettingsPageModule),\n            },\n            {\n                path: 'about',\n                loadChildren: () => import('../page/about/about.module').then((m) => m.AboutPageModule),\n            },\n            {\n                path: '',\n                redirectTo: '/tab/sessions',\n                pathMatch: 'full',\n            },\n        ],\n    },\n    {\n        path: '',\n        redirectTo: '/tab/sessions',\n        pathMatch: 'full',\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class TabsPageRoutingModule {}\n","<ion-tabs>\n\n  <div class=\"overflow-wrapper\">\n    <ion-tab-bar [class.small-ui]=\"smallUI\" slot=\"bottom\">\n      <ion-tab-button tab=\"emulation\">\n        <ion-icon name=\"phone-portrait-outline\"></ion-icon>\n        <ion-label>Emulator</ion-label>\n      </ion-tab-button>\n\n      <ion-tab-button tab=\"sessions\">\n        <ion-icon name=\"albums-outline\"></ion-icon>\n        <ion-label>Sessions</ion-label>\n      </ion-tab-button>\n\n      <ion-tab-button tab=\"settings\">\n        <ion-icon name=\"cog-outline\"></ion-icon>\n        <ion-label>Settings</ion-label>\n      </ion-tab-button>\n\n      <ion-tab-button tab=\"about\">\n        <ion-icon name=\"help-outline\"></ion-icon>\n        <ion-label>About</ion-label>\n      </ion-tab-button>\n    </ion-tab-bar>\n  </div>\n\n</ion-tabs>\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { NgModule } from '@angular/core';\nimport { TabsPage } from './tabs.page';\nimport { TabsPageRoutingModule } from './tabs-routing.module';\n\n@NgModule({\n    imports: [IonicModule, CommonModule, FormsModule, TabsPageRoutingModule],\n    declarations: [TabsPage],\n})\nexport class TabsPageModule {}\n","import { DeviceId } from '../model/DeviceId';\nimport { GRAYSCALE_PALETTE_HEX } from './emulation.service';\nimport { Injectable } from '@angular/core';\nimport { PalmButton } from '../helper/Cloudpilot';\nimport { Session } from '../model/Session';\n\nconst URL_SILKSCREEN_DEFAULT = 'assets/silkscreen-default.svg';\nconst URL_SILKSCREEN_M515 = 'assets/silkscreen-m515.svg';\nconst URL_BUTTONS_DEFAULT = 'assets/hard-buttons-default.svg';\nconst URL_BUTTONS_M515 = 'assets/hard-buttons-m515.svg';\n\nconst BACKGROUND_COLOR_SILKSCREEN = GRAYSCALE_PALETTE_HEX[2];\nconst BACKGROUND_COLOR_DEFAULT = GRAYSCALE_PALETTE_HEX[0];\nconst BACKGROUND_COLOR_M515 = 'white';\nconst BACKGROUND_ACTIVE_BUTTON = 'rgba(0,0,0,0.2)';\n\nexport const SCALE = 3 * devicePixelRatio;\nexport const BORDER = Math.round(1 * SCALE);\nexport const WIDTH = SCALE * 160 + 2 * BORDER;\nexport const HEIGHT = SCALE * 251 + 2 * BORDER;\n\nfunction loadImage(url: string): Promise<HTMLImageElement> {\n    return new Promise<HTMLImageElement>((resolve, reject) => {\n        const image = new Image();\n\n        image.onload = () => resolve(image);\n        image.onerror = () => reject();\n\n        image.src = url;\n    });\n}\n\nasync function prerenderButtons(url: string): Promise<HTMLCanvasElement> {\n    const canvas = document.createElement('canvas');\n    canvas.width = 160 * SCALE;\n    canvas.height = 30 * SCALE;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) throw new Error('get a new browser');\n\n    ctx.drawImage(await loadImage(url), 0, 0, SCALE * 160, SCALE * 30);\n\n    return canvas;\n}\n\nconst IMAGE_SILKSCREEN_DEFAULT = loadImage(URL_SILKSCREEN_DEFAULT);\nconst IMAGE_SILKSCREEN_M515 = loadImage(URL_SILKSCREEN_M515);\nconst IMAGE_BUTTONS_DEFAULT = prerenderButtons(URL_BUTTONS_DEFAULT);\nconst IMAGE_BUTTONS_M515 = prerenderButtons(URL_BUTTONS_M515);\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CanvasDisplayService {\n    constructor() {}\n\n    async initialize(canvas: HTMLCanvasElement, session: Session | undefined): Promise<void> {\n        const ctx = canvas.getContext('2d');\n        if (!ctx) {\n            throw new Error('canvas not supported - get a new browser');\n        }\n\n        this.ctx = ctx;\n\n        this.session = session;\n        this.fillCanvasRect(0, 0, WIDTH, HEIGHT, this.backgroundColor());\n\n        await this.drawSilkscreen();\n        await this.drawButtons();\n    }\n\n    async drawSilkscreen(): Promise<void> {\n        if (!this.ctx) return;\n\n        const image = await this.silkscreenImage();\n\n        this.fillRect(0, 161, 160, 60, BACKGROUND_COLOR_SILKSCREEN);\n\n        this.ctx.imageSmoothingEnabled = true;\n        this.ctx.imageSmoothingQuality = 'high';\n\n        this.ctx.drawImage(image, BORDER, BORDER + 161 * SCALE, 160 * SCALE, 60 * SCALE);\n    }\n\n    async drawButtons(activeButtons: Array<PalmButton> = []): Promise<void> {\n        if (!this.ctx) return;\n\n        this.ctx.drawImage(await this.buttonsImage(), BORDER, BORDER + 221 * SCALE, 160 * SCALE, 30 * SCALE);\n\n        if (activeButtons.includes(PalmButton.cal)) this.fillRect(0, 221, 30, 30, BACKGROUND_ACTIVE_BUTTON);\n        if (activeButtons.includes(PalmButton.phone)) this.fillRect(30, 221, 30, 30, BACKGROUND_ACTIVE_BUTTON);\n        if (activeButtons.includes(PalmButton.todo)) this.fillRect(100, 221, 30, 30, BACKGROUND_ACTIVE_BUTTON);\n        if (activeButtons.includes(PalmButton.notes)) this.fillRect(130, 221, 30, 30, BACKGROUND_ACTIVE_BUTTON);\n        if (activeButtons.includes(PalmButton.up)) this.fillRect(60, 221, 40, 15, BACKGROUND_ACTIVE_BUTTON);\n        if (activeButtons.includes(PalmButton.down)) this.fillRect(60, 236, 40, 15, BACKGROUND_ACTIVE_BUTTON);\n    }\n\n    drawEmulationCanvas(canvas: HTMLCanvasElement): void {\n        if (!this.ctx) return;\n\n        this.ctx.imageSmoothingEnabled = false;\n        this.ctx.drawImage(canvas, BORDER, BORDER, SCALE * 160, SCALE * 160);\n    }\n\n    private fillRect(x: number, y: number, width: number, height: number, style: string): void {\n        if (!this.ctx) return;\n\n        this.ctx.beginPath();\n        this.ctx.rect(BORDER + SCALE * x, BORDER + SCALE * y, SCALE * width, SCALE * height);\n        this.ctx.fillStyle = style;\n        this.ctx.fill();\n    }\n\n    private fillCanvasRect(x: number, y: number, width: number, height: number, style: string): void {\n        if (!this.ctx) return;\n\n        this.ctx.beginPath();\n        this.ctx.rect(x, y, width, height);\n        this.ctx.fillStyle = style;\n        this.ctx.fill();\n    }\n\n    private silkscreenImage(): Promise<HTMLImageElement> {\n        switch (this.session?.device) {\n            case DeviceId.m515:\n                return IMAGE_SILKSCREEN_M515;\n\n            default:\n                return IMAGE_SILKSCREEN_DEFAULT;\n        }\n    }\n\n    private buttonsImage(): Promise<HTMLCanvasElement> {\n        switch (this.session?.device) {\n            case DeviceId.m515:\n                return IMAGE_BUTTONS_M515;\n\n            default:\n                return IMAGE_BUTTONS_DEFAULT;\n        }\n    }\n\n    private backgroundColor(): string {\n        switch (this.session?.device) {\n            case DeviceId.m515:\n                return BACKGROUND_COLOR_M515;\n\n            default:\n                return BACKGROUND_COLOR_DEFAULT;\n        }\n    }\n\n    private ctx: CanvasRenderingContext2D | undefined;\n    private session: Session | undefined;\n}\n"]}