{"version":3,"mappings":"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","names":["PickerColumnInternal","constructor","hostRef","registerInstance","this","ionChange","createEvent","hapticsStarted","isColumnVisible","isActive","items","color","numericInput","centerPickerItemInView","target","smooth","el","scroll","top","offsetTop","clientHeight","left","behavior","undefined","inputModeChange","ev","useInputMode","inputModeColumn","detail","initializeScrollListener","timeout","activeEl","activeItem","scrollCallback","raf","clearTimeout","hapticSelectionStart","bbox","getBoundingClientRect","activeElement","shadowRoot","elementFromPoint","x","width","y","height","classList","remove","PICKER_COL_ACTIVE","hapticSelectionChanged","add","setTimeout","dataIndex","getAttribute","index","parseInt","selectedItem","value","hapticSelectionEnd","addEventListener","destroyScrollListener","removeEventListener","valueChange","scrollActiveItemIntoView","findItem","find","item","emit","componentWillLoad","IntersectionObserver","entries","_a","isIntersecting","oldActive","getElementRoot","querySelector","threshold","observe","parentEl","closest","render","mode","getIonMode","h","Host","tabindex","class","createColorClasses","map","onClick","text","getElement","watchers","style","ios","md"],"sources":["./node_modules/@ionic/core/dist/esm/ion-picker-column-internal.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, e as createEvent, h, H as Host, i as getElement } from './index-06cd27b1.js';\nimport { b as getIonMode } from './ionic-global-a049bcbf.js';\nimport { r as raf, g as getElementRoot } from './helpers-eed79a2b.js';\nimport { a as hapticSelectionStart, b as hapticSelectionChanged, h as hapticSelectionEnd } from './haptic-9a9aa7ec.js';\nimport { c as createColorClasses } from './theme-a24ff1ad.js';\n\nconst pickerColumnInternalIosCss = \":host{padding-left:16px;padding-right:16px;padding-top:0px;padding-bottom:0px;height:200px;outline:none;font-size:22px;-webkit-scroll-snap-type:y mandatory;-ms-scroll-snap-type:y mandatory;scroll-snap-type:y mandatory;overflow-x:hidden;overflow-y:scroll;scrollbar-width:none;text-align:center}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px}}:host::-webkit-scrollbar{display:none}:host .picker-item{height:34px;line-height:34px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;scroll-snap-align:center}:host .picker-item-empty{scroll-snap-align:none}:host(.picker-column-active) .picker-item.picker-item-active{color:var(--ion-color-base)}@media (any-hover: hover){:host(:focus){outline:none;background:rgba(var(--ion-color-base-rgb), 0.2)}}\";\n\nconst pickerColumnInternalMdCss = \":host{padding-left:16px;padding-right:16px;padding-top:0px;padding-bottom:0px;height:200px;outline:none;font-size:22px;-webkit-scroll-snap-type:y mandatory;-ms-scroll-snap-type:y mandatory;scroll-snap-type:y mandatory;overflow-x:hidden;overflow-y:scroll;scrollbar-width:none;text-align:center}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px}}:host::-webkit-scrollbar{display:none}:host .picker-item{height:34px;line-height:34px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;scroll-snap-align:center}:host .picker-item-empty{scroll-snap-align:none}:host(.picker-column-active) .picker-item.picker-item-active{color:var(--ion-color-base)}@media (any-hover: hover){:host(:focus){outline:none;background:rgba(var(--ion-color-base-rgb), 0.2)}}:host .picker-item-active{color:var(--ion-color-base)}\";\n\nlet PickerColumnInternal = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.hapticsStarted = false;\n    this.isColumnVisible = false;\n    this.isActive = false;\n    /**\n     * A list of options to be displayed in the picker\n     */\n    this.items = [];\n    /**\n     * The color to use from your application's color palette.\n     * Default options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\n     * For more information on colors, see [theming](/docs/theming/basics).\n     */\n    this.color = 'primary';\n    /**\n     * If `true`, tapping the picker will\n     * reveal a number input keyboard that lets\n     * the user type in values for each picker\n     * column. This is useful when working\n     * with time pickers.\n     *\n     * @internal\n     */\n    this.numericInput = false;\n    this.centerPickerItemInView = (target, smooth = true) => {\n      this.el.scroll({\n        // (Vertical offset from parent) - (three empty picker rows) + (half the height of the target to ensure the scroll triggers)\n        top: target.offsetTop - (3 * target.clientHeight) + (target.clientHeight / 2),\n        left: 0,\n        behavior: smooth ? 'smooth' : undefined\n      });\n    };\n    /**\n     * When ionInputModeChange is emitted, each column\n     * needs to check if it is the one being made available\n     * for text entry.\n     */\n    this.inputModeChange = (ev) => {\n      if (!this.numericInput) {\n        return;\n      }\n      const { useInputMode, inputModeColumn } = ev.detail;\n      /**\n       * If inputModeColumn is undefined then this means\n       * all numericInput columns are being selected.\n       */\n      const isColumnActive = inputModeColumn === undefined || inputModeColumn === this.el;\n      if (!useInputMode || !isColumnActive) {\n        this.isActive = false;\n        return;\n      }\n      this.isActive = true;\n    };\n    /**\n     * When the column scrolls, the component\n     * needs to determine which item is centered\n     * in the view and will emit an ionChange with\n     * the item object.\n     */\n    this.initializeScrollListener = () => {\n      const { el } = this;\n      let timeout;\n      let activeEl = this.activeItem;\n      const scrollCallback = () => {\n        raf(() => {\n          if (timeout) {\n            clearTimeout(timeout);\n            timeout = undefined;\n          }\n          if (!this.hapticsStarted) {\n            hapticSelectionStart();\n            this.hapticsStarted = true;\n          }\n          /**\n           * Select item in the center of the column\n           * which is the month/year that we want to select\n           */\n          const bbox = el.getBoundingClientRect();\n          const centerX = bbox.x + (bbox.width / 2);\n          const centerY = bbox.y + (bbox.height / 2);\n          const activeElement = el.shadowRoot.elementFromPoint(centerX, centerY);\n          if (activeEl !== null) {\n            activeEl.classList.remove(PICKER_COL_ACTIVE);\n          }\n          /**\n           * If we are selecting a new value,\n           * we need to run haptics again.\n           */\n          if (activeElement !== activeEl) {\n            hapticSelectionChanged();\n          }\n          activeEl = activeElement;\n          activeElement.classList.add(PICKER_COL_ACTIVE);\n          timeout = setTimeout(() => {\n            const dataIndex = activeElement.getAttribute('data-index');\n            /**\n             * If no value it is\n             * possible we hit one of the\n             * empty padding columns.\n             */\n            if (dataIndex === null) {\n              return;\n            }\n            const index = parseInt(dataIndex, 10);\n            const selectedItem = this.items[index];\n            if (selectedItem.value !== this.value) {\n              this.value = selectedItem.value;\n              hapticSelectionEnd();\n              this.hapticsStarted = false;\n            }\n          }, 250);\n        });\n      };\n      /**\n       * Wrap this in an raf so that the scroll callback\n       * does not fire when component is initially shown.\n       */\n      raf(() => {\n        el.addEventListener('scroll', scrollCallback);\n        this.destroyScrollListener = () => {\n          el.removeEventListener('scroll', scrollCallback);\n        };\n      });\n    };\n  }\n  valueChange() {\n    if (this.isColumnVisible) {\n      /**\n       * Only scroll the active item into view and emit the value\n       * change, when the picker column is actively visible to the user.\n       */\n      const { items, value } = this;\n      this.scrollActiveItemIntoView();\n      const findItem = items.find(item => item.value === value);\n      if (findItem) {\n        this.ionChange.emit(findItem);\n      }\n    }\n  }\n  /**\n   * Only setup scroll listeners\n   * when the picker is visible, otherwise\n   * the container will have a scroll\n   * height of 0px.\n   */\n  componentWillLoad() {\n    const visibleCallback = (entries) => {\n      var _a;\n      const ev = entries[0];\n      if (ev.isIntersecting) {\n        /**\n         * Because this initial call to scrollActiveItemIntoView has to fire before\n         * the scroll listener is set up, we need to manage the active class manually.\n         */\n        const oldActive = getElementRoot(this.el).querySelector(`.${PICKER_COL_ACTIVE}`);\n        oldActive === null || oldActive === void 0 ? void 0 : oldActive.classList.remove(PICKER_COL_ACTIVE);\n        this.scrollActiveItemIntoView();\n        (_a = this.activeItem) === null || _a === void 0 ? void 0 : _a.classList.add(PICKER_COL_ACTIVE);\n        this.initializeScrollListener();\n        this.isColumnVisible = true;\n      }\n      else {\n        if (this.destroyScrollListener) {\n          this.destroyScrollListener();\n          this.destroyScrollListener = undefined;\n        }\n        this.isColumnVisible = false;\n      }\n    };\n    new IntersectionObserver(visibleCallback, { threshold: 0.01 }).observe(this.el);\n    const parentEl = this.el.closest('ion-picker-internal');\n    if (parentEl !== null) {\n      parentEl.addEventListener('ionInputModeChange', (ev) => this.inputModeChange(ev));\n    }\n  }\n  scrollActiveItemIntoView() {\n    const activeEl = this.activeItem;\n    if (activeEl) {\n      this.centerPickerItemInView(activeEl, false);\n    }\n  }\n  get activeItem() {\n    return getElementRoot(this.el).querySelector(`.picker-item[data-value=\"${this.value}\"]`);\n  }\n  render() {\n    const { items, color, isActive, numericInput } = this;\n    const mode = getIonMode(this);\n    return (h(Host, { tabindex: 0, class: createColorClasses(color, {\n        [mode]: true,\n        ['picker-column-active']: isActive,\n        ['picker-column-numeric-input']: numericInput\n      }) }, h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), items.map((item, index) => {\n      return (h(\"div\", { class: \"picker-item\", \"data-value\": item.value, \"data-index\": index, onClick: (ev) => {\n          this.centerPickerItemInView(ev.target);\n        } }, item.text));\n    }), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\")));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"value\": [\"valueChange\"]\n  }; }\n};\nconst PICKER_COL_ACTIVE = 'picker-item-active';\nPickerColumnInternal.style = {\n  ios: pickerColumnInternalIosCss,\n  md: pickerColumnInternalMdCss\n};\n\nexport { PickerColumnInternal as ion_picker_column_internal };\n"],"sourceRoot":"webpack:///","file":"4820.729876f96fca418f.js"}