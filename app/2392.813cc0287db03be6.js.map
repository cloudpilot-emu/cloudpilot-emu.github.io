{"version":3,"file":"2392.813cc0287db03be6.js","mappings":"iKAMA,MAKMA,EAAkB,kBAClBC,EAAkB,kBAClBC,EAAQ,CACVC,GAAI,mBACJC,GAAI,qBACJC,GAAI,qBACJC,GAAI,qBACJC,GAAI,sBACJC,MAAO,IAELC,EAAY,MACdC,YAAYC,IACRC,OAAiBC,KAAMF,GACvBE,KAAKC,uBAAsBC,KAAYF,KAAM,sBAAuB,GACpEA,KAAKG,SAAU,EAIfH,KAAKI,UAAW,EAMhBJ,KAAKK,KAAOhB,EAAMI,EACtB,CACAa,eAAeH,GACXH,KAAKC,oBAAoBM,KAAK,CAAEJ,WACpC,CAIMK,YAAY,IAAAC,EAAAT,KAAA,SAAAU,KAAA,YACd,OAAOC,QAAQC,QAAQH,EAAKN,QAAS,EADvB,EAElB,CACMU,oBAAoB,IAAAC,EAAAd,KAAA,SAAAU,KAAA,mBAGXK,eAAmB,KAAiC,MAAlBA,uBACnCA,eAAeC,YAAY,mBAErCF,EAAKG,mBACLH,EAAKI,aAAc,EAPG,EAQ1B,CACAC,uBACQnB,KAAKoB,MACLpB,KAAKoB,MACLpB,KAAKoB,SAAMC,EAEnB,CACAH,cAMI,GALIlB,KAAKoB,MACLpB,KAAKoB,MACLpB,KAAKoB,SAAMC,GAGXrB,KAAKI,SAEL,YADAJ,KAAKG,SAAU,GAInB,MAAMmB,EAAQtB,KAAKK,KACnB,GAAqB,kBAAViB,EAEP,YADAtB,KAAKG,QAAUmB,GAInB,MAAMC,EAAalC,EAAMiC,IAAUA,EAEnC,GAA0B,IAAtBC,EAAWC,OAEX,YADAxB,KAAKG,SAAU,GAInB,MAAMsB,EAAYC,IACd1B,KAAKG,QAAUuB,EAAEC,SAEfC,EAAYC,OAAOC,WAAWP,GAEpCK,EAAUG,YAAYN,GACtBzB,KAAKoB,IAAM,IAAMQ,EAAUI,eAAeP,GAC1CzB,KAAKG,QAAUyB,EAAUD,OAC7B,CAUAV,mBACI,MAAMgB,EAAYjC,KAAKiC,UACjBC,EAAWlC,KAAKmC,GAAGD,SACnBE,EAAKpC,KAAKmC,GAAGE,kBACnB,IAAIC,GAAY,EAChB,QAASC,EAAI,EAAGA,EAAIH,EAAIG,IAAK,CACzB,MAAMC,EAAQN,EAASK,GACjBE,OAAuBpB,IAAdY,GAA2BO,EAAME,KAAOT,EACvD,GAAIQ,EACA,IAAIH,EAEA,YADAK,OAAgB,2DAIhBC,EAAaJ,EAAOC,GACpBH,GAAY,EAGxB,CACKA,MACDK,KAAgB,0DAExB,CACAE,SACI,MAAMC,KAAOC,KAAW/C,MACxB,SAAQgD,KAAEC,IAAM,CAAEC,IAAK,2CAA4CC,MAAO,CAClEC,CAACN,IAAO,EAER,CAAC,cAAcA,MAAS,EACxB,qBAAsB9C,KAAKG,WAC7B,EAAG6C,KAAE,OAAQ,CAAEE,IAAK,6CAC9B,CACA,MAAIf,GAAO,SAAOkB,KAAWrD,KAAO,CACpC,mBAAWsD,GAAa,MAAO,CAC3BnD,QAAW,CAAC,kBACZC,SAAY,CAAC,eACbC,KAAQ,CAAC,eACV,GAEDuC,EAAeA,CAACT,EAAIM,KACtB,IAAIc,EACAC,EACAf,GACAc,EAAQpE,EACRqE,EAAWpE,IAGXmE,EAAQnE,EACRoE,EAAWrE,GAEf,MAAMsE,EAAYtB,EAAGsB,UACrBA,EAAUC,IAAIH,GACdE,EAAUE,OAAOH,IAErB5D,EAAUgE,MAAQ,CACdC,IAxJoB,qoBAyJpBrE,GAvJmB","names":["SPLIT_PANE_MAIN","SPLIT_PANE_SIDE","QUERY","xs","sm","md","lg","xl","never","SplitPane","constructor","hostRef","registerInstance","this","ionSplitPaneVisible","createEvent","visible","disabled","when","visibleChanged","emit","isVisible","_this","_asyncToGenerator","Promise","resolve","connectedCallback","_this2","customElements","whenDefined","styleMainElement","updateState","disconnectedCallback","rmL","undefined","query","mediaQuery","length","callback","q","matches","mediaList","window","matchMedia","addListener","removeListener","contentId","children","el","nu","childElementCount","foundMain","i","child","isMain","id","printIonWarning","setPaneClass","render","mode","getIonMode","h","Host","key","class","e","getElement","watchers","toAdd","toRemove","classList","add","remove","style","ios"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/ion-split-pane.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, c as createEvent, f as printIonWarning, h, d as Host, g as getElement } from './index-4DxY6_gG.js';\nimport { b as getIonMode } from './ionic-global-CTSyufhF.js';\n\nconst splitPaneIosCss = \":host{--side-width:100%;left:0;right:0;top:0;bottom:0;display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:nowrap;flex-wrap:nowrap;contain:strict}:host(.split-pane-visible) ::slotted(.split-pane-main){left:0;right:0;top:0;bottom:0;position:relative;-ms-flex:1;flex:1;-webkit-box-shadow:none;box-shadow:none;overflow:hidden;z-index:0}::slotted(.split-pane-side:not(ion-menu)){display:none}:host{--border:0.55px solid var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-250, var(--ion-background-color-step-250, #c8c7cc))));--side-min-width:270px;--side-max-width:28%}\";\n\nconst splitPaneMdCss = \":host{--side-width:100%;left:0;right:0;top:0;bottom:0;display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:nowrap;flex-wrap:nowrap;contain:strict}:host(.split-pane-visible) ::slotted(.split-pane-main){left:0;right:0;top:0;bottom:0;position:relative;-ms-flex:1;flex:1;-webkit-box-shadow:none;box-shadow:none;overflow:hidden;z-index:0}::slotted(.split-pane-side:not(ion-menu)){display:none}:host{--border:1px solid var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, var(--ion-background-color-step-150, rgba(0, 0, 0, 0.13)))));--side-min-width:270px;--side-max-width:28%}\";\n\n// TODO(FW-2832): types\nconst SPLIT_PANE_MAIN = 'split-pane-main';\nconst SPLIT_PANE_SIDE = 'split-pane-side';\nconst QUERY = {\n    xs: '(min-width: 0px)',\n    sm: '(min-width: 576px)',\n    md: '(min-width: 768px)',\n    lg: '(min-width: 992px)',\n    xl: '(min-width: 1200px)',\n    never: '',\n};\nconst SplitPane = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionSplitPaneVisible = createEvent(this, \"ionSplitPaneVisible\", 7);\n        this.visible = false;\n        /**\n         * If `true`, the split pane will be hidden.\n         */\n        this.disabled = false;\n        /**\n         * When the split-pane should be shown.\n         * Can be a CSS media query expression, or a shortcut expression.\n         * Can also be a boolean expression.\n         */\n        this.when = QUERY['lg'];\n    }\n    visibleChanged(visible) {\n        this.ionSplitPaneVisible.emit({ visible });\n    }\n    /**\n     * @internal\n     */\n    async isVisible() {\n        return Promise.resolve(this.visible);\n    }\n    async connectedCallback() {\n        // TODO: connectedCallback is fired in CE build\n        // before WC is defined. This needs to be fixed in Stencil.\n        if (typeof customElements !== 'undefined' && customElements != null) {\n            await customElements.whenDefined('ion-split-pane');\n        }\n        this.styleMainElement();\n        this.updateState();\n    }\n    disconnectedCallback() {\n        if (this.rmL) {\n            this.rmL();\n            this.rmL = undefined;\n        }\n    }\n    updateState() {\n        if (this.rmL) {\n            this.rmL();\n            this.rmL = undefined;\n        }\n        // Check if the split-pane is disabled\n        if (this.disabled) {\n            this.visible = false;\n            return;\n        }\n        // When query is a boolean\n        const query = this.when;\n        if (typeof query === 'boolean') {\n            this.visible = query;\n            return;\n        }\n        // When query is a string, let's find first if it is a shortcut\n        const mediaQuery = QUERY[query] || query;\n        // Media query is empty or null, we hide it\n        if (mediaQuery.length === 0) {\n            this.visible = false;\n            return;\n        }\n        // Listen on media query\n        const callback = (q) => {\n            this.visible = q.matches;\n        };\n        const mediaList = window.matchMedia(mediaQuery);\n        // TODO FW-5869\n        mediaList.addListener(callback);\n        this.rmL = () => mediaList.removeListener(callback);\n        this.visible = mediaList.matches;\n    }\n    /**\n     * Attempt to find the main content\n     * element inside of the split pane.\n     * If found, set it as the main node.\n     *\n     * We assume that the main node\n     * is available in the DOM on split\n     * pane load.\n     */\n    styleMainElement() {\n        const contentId = this.contentId;\n        const children = this.el.children;\n        const nu = this.el.childElementCount;\n        let foundMain = false;\n        for (let i = 0; i < nu; i++) {\n            const child = children[i];\n            const isMain = contentId !== undefined && child.id === contentId;\n            if (isMain) {\n                if (foundMain) {\n                    printIonWarning('[ion-split-pane] - Cannot have more than one main node.');\n                    return;\n                }\n                else {\n                    setPaneClass(child, isMain);\n                    foundMain = true;\n                }\n            }\n        }\n        if (!foundMain) {\n            printIonWarning('[ion-split-pane] - Does not have a specified main node.');\n        }\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { key: 'd5e30df12f1f1f855da4c66f98076b9dce762c59', class: {\n                [mode]: true,\n                // Used internally for styling\n                [`split-pane-${mode}`]: true,\n                'split-pane-visible': this.visible,\n            } }, h(\"slot\", { key: '3e30d7cf3bc1cf434e16876a0cb2a36377b8e00f' })));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"visible\": [\"visibleChanged\"],\n        \"disabled\": [\"updateState\"],\n        \"when\": [\"updateState\"]\n    }; }\n};\nconst setPaneClass = (el, isMain) => {\n    let toAdd;\n    let toRemove;\n    if (isMain) {\n        toAdd = SPLIT_PANE_MAIN;\n        toRemove = SPLIT_PANE_SIDE;\n    }\n    else {\n        toAdd = SPLIT_PANE_SIDE;\n        toRemove = SPLIT_PANE_MAIN;\n    }\n    const classList = el.classList;\n    classList.add(toAdd);\n    classList.remove(toRemove);\n};\nSplitPane.style = {\n    ios: splitPaneIosCss,\n    md: splitPaneMdCss\n};\n\nexport { SplitPane as ion_split_pane };\n"],"x_google_ignoreList":[0]}