{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-reorder_2.entry.js"],"names":["Reorder","hostRef","this","ev","reorderGroup","el","closest","preventDefault","disabled","stopImmediatePropagation","mode","reorderIcon","class","name","lazy","part","style","ios","md","ReorderGroup","ionItemReorder","lastToIndex","cachedHeights","scrollElTop","scrollElBottom","scrollElInitial","containerTop","containerBottom","state","gesture","enable","contentEl","scrollEl","getScrollElement","createGesture","gestureName","gesturePriority","threshold","direction","passive","canStart","detail","onStart","onMove","onEnd","disabledChanged","destroy","undefined","listOrReorder","Promise","resolve","completeSync","selectedItemEl","reorderEl","event","target","item","findReorderItem","data","heights","length","children","sum","i","child","offsetHeight","push","$ionIndex","box","getBoundingClientRect","top","bottom","scrollBox","scrollTop","AUTO_SCROLL_MARGIN","indexForItem","selectedItemHeight","classList","add","ITEM_REORDER_SELECTED","selectedItem","scroll","autoscroll","currentY","Math","max","min","deltaY","startY","toIndex","itemIndexForTop","fromIndex","reorderMove","transform","emit","from","to","complete","bind","len","insertBefore","Array","isArray","reorderArray","transition","remove","itemHeight","value","posY","amount","SCROLL_JUMP","scrollBy","element","node","container","parent","parentElement","array","splice","slice"],"mappings":"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","file":"x","sourcesContent":["import { r as registerInstance, h, H as Host, i as getElement, e as createEvent } from './index-3ccd7557.js';\nimport { b as getIonMode } from './ionic-global-ddef3a45.js';\nimport { a as hapticSelectionStart, b as hapticSelectionChanged, h as hapticSelectionEnd } from './haptic-27b3f981.js';\n\nconst reorderIosCss = \":host([slot]){display:none;line-height:0;z-index:100}.reorder-icon{display:block;font-size:22px}.reorder-icon{font-size:34px;opacity:0.4}\";\n\nconst reorderMdCss = \":host([slot]){display:none;line-height:0;z-index:100}.reorder-icon{display:block;font-size:22px}.reorder-icon{font-size:31px;opacity:0.3}\";\n\nconst Reorder = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  onClick(ev) {\n    const reorderGroup = this.el.closest('ion-reorder-group');\n    ev.preventDefault();\n    // Only stop event propagation if the reorder is inside of an enabled\n    // reorder group. This allows interaction with clickable children components.\n    if (!reorderGroup || !reorderGroup.disabled) {\n      ev.stopImmediatePropagation();\n    }\n  }\n  render() {\n    const mode = getIonMode(this);\n    const reorderIcon = mode === 'ios' ? 'reorder-three-outline' : 'reorder-two-sharp';\n    return (h(Host, { class: mode }, h(\"slot\", null, h(\"ion-icon\", { name: reorderIcon, lazy: false, class: \"reorder-icon\", part: \"icon\" }))));\n  }\n  get el() { return getElement(this); }\n};\nReorder.style = {\n  ios: reorderIosCss,\n  md: reorderMdCss\n};\n\nconst reorderGroupCss = \".reorder-list-active>*{-webkit-transition:-webkit-transform 300ms;transition:-webkit-transform 300ms;transition:transform 300ms;transition:transform 300ms, -webkit-transform 300ms;will-change:transform}.reorder-enabled{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.reorder-enabled ion-reorder{display:block;cursor:-webkit-grab;cursor:grab;pointer-events:all;-ms-touch-action:none;touch-action:none}.reorder-selected,.reorder-selected ion-reorder{cursor:-webkit-grabbing;cursor:grabbing}.reorder-selected{position:relative;-webkit-transition:none !important;transition:none !important;-webkit-box-shadow:0 0 10px rgba(0, 0, 0, 0.4);box-shadow:0 0 10px rgba(0, 0, 0, 0.4);opacity:0.8;z-index:100}.reorder-visible ion-reorder .reorder-icon{-webkit-transform:translate3d(0,  0,  0);transform:translate3d(0,  0,  0)}\";\n\nconst ReorderGroup = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionItemReorder = createEvent(this, \"ionItemReorder\", 7);\n    this.lastToIndex = -1;\n    this.cachedHeights = [];\n    this.scrollElTop = 0;\n    this.scrollElBottom = 0;\n    this.scrollElInitial = 0;\n    this.containerTop = 0;\n    this.containerBottom = 0;\n    this.state = 0 /* Idle */;\n    /**\n     * If `true`, the reorder will be hidden.\n     */\n    this.disabled = true;\n  }\n  disabledChanged() {\n    if (this.gesture) {\n      this.gesture.enable(!this.disabled);\n    }\n  }\n  async connectedCallback() {\n    const contentEl = this.el.closest('ion-content');\n    if (contentEl) {\n      this.scrollEl = await contentEl.getScrollElement();\n    }\n    this.gesture = (await import('./index-f49d994d.js')).createGesture({\n      el: this.el,\n      gestureName: 'reorder',\n      gesturePriority: 110,\n      threshold: 0,\n      direction: 'y',\n      passive: false,\n      canStart: detail => this.canStart(detail),\n      onStart: ev => this.onStart(ev),\n      onMove: ev => this.onMove(ev),\n      onEnd: () => this.onEnd(),\n    });\n    this.disabledChanged();\n  }\n  disconnectedCallback() {\n    this.onEnd();\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n  }\n  /**\n   * Completes the reorder operation. Must be called by the `ionItemReorder` event.\n   *\n   * If a list of items is passed, the list will be reordered and returned in the\n   * proper order.\n   *\n   * If no parameters are passed or if `true` is passed in, the reorder will complete\n   * and the item will remain in the position it was dragged to. If `false` is passed,\n   * the reorder will complete and the item will bounce back to its original position.\n   *\n   * @param listOrReorder A list of items to be sorted and returned in the new order or a\n   * boolean of whether or not the reorder should reposition the item.\n   */\n  complete(listOrReorder) {\n    return Promise.resolve(this.completeSync(listOrReorder));\n  }\n  canStart(ev) {\n    if (this.selectedItemEl || this.state !== 0 /* Idle */) {\n      return false;\n    }\n    const target = ev.event.target;\n    const reorderEl = target.closest('ion-reorder');\n    if (!reorderEl) {\n      return false;\n    }\n    const item = findReorderItem(reorderEl, this.el);\n    if (!item) {\n      return false;\n    }\n    ev.data = item;\n    return true;\n  }\n  onStart(ev) {\n    ev.event.preventDefault();\n    const item = this.selectedItemEl = ev.data;\n    const heights = this.cachedHeights;\n    heights.length = 0;\n    const el = this.el;\n    const children = el.children;\n    if (!children || children.length === 0) {\n      return;\n    }\n    let sum = 0;\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      sum += child.offsetHeight;\n      heights.push(sum);\n      child.$ionIndex = i;\n    }\n    const box = el.getBoundingClientRect();\n    this.containerTop = box.top;\n    this.containerBottom = box.bottom;\n    if (this.scrollEl) {\n      const scrollBox = this.scrollEl.getBoundingClientRect();\n      this.scrollElInitial = this.scrollEl.scrollTop;\n      this.scrollElTop = scrollBox.top + AUTO_SCROLL_MARGIN;\n      this.scrollElBottom = scrollBox.bottom - AUTO_SCROLL_MARGIN;\n    }\n    else {\n      this.scrollElInitial = 0;\n      this.scrollElTop = 0;\n      this.scrollElBottom = 0;\n    }\n    this.lastToIndex = indexForItem(item);\n    this.selectedItemHeight = item.offsetHeight;\n    this.state = 1 /* Active */;\n    item.classList.add(ITEM_REORDER_SELECTED);\n    hapticSelectionStart();\n  }\n  onMove(ev) {\n    const selectedItem = this.selectedItemEl;\n    if (!selectedItem) {\n      return;\n    }\n    // Scroll if we reach the scroll margins\n    const scroll = this.autoscroll(ev.currentY);\n    // // Get coordinate\n    const top = this.containerTop - scroll;\n    const bottom = this.containerBottom - scroll;\n    const currentY = Math.max(top, Math.min(ev.currentY, bottom));\n    const deltaY = scroll + currentY - ev.startY;\n    const normalizedY = currentY - top;\n    const toIndex = this.itemIndexForTop(normalizedY);\n    if (toIndex !== this.lastToIndex) {\n      const fromIndex = indexForItem(selectedItem);\n      this.lastToIndex = toIndex;\n      hapticSelectionChanged();\n      this.reorderMove(fromIndex, toIndex);\n    }\n    // Update selected item position\n    selectedItem.style.transform = `translateY(${deltaY}px)`;\n  }\n  onEnd() {\n    const selectedItemEl = this.selectedItemEl;\n    this.state = 2 /* Complete */;\n    if (!selectedItemEl) {\n      this.state = 0 /* Idle */;\n      return;\n    }\n    const toIndex = this.lastToIndex;\n    const fromIndex = indexForItem(selectedItemEl);\n    if (toIndex === fromIndex) {\n      this.completeSync();\n    }\n    else {\n      this.ionItemReorder.emit({\n        from: fromIndex,\n        to: toIndex,\n        complete: this.completeSync.bind(this)\n      });\n    }\n    hapticSelectionEnd();\n  }\n  completeSync(listOrReorder) {\n    const selectedItemEl = this.selectedItemEl;\n    if (selectedItemEl && this.state === 2 /* Complete */) {\n      const children = this.el.children;\n      const len = children.length;\n      const toIndex = this.lastToIndex;\n      const fromIndex = indexForItem(selectedItemEl);\n      if (toIndex !== fromIndex && (listOrReorder === undefined || listOrReorder === true)) {\n        const ref = (fromIndex < toIndex)\n          ? children[toIndex + 1]\n          : children[toIndex];\n        this.el.insertBefore(selectedItemEl, ref);\n      }\n      if (Array.isArray(listOrReorder)) {\n        listOrReorder = reorderArray(listOrReorder, fromIndex, toIndex);\n      }\n      for (let i = 0; i < len; i++) {\n        children[i].style['transform'] = '';\n      }\n      selectedItemEl.style.transition = '';\n      selectedItemEl.classList.remove(ITEM_REORDER_SELECTED);\n      this.selectedItemEl = undefined;\n      this.state = 0 /* Idle */;\n    }\n    return listOrReorder;\n  }\n  itemIndexForTop(deltaY) {\n    const heights = this.cachedHeights;\n    let i = 0;\n    // TODO: since heights is a sorted array of integers, we can do\n    // speed up the search using binary search. Remember that linear-search is still\n    // faster than binary-search for small arrays (<64) due CPU branch misprediction.\n    for (i = 0; i < heights.length; i++) {\n      if (heights[i] > deltaY) {\n        break;\n      }\n    }\n    return i;\n  }\n  /********* DOM WRITE ********* */\n  reorderMove(fromIndex, toIndex) {\n    const itemHeight = this.selectedItemHeight;\n    const children = this.el.children;\n    for (let i = 0; i < children.length; i++) {\n      const style = children[i].style;\n      let value = '';\n      if (i > fromIndex && i <= toIndex) {\n        value = `translateY(${-itemHeight}px)`;\n      }\n      else if (i < fromIndex && i >= toIndex) {\n        value = `translateY(${itemHeight}px)`;\n      }\n      style['transform'] = value;\n    }\n  }\n  autoscroll(posY) {\n    if (!this.scrollEl) {\n      return 0;\n    }\n    let amount = 0;\n    if (posY < this.scrollElTop) {\n      amount = -SCROLL_JUMP;\n    }\n    else if (posY > this.scrollElBottom) {\n      amount = SCROLL_JUMP;\n    }\n    if (amount !== 0) {\n      this.scrollEl.scrollBy(0, amount);\n    }\n    return this.scrollEl.scrollTop - this.scrollElInitial;\n  }\n  render() {\n    const mode = getIonMode(this);\n    return (h(Host, { class: {\n        [mode]: true,\n        'reorder-enabled': !this.disabled,\n        'reorder-list-active': this.state !== 0 /* Idle */,\n      } }));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"disabled\": [\"disabledChanged\"]\n  }; }\n};\nconst indexForItem = (element) => {\n  return element['$ionIndex'];\n};\nconst findReorderItem = (node, container) => {\n  let parent;\n  while (node) {\n    parent = node.parentElement;\n    if (parent === container) {\n      return node;\n    }\n    node = parent;\n  }\n  return undefined;\n};\nconst AUTO_SCROLL_MARGIN = 60;\nconst SCROLL_JUMP = 10;\nconst ITEM_REORDER_SELECTED = 'reorder-selected';\nconst reorderArray = (array, from, to) => {\n  const element = array[from];\n  array.splice(from, 1);\n  array.splice(to, 0, element);\n  return array.slice();\n};\nReorderGroup.style = reorderGroupCss;\n\nexport { Reorder as ion_reorder, ReorderGroup as ion_reorder_group };\n"]}