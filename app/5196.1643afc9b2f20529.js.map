{"version":3,"file":"5196.1643afc9b2f20529.js","mappings":"gJAGA,MAAMA,EAAcA,CAACC,EAAUC,IACK,OAAzBA,EAAGC,QAAQF,GAKhBG,EAAqBA,CAACC,EAAOC,IACP,iBAAVD,GAAsBA,EAAME,OAAS,EAC7CC,OAAOC,OAAO,CAAE,aAAa,EAAM,CAAC,aAAaJ,MAAU,GAAQC,GAAeA,EAYtFI,EAAeC,IACjB,MAAMC,EAAM,CAAC,EACbC,MAZkBF,SACFG,IAAZH,GACcI,MAAMC,QAAQL,GAAWA,EAAUA,EAAQM,MAAM,MAE1DC,OAAQC,GAAW,MAALA,GACdP,IAAKO,GAAMA,EAAEC,QACbF,OAAQC,GAAY,KAANA,GAEhB,GAIPN,CAAaF,GAASU,QAASF,GAAOP,EAAIO,IAAK,GACxCP,GAELU,EAAS,uBACTC,EAAO,eAAAC,KAAAC,KAAG,UAAOC,EAAKC,EAAIC,EAAWC,GACvC,GAAW,MAAPH,GAA0B,MAAXA,EAAI,KAAeJ,EAAOQ,KAAKJ,GAAM,CACpD,MAAMK,EAASC,SAASC,cAAc,cACtC,GAAIF,EACA,OACIJ,GAAGO,iBAEAH,EAAOI,KAAKT,EAAKE,EAAWC,EAE3C,CACA,OAAO,CACX,GAAC,gBAXYO,EAAAC,EAAAC,EAAAC,GAAA,OAAAf,EAAAgB,MAAAC,KAAAC,UAAA,gHCrBb,MAIMC,EAAmB,UAAnBA,EAAsB,MACxBC,YAAYC,IACRC,OAAiBL,KAAMI,GAIvBJ,KAAKM,KAAO,WACZN,KAAKO,yBAA2B,KAC5B,MAAQC,cAAeR,KAClBQ,IAGLA,EAAWF,KAA2B,SAApBE,EAAWF,KAAkB,WAAa,QAEpE,CAMAG,aAAaC,GACQ,SAAbA,GAAoC,aAAbA,IACvBC,OAAgB,wGAAwGD,wBAAgCV,KAAKvC,GAGrK,CACAmD,oBACI,MAAQnD,MAAOuC,KACTQ,EAAcR,KAAKQ,WAAa/C,EAAGC,QAAQ,aAC5C8C,EAWLR,KAAKM,KAAOE,EAAWF,MAVnBK,OAAgB,oHAAqHlD,EAW7I,CACAoD,uBACIb,KAAKQ,WAAa,IACtB,CACAM,SACI,IAAIC,EAAIC,EACR,MAAQpD,QAAO0C,QAASN,KAClBiB,KAAOC,KAAWlB,MAClBmB,EAA4C,QAAxBJ,EAAKf,KAAKoB,gBAA6B,IAAPL,EAAgBA,EAAKM,IACzEC,EAA4C,QAAxBN,EAAKhB,KAAKuB,gBAA6B,IAAPP,EAAgBA,EAAKQ,IACzEC,EAA6B,SAATnB,EAC1B,SAAQoB,KAAEC,IAAM,CAAEC,IAAK,2CAA4CC,SAAOlE,KAAmBC,EAAO,CAC5FkE,CAACb,IAAO,MACT,EAAGS,KAAE,aAAc,CAAEE,IAAK,2CAA4CX,KAAMA,EAAMrD,MAAOA,EAAOmE,KAAM,QAASC,MAAO,QAAS,eAAgBP,EAAoB,OAAS,QAAS,aAAcA,EAAoB,gBAAkB,gBAAiBQ,KAAM,SAAU3B,KAAM,SAAU4B,cAAgBhD,IAMzSA,EAAGO,kBACJ0C,QAASnC,KAAKO,2BAAyB,EAAGmB,KAAE,WAAY,CAAEE,IAAK,2CAA4CQ,KAAM,YAAa,cAAe,OAAQC,KAAMZ,EAAoBH,EAAmBH,KAC7M,CACA,MAAI1D,GAAO,SAAO6E,KAAWtC,KAAO,CACpC,mBAAWuC,GAAa,MAAO,CAC3BjC,KAAQ,CAAC,gBACV,GAEPJ,SAAoBsC,MAAQ,CACxBC,IAzE8B,GA0E9BC,GAxE6B,IAE3BxC,CAAmB","names":["hostContext","selector","el","closest","createColorClasses","color","cssClassMap","length","Object","assign","getClassMap","classes","map","getClassList","undefined","Array","isArray","split","filter","c","trim","forEach","SCHEME","openURL","_ref","_asyncToGenerator","url","ev","direction","animation","test","router","document","querySelector","preventDefault","push","_x","_x2","_x3","_x4","apply","this","arguments","InputPasswordToggle","constructor","hostRef","registerInstance","type","togglePasswordVisibility","inputElRef","onTypeChange","newValue","printIonWarning","connectedCallback","disconnectedCallback","render","_a","_b","mode","getIonMode","showPasswordIcon","showIcon","eye","hidePasswordIcon","hideIcon","eyeOff","isPasswordVisible","h","Host","key","class","r","fill","shape","role","onPointerDown","onClick","slot","icon","getElement","watchers","style","ios","md"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/theme-DiVJyqlX.js","./node_modules/@ionic/core/dist/esm/ion-input-password-toggle.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nconst hostContext = (selector, el) => {\n    return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color, cssClassMap) => {\n    return typeof color === 'string' && color.length > 0\n        ? Object.assign({ 'ion-color': true, [`ion-color-${color}`]: true }, cssClassMap) : cssClassMap;\n};\nconst getClassList = (classes) => {\n    if (classes !== undefined) {\n        const array = Array.isArray(classes) ? classes : classes.split(' ');\n        return array\n            .filter((c) => c != null)\n            .map((c) => c.trim())\n            .filter((c) => c !== '');\n    }\n    return [];\n};\nconst getClassMap = (classes) => {\n    const map = {};\n    getClassList(classes).forEach((c) => (map[c] = true));\n    return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction, animation) => {\n    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n        const router = document.querySelector('ion-router');\n        if (router) {\n            if (ev != null) {\n                ev.preventDefault();\n            }\n            return router.push(url, direction, animation);\n        }\n    }\n    return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, f as printIonWarning, h, d as Host, g as getElement } from './index-4DxY6_gG.js';\nimport { c as createColorClasses } from './theme-DiVJyqlX.js';\nimport { x as eyeOff, y as eye } from './index-DV3sJJW8.js';\nimport { b as getIonMode } from './ionic-global-CTSyufhF.js';\n\nconst iosInputPasswordToggleCss = \"\";\n\nconst mdInputPasswordToggleCss = \"\";\n\nconst InputPasswordToggle = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * @internal\n         */\n        this.type = 'password';\n        this.togglePasswordVisibility = () => {\n            const { inputElRef } = this;\n            if (!inputElRef) {\n                return;\n            }\n            inputElRef.type = inputElRef.type === 'text' ? 'password' : 'text';\n        };\n    }\n    /**\n     * Whenever the input type changes we need to re-run validation to ensure the password\n     * toggle is being used with the correct input type. If the application changes the type\n     * outside of this component we also need to re-render so the correct icon is shown.\n     */\n    onTypeChange(newValue) {\n        if (newValue !== 'text' && newValue !== 'password') {\n            printIonWarning(`[ion-input-password-toggle] - Only inputs of type \"text\" or \"password\" are supported. Input of type \"${newValue}\" is not compatible.`, this.el);\n            return;\n        }\n    }\n    connectedCallback() {\n        const { el } = this;\n        const inputElRef = (this.inputElRef = el.closest('ion-input'));\n        if (!inputElRef) {\n            printIonWarning('[ion-input-password-toggle] - No ancestor ion-input found. This component must be slotted inside of an ion-input.', el);\n            return;\n        }\n        /**\n         * Important: Set the type in connectedCallback because the default value\n         * of this.type may not always be accurate. Usually inputs have the \"password\" type\n         * but it is possible to have the input to initially have the \"text\" type. In that scenario\n         * the wrong icon will show briefly before switching to the correct icon. Setting the\n         * type here allows us to avoid that flicker.\n         */\n        this.type = inputElRef.type;\n    }\n    disconnectedCallback() {\n        this.inputElRef = null;\n    }\n    render() {\n        var _a, _b;\n        const { color, type } = this;\n        const mode = getIonMode(this);\n        const showPasswordIcon = (_a = this.showIcon) !== null && _a !== void 0 ? _a : eye;\n        const hidePasswordIcon = (_b = this.hideIcon) !== null && _b !== void 0 ? _b : eyeOff;\n        const isPasswordVisible = type === 'text';\n        return (h(Host, { key: '91bc55664d496fe457518bd112865dd7811d0c17', class: createColorClasses(color, {\n                [mode]: true,\n            }) }, h(\"ion-button\", { key: 'f3e436422110c9cb4d5c0b83500255b24ab4cdef', mode: mode, color: color, fill: \"clear\", shape: \"round\", \"aria-checked\": isPasswordVisible ? 'true' : 'false', \"aria-label\": isPasswordVisible ? 'Hide password' : 'Show password', role: \"switch\", type: \"button\", onPointerDown: (ev) => {\n                /**\n                 * This prevents mobile browsers from\n                 * blurring the input when the password toggle\n                 * button is activated.\n                 */\n                ev.preventDefault();\n            }, onClick: this.togglePasswordVisibility }, h(\"ion-icon\", { key: '5c8b121153f148f92aa7cba0447673a4f6f3ad1e', slot: \"icon-only\", \"aria-hidden\": \"true\", icon: isPasswordVisible ? hidePasswordIcon : showPasswordIcon }))));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"type\": [\"onTypeChange\"]\n    }; }\n};\nInputPasswordToggle.style = {\n    ios: iosInputPasswordToggleCss,\n    md: mdInputPasswordToggleCss\n};\n\nexport { InputPasswordToggle as ion_input_password_toggle };\n"],"x_google_ignoreList":[0,1]}