{"version":3,"file":"4969.d4c03ae33177c9b0.js","mappings":"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","names":["DatetimeButton","constructor","hostRef","_this","this","registerInstance","datetimeEl","overlayEl","getParsedDateValues","value","Array","isArray","setDateTimeText","datetimePresentation","locale","hourCycle","preferWheel","multiple","titleSelectedDatesFormatter","parsedValues","parsedDatetimes","parseDate","length","getToday","firstParsedDatetime","computedHourCycle","getHourCycle","dateText","timeText","undefined","getMonthDayAndYear","getLocalizedTime","headerText","e","printIonError","getMonthAndYear","getLocalizedDateTime","month","year","waitForDatetimeChanges","_asyncToGenerator","Promise","resolve","addEventListener","once","handleDateClick","_ref2","ev","needsPresentationChange","presentation","selectedButton","presentOverlay","dateTargetEl","_x","apply","arguments","handleTimeClick","timeTargetEl","_ref3","triggerEl","tagName","present","Object","assign","detail","ionShadowTarget","_x2","_x3","_x4","datetimeActive","color","disabled","datetime","componentWillLoad","_this2","el","document","getElementById","toLowerCase","IntersectionObserver","entries","isIntersecting","threshold","observe","closest","classList","add","componentOnReady","render","mode","getIonMode","h","Host","class","createColorClasses","a","id","onClick","part","ref","name","getElement","style","ios","md"],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/ion-datetime-button.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, h, H as Host, f as getElement } from './index-b7d870cf.js';\nimport { a as addEventListener, c as componentOnReady } from './helpers-ae653409.js';\nimport { a as printIonError } from './index-9b0d46f4.js';\nimport { c as createColorClasses } from './theme-01f3f29c.js';\nimport { b as getIonMode } from './ionic-global-1f99b929.js';\nimport { q as parseDate, t as getToday, J as getHourCycle, S as getLocalizedDateTime, G as getMonthAndYear, K as getLocalizedTime, T as getMonthDayAndYear } from './data-775093f5.js';\n\nconst iosDatetimeButtonCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px;padding-top:6px;padding-bottom:6px;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:1rem;cursor:pointer;overflow:hidden;-webkit-appearance:none;-moz-appearance:none;appearance:none}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}\";\n\nconst mdDatetimeButtonCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px;padding-top:6px;padding-bottom:6px;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:1rem;cursor:pointer;overflow:hidden;-webkit-appearance:none;-moz-appearance:none;appearance:none}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}\";\n\nconst DatetimeButton = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.datetimeEl = null;\n        this.overlayEl = null;\n        /**\n         * Accepts one or more string values and converts\n         * them to DatetimeParts. This is done so datetime-button\n         * can work with an array internally and not need\n         * to keep checking if the datetime value is `string` or `string[]`.\n         */\n        this.getParsedDateValues = (value) => {\n            if (value === undefined || value === null) {\n                return [];\n            }\n            if (Array.isArray(value)) {\n                return value;\n            }\n            return [value];\n        };\n        /**\n         * Check the value property on the linked\n         * ion-datetime and then format it according\n         * to the locale specified on ion-datetime.\n         */\n        this.setDateTimeText = () => {\n            const { datetimeEl, datetimePresentation } = this;\n            if (!datetimeEl) {\n                return;\n            }\n            const { value, locale, hourCycle, preferWheel, multiple, titleSelectedDatesFormatter } = datetimeEl;\n            const parsedValues = this.getParsedDateValues(value);\n            /**\n             * Both ion-datetime and ion-datetime-button default\n             * to today's date and time if no value is set.\n             */\n            const parsedDatetimes = parseDate(parsedValues.length > 0 ? parsedValues : [getToday()]);\n            if (!parsedDatetimes) {\n                return;\n            }\n            /**\n             * If developers incorrectly use multiple=\"true\"\n             * with non \"date\" datetimes, then just select\n             * the first value so the interface does\n             * not appear broken. Datetime will provide a\n             * warning in the console.\n             */\n            const firstParsedDatetime = parsedDatetimes[0];\n            const computedHourCycle = getHourCycle(locale, hourCycle);\n            this.dateText = this.timeText = undefined;\n            switch (datetimePresentation) {\n                case 'date-time':\n                case 'time-date':\n                    const dateText = getMonthDayAndYear(locale, firstParsedDatetime);\n                    const timeText = getLocalizedTime(locale, firstParsedDatetime, computedHourCycle);\n                    if (preferWheel) {\n                        this.dateText = `${dateText} ${timeText}`;\n                    }\n                    else {\n                        this.dateText = dateText;\n                        this.timeText = timeText;\n                    }\n                    break;\n                case 'date':\n                    if (multiple && parsedValues.length !== 1) {\n                        let headerText = `${parsedValues.length} days`; // default/fallback for multiple selection\n                        if (titleSelectedDatesFormatter !== undefined) {\n                            try {\n                                headerText = titleSelectedDatesFormatter(parsedValues);\n                            }\n                            catch (e) {\n                                printIonError('Exception in provided `titleSelectedDatesFormatter`: ', e);\n                            }\n                        }\n                        this.dateText = headerText;\n                    }\n                    else {\n                        this.dateText = getMonthDayAndYear(locale, firstParsedDatetime);\n                    }\n                    break;\n                case 'time':\n                    this.timeText = getLocalizedTime(locale, firstParsedDatetime, computedHourCycle);\n                    break;\n                case 'month-year':\n                    this.dateText = getMonthAndYear(locale, firstParsedDatetime);\n                    break;\n                case 'month':\n                    this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, { month: 'long' });\n                    break;\n                case 'year':\n                    this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, { year: 'numeric' });\n                    break;\n            }\n        };\n        /**\n         * Waits for the ion-datetime to re-render.\n         * This is needed in order to correctly position\n         * a popover relative to the trigger element.\n         */\n        this.waitForDatetimeChanges = async () => {\n            const { datetimeEl } = this;\n            if (!datetimeEl) {\n                return Promise.resolve();\n            }\n            return new Promise((resolve) => {\n                addEventListener(datetimeEl, 'ionRender', resolve, { once: true });\n            });\n        };\n        this.handleDateClick = async (ev) => {\n            const { datetimeEl, datetimePresentation } = this;\n            if (!datetimeEl) {\n                return;\n            }\n            let needsPresentationChange = false;\n            /**\n             * When clicking the date button,\n             * we need to make sure that only a date\n             * picker is displayed. For presentation styles\n             * that display content other than a date picker,\n             * we need to update the presentation style.\n             */\n            switch (datetimePresentation) {\n                case 'date-time':\n                case 'time-date':\n                    const needsChange = datetimeEl.presentation !== 'date';\n                    /**\n                     * The date+time wheel picker\n                     * shows date and time together,\n                     * so do not adjust the presentation\n                     * in that case.\n                     */\n                    if (!datetimeEl.preferWheel && needsChange) {\n                        datetimeEl.presentation = 'date';\n                        needsPresentationChange = true;\n                    }\n                    break;\n            }\n            /**\n             * Track which button was clicked\n             * so that it can have the correct\n             * activated styles applied when\n             * the modal/popover containing\n             * the datetime is opened.\n             */\n            this.selectedButton = 'date';\n            this.presentOverlay(ev, needsPresentationChange, this.dateTargetEl);\n        };\n        this.handleTimeClick = (ev) => {\n            const { datetimeEl, datetimePresentation } = this;\n            if (!datetimeEl) {\n                return;\n            }\n            let needsPresentationChange = false;\n            /**\n             * When clicking the time button,\n             * we need to make sure that only a time\n             * picker is displayed. For presentation styles\n             * that display content other than a time picker,\n             * we need to update the presentation style.\n             */\n            switch (datetimePresentation) {\n                case 'date-time':\n                case 'time-date':\n                    const needsChange = datetimeEl.presentation !== 'time';\n                    if (needsChange) {\n                        datetimeEl.presentation = 'time';\n                        needsPresentationChange = true;\n                    }\n                    break;\n            }\n            /**\n             * Track which button was clicked\n             * so that it can have the correct\n             * activated styles applied when\n             * the modal/popover containing\n             * the datetime is opened.\n             */\n            this.selectedButton = 'time';\n            this.presentOverlay(ev, needsPresentationChange, this.timeTargetEl);\n        };\n        /**\n         * If the datetime is presented in an\n         * overlay, the datetime and overlay\n         * should be appropriately sized.\n         * These classes provide default sizing values\n         * that developers can customize.\n         * The goal is to provide an overlay that is\n         * reasonably sized with a datetime that\n         * fills the entire container.\n         */\n        this.presentOverlay = async (ev, needsPresentationChange, triggerEl) => {\n            const { overlayEl } = this;\n            if (!overlayEl) {\n                return;\n            }\n            if (overlayEl.tagName === 'ION-POPOVER') {\n                /**\n                 * When the presentation on datetime changes,\n                 * we need to wait for the component to re-render\n                 * otherwise the computed width/height of the\n                 * popover content will be wrong, causing\n                 * the popover to not align with the trigger element.\n                 */\n                if (needsPresentationChange) {\n                    await this.waitForDatetimeChanges();\n                }\n                /**\n                 * We pass the trigger button element\n                 * so that the popover aligns with the individual\n                 * button that was clicked, not the component container.\n                 */\n                overlayEl.present(Object.assign(Object.assign({}, ev), { detail: {\n                        ionShadowTarget: triggerEl,\n                    } }));\n            }\n            else {\n                overlayEl.present();\n            }\n        };\n        this.datetimePresentation = 'date-time';\n        this.dateText = undefined;\n        this.timeText = undefined;\n        this.datetimeActive = false;\n        this.selectedButton = undefined;\n        this.color = 'primary';\n        this.disabled = false;\n        this.datetime = undefined;\n    }\n    async componentWillLoad() {\n        const { datetime } = this;\n        if (!datetime) {\n            printIonError('An ID associated with an ion-datetime instance is required for ion-datetime-button to function properly.', this.el);\n            return;\n        }\n        const datetimeEl = (this.datetimeEl = document.getElementById(datetime));\n        if (!datetimeEl) {\n            printIonError(`No ion-datetime instance found for ID '${datetime}'.`, this.el);\n            return;\n        }\n        /**\n         * The element reference must be an ion-datetime. Print an error\n         * if a non-datetime element was provided.\n         */\n        if (datetimeEl.tagName !== 'ION-DATETIME') {\n            printIonError(`Expected an ion-datetime instance for ID '${datetime}' but received '${datetimeEl.tagName.toLowerCase()}' instead.`, datetimeEl);\n            return;\n        }\n        /**\n         * Since the datetime can be used in any context (overlays, accordion, etc)\n         * we track when it is visible to determine when it is active.\n         * This informs which button is highlighted as well as the\n         * aria-expanded state.\n         */\n        const io = new IntersectionObserver((entries) => {\n            const ev = entries[0];\n            this.datetimeActive = ev.isIntersecting;\n        }, {\n            threshold: 0.01,\n        });\n        io.observe(datetimeEl);\n        /**\n         * Get a reference to any modal/popover\n         * the datetime is being used in so we can\n         * correctly size it when it is presented.\n         */\n        const overlayEl = (this.overlayEl = datetimeEl.closest('ion-modal, ion-popover'));\n        /**\n         * The .ion-datetime-button-overlay class contains\n         * styles that allow any modal/popover to be\n         * sized according to the dimensions of the datetime.\n         * If developers want a smaller/larger overlay all they need\n         * to do is change the width/height of the datetime.\n         * Additionally, this lets us avoid having to set\n         * explicit widths on each variant of datetime.\n         */\n        if (overlayEl) {\n            overlayEl.classList.add('ion-datetime-button-overlay');\n        }\n        componentOnReady(datetimeEl, () => {\n            const datetimePresentation = (this.datetimePresentation = datetimeEl.presentation || 'date-time');\n            /**\n             * Set the initial display\n             * in the rendered buttons.\n             *\n             * From there, we need to listen\n             * for ionChange to be emitted\n             * from datetime so we know when\n             * to re-render the displayed\n             * text in the buttons.\n             */\n            this.setDateTimeText();\n            addEventListener(datetimeEl, 'ionValueChange', this.setDateTimeText);\n            /**\n             * Configure the initial selected button\n             * in the event that the datetime is displayed\n             * without clicking one of the datetime buttons.\n             * For example, a datetime could be expanded\n             * in an accordion. In this case users only\n             * need to click the accordion header to show\n             * the datetime.\n             */\n            switch (datetimePresentation) {\n                case 'date-time':\n                case 'date':\n                case 'month-year':\n                case 'month':\n                case 'year':\n                    this.selectedButton = 'date';\n                    break;\n                case 'time-date':\n                case 'time':\n                    this.selectedButton = 'time';\n                    break;\n            }\n        });\n    }\n    render() {\n        const { color, dateText, timeText, selectedButton, datetimeActive, disabled } = this;\n        const mode = getIonMode(this);\n        return (h(Host, { class: createColorClasses(color, {\n                [mode]: true,\n                [`${selectedButton}-active`]: datetimeActive,\n                ['datetime-button-disabled']: disabled,\n            }) }, dateText && (h(\"button\", { class: \"ion-activatable\", id: \"date-button\", \"aria-expanded\": datetimeActive ? 'true' : 'false', onClick: this.handleDateClick, disabled: disabled, part: \"native\", ref: (el) => (this.dateTargetEl = el) }, h(\"slot\", { name: \"date-target\" }, dateText), mode === 'md' && h(\"ion-ripple-effect\", null))), timeText && (h(\"button\", { class: \"ion-activatable\", id: \"time-button\", \"aria-expanded\": datetimeActive ? 'true' : 'false', onClick: this.handleTimeClick, disabled: disabled, part: \"native\", ref: (el) => (this.timeTargetEl = el) }, h(\"slot\", { name: \"time-target\" }, timeText), mode === 'md' && h(\"ion-ripple-effect\", null)))));\n    }\n    get el() { return getElement(this); }\n};\nDatetimeButton.style = {\n    ios: iosDatetimeButtonCss,\n    md: mdDatetimeButtonCss\n};\n\nexport { DatetimeButton as ion_datetime_button };\n"],"x_google_ignoreList":[0]}