{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-virtual-scroll.entry.js"],"names":["createNode","el","type","template","getTemplate","ownerDocument","importNode","content","children","querySelector","calcCells","items","itemHeight","headerHeight","footerHeight","headerFn","footerFn","approxHeaderHeight","approxFooterHeight","approxItemHeight","j","offset","len","cells","end","i","item","value","push","index","height","reads","visible","VirtualScroll","hostRef","this","range","length","viewportHeight","virtualDom","isEnabled","viewportOffset","currentScrollTop","indexDirty","lastItemLen","totalHeight","onScroll","updateVirtualScroll","contentEl","closest","getScrollElement","scrollEl","updateState","console","error","Promise","resolve","heightIndex","cell","find","c","getHeightIndex","cellIndex","findIndex","dst","src","Math","max","scheduleUpdate","checkRange","timerUpdate","clearTimeout","readVS","bind","writeVS","topOffset","node","offsetTop","offsetParent","offsetHeight","scrollTop","vierportHeight","dirtyIndex","viewport","top","bottom","buffer","topPos","bottomPos","min","currentRange","dom","change","d","toMutate","n","pool","filter","forEach","nodeRender","updateCellHeight","child","Array","from","tagName","childrenNu","newChild","classList","add","appendChild","style","transform","remove","domRender","renderItem","update","window","getComputedStyle","parseFloat","getPropertyValue","setCellHeight","setTimeout","shouldEnable","enableScrollEvents","Infinity","calcHeightIndex","buf","Uint32Array","newBuf","set","subarray","acum","shouldListen","rmEvent","addEventListener","removeEventListener","renderHeader","renderFooter","VirtualProxy","map","renderVirtualNode","utils","vattrs","classes","Object","assign","class"],"mappings":"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","file":"x","sourcesContent":["import { r as registerInstance, f as readTask, c as writeTask, j as forceUpdate, h, H as Host, i as getElement } from './index-7a8b7a1c.js';\nimport { c as componentOnReady } from './helpers-dd7e4b7b.js';\n\nconst CELL_TYPE_ITEM = 'item';\nconst CELL_TYPE_HEADER = 'header';\nconst CELL_TYPE_FOOTER = 'footer';\nconst NODE_CHANGE_NONE = 0;\nconst NODE_CHANGE_POSITION = 1;\nconst NODE_CHANGE_CELL = 2;\n\nconst MIN_READS = 2;\nconst updateVDom = (dom, heightIndex, cells, range) => {\n  // reset dom\n  for (const node of dom) {\n    node.change = NODE_CHANGE_NONE;\n    node.d = true;\n  }\n  // try to match into exisiting dom\n  const toMutate = [];\n  const end = range.offset + range.length;\n  for (let i = range.offset; i < end; i++) {\n    const cell = cells[i];\n    const node = dom.find(n => n.d && n.cell === cell);\n    if (node) {\n      const top = heightIndex[i];\n      if (top !== node.top) {\n        node.top = top;\n        node.change = NODE_CHANGE_POSITION;\n      }\n      node.d = false;\n    }\n    else {\n      toMutate.push(cell);\n    }\n  }\n  // needs to append\n  const pool = dom.filter(n => n.d);\n  for (const cell of toMutate) {\n    const node = pool.find(n => n.d && n.cell.type === cell.type);\n    const index = cell.i;\n    if (node) {\n      node.d = false;\n      node.change = NODE_CHANGE_CELL;\n      node.cell = cell;\n      node.top = heightIndex[index];\n    }\n    else {\n      dom.push({\n        d: false,\n        cell,\n        visible: true,\n        change: NODE_CHANGE_CELL,\n        top: heightIndex[index],\n      });\n    }\n  }\n  dom\n    .filter(n => n.d && n.top !== -9999)\n    .forEach(n => {\n    n.change = NODE_CHANGE_POSITION;\n    n.top = -9999;\n  });\n};\nconst doRender = (el, nodeRender, dom, updateCellHeight) => {\n  const children = Array.from(el.children).filter(n => n.tagName !== 'TEMPLATE');\n  const childrenNu = children.length;\n  let child;\n  for (let i = 0; i < dom.length; i++) {\n    const node = dom[i];\n    const cell = node.cell;\n    // the cell change, the content must be updated\n    if (node.change === NODE_CHANGE_CELL) {\n      if (i < childrenNu) {\n        child = children[i];\n        nodeRender(child, cell, i);\n      }\n      else {\n        const newChild = createNode(el, cell.type);\n        child = nodeRender(newChild, cell, i) || newChild;\n        child.classList.add('virtual-item');\n        el.appendChild(child);\n      }\n      child['$ionCell'] = cell;\n    }\n    else {\n      child = children[i];\n    }\n    // only update position when it changes\n    if (node.change !== NODE_CHANGE_NONE) {\n      child.style.transform = `translate3d(0,${node.top}px,0)`;\n    }\n    // update visibility\n    const visible = cell.visible;\n    if (node.visible !== visible) {\n      if (visible) {\n        child.classList.remove('virtual-loading');\n      }\n      else {\n        child.classList.add('virtual-loading');\n      }\n      node.visible = visible;\n    }\n    // dynamic height\n    if (cell.reads > 0) {\n      updateCellHeight(cell, child);\n      cell.reads--;\n    }\n  }\n};\nconst createNode = (el, type) => {\n  const template = getTemplate(el, type);\n  if (template && el.ownerDocument) {\n    return el.ownerDocument.importNode(template.content, true).children[0];\n  }\n  return null;\n};\nconst getTemplate = (el, type) => {\n  switch (type) {\n    case CELL_TYPE_ITEM: return el.querySelector('template:not([name])');\n    case CELL_TYPE_HEADER: return el.querySelector('template[name=header]');\n    case CELL_TYPE_FOOTER: return el.querySelector('template[name=footer]');\n  }\n};\nconst getViewport = (scrollTop, vierportHeight, margin) => {\n  return {\n    top: Math.max(scrollTop - margin, 0),\n    bottom: scrollTop + vierportHeight + margin\n  };\n};\nconst getRange = (heightIndex, viewport, buffer) => {\n  const topPos = viewport.top;\n  const bottomPos = viewport.bottom;\n  // find top index\n  let i = 0;\n  for (; i < heightIndex.length; i++) {\n    if (heightIndex[i] > topPos) {\n      break;\n    }\n  }\n  const offset = Math.max(i - buffer - 1, 0);\n  // find bottom index\n  for (; i < heightIndex.length; i++) {\n    if (heightIndex[i] >= bottomPos) {\n      break;\n    }\n  }\n  const end = Math.min(i + buffer, heightIndex.length);\n  const length = end - offset;\n  return { offset, length };\n};\nconst getShouldUpdate = (dirtyIndex, currentRange, range) => {\n  const end = range.offset + range.length;\n  return (dirtyIndex <= end ||\n    currentRange.offset !== range.offset ||\n    currentRange.length !== range.length);\n};\nconst findCellIndex = (cells, index) => {\n  const max = cells.length > 0 ? cells[cells.length - 1].index : 0;\n  if (index === 0) {\n    return 0;\n  }\n  else if (index === max + 1) {\n    return cells.length;\n  }\n  else {\n    return cells.findIndex(c => c.index === index);\n  }\n};\nconst inplaceUpdate = (dst, src, offset) => {\n  if (offset === 0 && src.length >= dst.length) {\n    return src;\n  }\n  for (let i = 0; i < src.length; i++) {\n    dst[i + offset] = src[i];\n  }\n  return dst;\n};\nconst calcCells = (items, itemHeight, headerHeight, footerHeight, headerFn, footerFn, approxHeaderHeight, approxFooterHeight, approxItemHeight, j, offset, len) => {\n  const cells = [];\n  const end = len + offset;\n  for (let i = offset; i < end; i++) {\n    const item = items[i];\n    if (headerFn) {\n      const value = headerFn(item, i, items);\n      if (value != null) {\n        cells.push({\n          i: j++,\n          type: CELL_TYPE_HEADER,\n          value,\n          index: i,\n          height: headerHeight ? headerHeight(value, i) : approxHeaderHeight,\n          reads: headerHeight ? 0 : MIN_READS,\n          visible: !!headerHeight,\n        });\n      }\n    }\n    cells.push({\n      i: j++,\n      type: CELL_TYPE_ITEM,\n      value: item,\n      index: i,\n      height: itemHeight ? itemHeight(item, i) : approxItemHeight,\n      reads: itemHeight ? 0 : MIN_READS,\n      visible: !!itemHeight,\n    });\n    if (footerFn) {\n      const value = footerFn(item, i, items);\n      if (value != null) {\n        cells.push({\n          i: j++,\n          type: CELL_TYPE_FOOTER,\n          value,\n          index: i,\n          height: footerHeight ? footerHeight(value, i) : approxFooterHeight,\n          reads: footerHeight ? 0 : MIN_READS,\n          visible: !!footerHeight,\n        });\n      }\n    }\n  }\n  return cells;\n};\nconst calcHeightIndex = (buf, cells, index) => {\n  let acum = buf[index];\n  for (let i = index; i < buf.length; i++) {\n    buf[i] = acum;\n    acum += cells[i].height;\n  }\n  return acum;\n};\nconst resizeBuffer = (buf, len) => {\n  if (!buf) {\n    return new Uint32Array(len);\n  }\n  if (buf.length === len) {\n    return buf;\n  }\n  else if (len > buf.length) {\n    const newBuf = new Uint32Array(len);\n    newBuf.set(buf);\n    return newBuf;\n  }\n  else {\n    return buf.subarray(0, len);\n  }\n};\nconst positionForIndex = (index, cells, heightIndex) => {\n  const cell = cells.find(c => c.type === CELL_TYPE_ITEM && c.index === index);\n  if (cell) {\n    return heightIndex[cell.i];\n  }\n  return -1;\n};\n\nconst virtualScrollCss = \"ion-virtual-scroll{display:block;position:relative;width:100%;contain:strict;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}ion-virtual-scroll>.virtual-loading{opacity:0}ion-virtual-scroll>.virtual-item{position:absolute !important;top:0 !important;right:0 !important;left:0 !important;-webkit-transition-duration:0ms;transition-duration:0ms;will-change:transform}\";\n\nconst VirtualScroll = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.range = { offset: 0, length: 0 };\n    this.viewportHeight = 0;\n    this.cells = [];\n    this.virtualDom = [];\n    this.isEnabled = false;\n    this.viewportOffset = 0;\n    this.currentScrollTop = 0;\n    this.indexDirty = 0;\n    this.lastItemLen = 0;\n    this.totalHeight = 0;\n    /**\n     * It is important to provide this\n     * if virtual item height will be significantly larger than the default\n     * The approximate height of each virtual item template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n    this.approxItemHeight = 45;\n    /**\n     * The approximate height of each header template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n    this.approxHeaderHeight = 30;\n    /**\n     * The approximate width of each footer template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n    this.approxFooterHeight = 30;\n    this.onScroll = () => {\n      this.updateVirtualScroll();\n    };\n  }\n  itemsChanged() {\n    this.calcCells();\n    this.updateVirtualScroll();\n  }\n  async connectedCallback() {\n    const contentEl = this.el.closest('ion-content');\n    if (!contentEl) {\n      console.error('<ion-virtual-scroll> must be used inside an <ion-content>');\n      return;\n    }\n    this.scrollEl = await contentEl.getScrollElement();\n    this.contentEl = contentEl;\n    this.calcCells();\n    this.updateState();\n  }\n  componentDidUpdate() {\n    this.updateState();\n  }\n  disconnectedCallback() {\n    this.scrollEl = undefined;\n  }\n  onResize() {\n    this.calcCells();\n    this.updateVirtualScroll();\n  }\n  /**\n   * Returns the position of the virtual item at the given index.\n   */\n  positionForItem(index) {\n    return Promise.resolve(positionForIndex(index, this.cells, this.getHeightIndex()));\n  }\n  /**\n   * This method marks a subset of items as dirty, so they can be re-rendered. Items should be marked as\n   * dirty any time the content or their style changes.\n   *\n   * The subset of items to be updated can are specifing by an offset and a length.\n   */\n  async checkRange(offset, len = -1) {\n    // TODO: kind of hacky how we do in-place updated of the cells\n    // array. this part needs a complete refactor\n    if (!this.items) {\n      return;\n    }\n    const length = (len === -1)\n      ? this.items.length - offset\n      : len;\n    const cellIndex = findCellIndex(this.cells, offset);\n    const cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, cellIndex, offset, length);\n    this.cells = inplaceUpdate(this.cells, cells, cellIndex);\n    this.lastItemLen = this.items.length;\n    this.indexDirty = Math.max(offset - 1, 0);\n    this.scheduleUpdate();\n  }\n  /**\n   * This method marks the tail the items array as dirty, so they can be re-rendered.\n   *\n   * It's equivalent to calling:\n   *\n   * ```js\n   * virtualScroll.checkRange(lastItemLen);\n   * ```\n   */\n  async checkEnd() {\n    if (this.items) {\n      this.checkRange(this.lastItemLen);\n    }\n  }\n  updateVirtualScroll() {\n    // do nothing if virtual-scroll is disabled\n    if (!this.isEnabled || !this.scrollEl) {\n      return;\n    }\n    // unschedule future updates\n    if (this.timerUpdate) {\n      clearTimeout(this.timerUpdate);\n      this.timerUpdate = undefined;\n    }\n    // schedule DOM operations into the stencil queue\n    readTask(this.readVS.bind(this));\n    writeTask(this.writeVS.bind(this));\n  }\n  readVS() {\n    const { contentEl, scrollEl, el } = this;\n    let topOffset = 0;\n    let node = el;\n    while (node && node !== contentEl) {\n      topOffset += node.offsetTop;\n      node = node.offsetParent;\n    }\n    this.viewportOffset = topOffset;\n    if (scrollEl) {\n      this.viewportHeight = scrollEl.offsetHeight;\n      this.currentScrollTop = scrollEl.scrollTop;\n    }\n  }\n  writeVS() {\n    const dirtyIndex = this.indexDirty;\n    // get visible viewport\n    const scrollTop = this.currentScrollTop - this.viewportOffset;\n    const viewport = getViewport(scrollTop, this.viewportHeight, 100);\n    // compute lazily the height index\n    const heightIndex = this.getHeightIndex();\n    // get array bounds of visible cells base in the viewport\n    const range = getRange(heightIndex, viewport, 2);\n    // fast path, do nothing\n    const shouldUpdate = getShouldUpdate(dirtyIndex, this.range, range);\n    if (!shouldUpdate) {\n      return;\n    }\n    this.range = range;\n    // in place mutation of the virtual DOM\n    updateVDom(this.virtualDom, heightIndex, this.cells, range);\n    // Write DOM\n    // Different code paths taken depending of the render API used\n    if (this.nodeRender) {\n      doRender(this.el, this.nodeRender, this.virtualDom, this.updateCellHeight.bind(this));\n    }\n    else if (this.domRender) {\n      this.domRender(this.virtualDom);\n    }\n    else if (this.renderItem) {\n      forceUpdate(this);\n    }\n  }\n  updateCellHeight(cell, node) {\n    const update = () => {\n      if (node['$ionCell'] === cell) {\n        const style = window.getComputedStyle(node);\n        const height = node.offsetHeight + parseFloat(style.getPropertyValue('margin-bottom'));\n        this.setCellHeight(cell, height);\n      }\n    };\n    if (node) {\n      componentOnReady(node, update);\n    }\n    else {\n      update();\n    }\n  }\n  setCellHeight(cell, height) {\n    const index = cell.i;\n    // the cell might changed since the height update was scheduled\n    if (cell !== this.cells[index]) {\n      return;\n    }\n    if (cell.height !== height || cell.visible !== true) {\n      cell.visible = true;\n      cell.height = height;\n      this.indexDirty = Math.min(this.indexDirty, index);\n      this.scheduleUpdate();\n    }\n  }\n  scheduleUpdate() {\n    clearTimeout(this.timerUpdate);\n    this.timerUpdate = setTimeout(() => this.updateVirtualScroll(), 100);\n  }\n  updateState() {\n    const shouldEnable = !!(this.scrollEl &&\n      this.cells);\n    if (shouldEnable !== this.isEnabled) {\n      this.enableScrollEvents(shouldEnable);\n      if (shouldEnable) {\n        this.updateVirtualScroll();\n      }\n    }\n  }\n  calcCells() {\n    if (!this.items) {\n      return;\n    }\n    this.lastItemLen = this.items.length;\n    this.cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, 0, 0, this.lastItemLen);\n    this.indexDirty = 0;\n  }\n  getHeightIndex() {\n    if (this.indexDirty !== Infinity) {\n      this.calcHeightIndex(this.indexDirty);\n    }\n    return this.heightIndex;\n  }\n  calcHeightIndex(index = 0) {\n    // TODO: optimize, we don't need to calculate all the cells\n    this.heightIndex = resizeBuffer(this.heightIndex, this.cells.length);\n    this.totalHeight = calcHeightIndex(this.heightIndex, this.cells, index);\n    this.indexDirty = Infinity;\n  }\n  enableScrollEvents(shouldListen) {\n    if (this.rmEvent) {\n      this.rmEvent();\n      this.rmEvent = undefined;\n    }\n    const scrollEl = this.scrollEl;\n    if (scrollEl) {\n      this.isEnabled = shouldListen;\n      scrollEl.addEventListener('scroll', this.onScroll);\n      this.rmEvent = () => {\n        scrollEl.removeEventListener('scroll', this.onScroll);\n      };\n    }\n  }\n  renderVirtualNode(node) {\n    const { type, value, index } = node.cell;\n    switch (type) {\n      case CELL_TYPE_ITEM: return this.renderItem(value, index);\n      case CELL_TYPE_HEADER: return this.renderHeader(value, index);\n      case CELL_TYPE_FOOTER: return this.renderFooter(value, index);\n    }\n  }\n  render() {\n    return (h(Host, { style: {\n        height: `${this.totalHeight}px`\n      } }, this.renderItem && (h(VirtualProxy, { dom: this.virtualDom }, this.virtualDom.map(node => this.renderVirtualNode(node))))));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"itemHeight\": [\"itemsChanged\"],\n    \"headerHeight\": [\"itemsChanged\"],\n    \"footerHeight\": [\"itemsChanged\"],\n    \"items\": [\"itemsChanged\"]\n  }; }\n};\nconst VirtualProxy = ({ dom }, children, utils) => {\n  return utils.map(children, (child, i) => {\n    const node = dom[i];\n    const vattrs = child.vattrs || {};\n    let classes = vattrs.class || '';\n    classes += 'virtual-item ';\n    if (!node.visible) {\n      classes += 'virtual-loading';\n    }\n    return Object.assign(Object.assign({}, child), { vattrs: Object.assign(Object.assign({}, vattrs), { class: classes, style: Object.assign(Object.assign({}, vattrs.style), { transform: `translate3d(0,${node.top}px,0)` }) }) });\n  });\n};\nVirtualScroll.style = virtualScrollCss;\n\nexport { VirtualScroll as ion_virtual_scroll };\n"]}