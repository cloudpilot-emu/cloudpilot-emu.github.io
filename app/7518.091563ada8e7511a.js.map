{"version":3,"file":"7518.091563ada8e7511a.js","mappings":"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","names":["Accordion","constructor","hostRef","_this","this","registerInstance","updateListener","updateState","state","isNext","isPrevious","value","accordionIds","disabled","readonly","toggleIcon","chevronDown","toggleIconSlot","setItemDefaults","ionItem","getSlottedHeaderIonItem","button","detail","undefined","lines","headerEl","slot","querySelector","assignedElements","find","el","tagName","setAria","expanded","getElementRoot","setAttribute","slotToggleIcon","iconEl","document","createElement","lazy","classList","add","icon","appendChild","expandAccordion","initialUpdate","contentEl","contentElWrapper","currentRaf","cancelAnimationFrame","shouldAnimate","raf","_asyncToGenerator","contentHeight","offsetHeight","waitForTransition","transitionEndAsync","style","setProperty","removeProperty","collapseAccordion","window","matchMedia","matches","config","get","accordionGroupEl","animated","accordionGroup","accordionValue","Array","isArray","includes","nextAccordion","getNextSibling","nextAccordionValue","previousAccordion","getPreviousSibling","previousAccordionValue","nextSibling","nextElementSibling","previousSibling","previousElementSibling","valueChanged","connectedCallback","_a","closest","addEventListener","disconnectedCallback","removeEventListener","componentDidLoad","toggleExpanded","requestAccordionToggle","render","mode","getIonMode","headerPart","contentPart","h","Host","key","class","t","onClick","id","part","ref","name","role","delegatesFocus","getElement","watchers","ios","md","AccordionGroup","ionChange","createEvent","ionValueChange","expand","multiple","printIonWarning","map","v","join","emit","disabledChanged","_this2","accordions","getAccordions","accordion","readonlyChanged","_this3","onKeydown","ev","_this4","activeElement","accordionEl","startingIndex","findIndex","a","findNextAccordion","findPreviousAccordion","length","focus","_this5","setValue","accordionExpand","_this6","groupValue","processedValue","filter","prevAccordion","_this7","from","querySelectorAll","i"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/ion-accordion_2.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, e as config, h, d as Host, g as getElement, c as createEvent, f as printIonWarning } from './index-4DxY6_gG.js';\nimport { g as getElementRoot, r as raf, f as addEventListener, m as removeEventListener, t as transitionEndAsync } from './helpers-8KSQQGQy.js';\nimport { l as chevronDown } from './index-DV3sJJW8.js';\nimport { b as getIonMode } from './ionic-global-CTSyufhF.js';\n\nconst accordionIosCss = \":host{display:block;position:relative;width:100%;background-color:var(--ion-background-color, #ffffff);overflow:hidden;z-index:0}:host(.accordion-expanding) ::slotted(ion-item[slot=header]),:host(.accordion-expanded) ::slotted(ion-item[slot=header]){--border-width:0px}:host(.accordion-animated){-webkit-transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}:host(.accordion-animated) #content{-webkit-transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}#content{overflow:hidden;will-change:max-height}:host(.accordion-collapsing) #content{max-height:0 !important}:host(.accordion-collapsed) #content{display:none}:host(.accordion-expanding) #content{max-height:0}:host(.accordion-expanding) #content-wrapper{overflow:auto}:host(.accordion-disabled) #header,:host(.accordion-readonly) #header,:host(.accordion-disabled) #content,:host(.accordion-readonly) #content{pointer-events:none}:host(.accordion-disabled) #header,:host(.accordion-disabled) #content{opacity:0.4}@media (prefers-reduced-motion: reduce){:host,#content{-webkit-transition:none !important;transition:none !important}}:host(.accordion-next) ::slotted(ion-item[slot=header]){--border-width:0.55px 0px 0.55px 0px}\";\n\nconst accordionMdCss = \":host{display:block;position:relative;width:100%;background-color:var(--ion-background-color, #ffffff);overflow:hidden;z-index:0}:host(.accordion-expanding) ::slotted(ion-item[slot=header]),:host(.accordion-expanded) ::slotted(ion-item[slot=header]){--border-width:0px}:host(.accordion-animated){-webkit-transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}:host(.accordion-animated) #content{-webkit-transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}#content{overflow:hidden;will-change:max-height}:host(.accordion-collapsing) #content{max-height:0 !important}:host(.accordion-collapsed) #content{display:none}:host(.accordion-expanding) #content{max-height:0}:host(.accordion-expanding) #content-wrapper{overflow:auto}:host(.accordion-disabled) #header,:host(.accordion-readonly) #header,:host(.accordion-disabled) #content,:host(.accordion-readonly) #content{pointer-events:none}:host(.accordion-disabled) #header,:host(.accordion-disabled) #content{opacity:0.4}@media (prefers-reduced-motion: reduce){:host,#content{-webkit-transition:none !important;transition:none !important}}\";\n\nconst Accordion = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.updateListener = () => this.updateState(false);\n        this.state = 1 /* AccordionState.Collapsed */;\n        this.isNext = false;\n        this.isPrevious = false;\n        /**\n         * The value of the accordion. Defaults to an autogenerated\n         * value.\n         */\n        this.value = `ion-accordion-${accordionIds++}`;\n        /**\n         * If `true`, the accordion cannot be interacted with.\n         */\n        this.disabled = false;\n        /**\n         * If `true`, the accordion cannot be interacted with,\n         * but does not alter the opacity.\n         */\n        this.readonly = false;\n        /**\n         * The toggle icon to use. This icon will be\n         * rotated when the accordion is expanded\n         * or collapsed.\n         */\n        this.toggleIcon = chevronDown;\n        /**\n         * The slot inside of `ion-item` to\n         * place the toggle icon. Defaults to `\"end\"`.\n         */\n        this.toggleIconSlot = 'end';\n        this.setItemDefaults = () => {\n            const ionItem = this.getSlottedHeaderIonItem();\n            if (!ionItem) {\n                return;\n            }\n            /**\n             * For a11y purposes, we make\n             * the ion-item a button so users\n             * can tab to it and use keyboard\n             * navigation to get around.\n             */\n            ionItem.button = true;\n            ionItem.detail = false;\n            /**\n             * By default, the lines in an\n             * item should be full here, but\n             * only do that if a user has\n             * not explicitly overridden them\n             */\n            if (ionItem.lines === undefined) {\n                ionItem.lines = 'full';\n            }\n        };\n        this.getSlottedHeaderIonItem = () => {\n            const { headerEl } = this;\n            if (!headerEl) {\n                return;\n            }\n            /**\n             * Get the first ion-item\n             * slotted in the header slot\n             */\n            const slot = headerEl.querySelector('slot');\n            if (!slot) {\n                return;\n            }\n            // This is not defined in unit tests\n            if (slot.assignedElements === undefined)\n                return;\n            return slot.assignedElements().find((el) => el.tagName === 'ION-ITEM');\n        };\n        this.setAria = (expanded = false) => {\n            const ionItem = this.getSlottedHeaderIonItem();\n            if (!ionItem) {\n                return;\n            }\n            /**\n             * Get the native <button> element inside of\n             * ion-item because that is what will be focused\n             */\n            const root = getElementRoot(ionItem);\n            const button = root.querySelector('button');\n            if (!button) {\n                return;\n            }\n            button.setAttribute('aria-expanded', `${expanded}`);\n        };\n        this.slotToggleIcon = () => {\n            const ionItem = this.getSlottedHeaderIonItem();\n            if (!ionItem) {\n                return;\n            }\n            const { toggleIconSlot, toggleIcon } = this;\n            /**\n             * Check if there already is a toggle icon.\n             * If so, do not add another one.\n             */\n            const existingToggleIcon = ionItem.querySelector('.ion-accordion-toggle-icon');\n            if (existingToggleIcon) {\n                return;\n            }\n            const iconEl = document.createElement('ion-icon');\n            iconEl.slot = toggleIconSlot;\n            iconEl.lazy = false;\n            iconEl.classList.add('ion-accordion-toggle-icon');\n            iconEl.icon = toggleIcon;\n            iconEl.setAttribute('aria-hidden', 'true');\n            ionItem.appendChild(iconEl);\n        };\n        this.expandAccordion = (initialUpdate = false) => {\n            const { contentEl, contentElWrapper } = this;\n            if (initialUpdate || contentEl === undefined || contentElWrapper === undefined) {\n                this.state = 4 /* AccordionState.Expanded */;\n                return;\n            }\n            if (this.state === 4 /* AccordionState.Expanded */) {\n                return;\n            }\n            if (this.currentRaf !== undefined) {\n                cancelAnimationFrame(this.currentRaf);\n            }\n            if (this.shouldAnimate()) {\n                raf(() => {\n                    this.state = 8 /* AccordionState.Expanding */;\n                    this.currentRaf = raf(async () => {\n                        const contentHeight = contentElWrapper.offsetHeight;\n                        const waitForTransition = transitionEndAsync(contentEl, 2000);\n                        contentEl.style.setProperty('max-height', `${contentHeight}px`);\n                        await waitForTransition;\n                        this.state = 4 /* AccordionState.Expanded */;\n                        contentEl.style.removeProperty('max-height');\n                    });\n                });\n            }\n            else {\n                this.state = 4 /* AccordionState.Expanded */;\n            }\n        };\n        this.collapseAccordion = (initialUpdate = false) => {\n            const { contentEl } = this;\n            if (initialUpdate || contentEl === undefined) {\n                this.state = 1 /* AccordionState.Collapsed */;\n                return;\n            }\n            if (this.state === 1 /* AccordionState.Collapsed */) {\n                return;\n            }\n            if (this.currentRaf !== undefined) {\n                cancelAnimationFrame(this.currentRaf);\n            }\n            if (this.shouldAnimate()) {\n                this.currentRaf = raf(async () => {\n                    const contentHeight = contentEl.offsetHeight;\n                    contentEl.style.setProperty('max-height', `${contentHeight}px`);\n                    raf(async () => {\n                        const waitForTransition = transitionEndAsync(contentEl, 2000);\n                        this.state = 2 /* AccordionState.Collapsing */;\n                        await waitForTransition;\n                        this.state = 1 /* AccordionState.Collapsed */;\n                        contentEl.style.removeProperty('max-height');\n                    });\n                });\n            }\n            else {\n                this.state = 1 /* AccordionState.Collapsed */;\n            }\n        };\n        /**\n         * Helper function to determine if\n         * something should animate.\n         * If prefers-reduced-motion is set\n         * then we should not animate, regardless\n         * of what is set in the config.\n         */\n        this.shouldAnimate = () => {\n            if (typeof window === 'undefined') {\n                return false;\n            }\n            const prefersReducedMotion = matchMedia('(prefers-reduced-motion: reduce)').matches;\n            if (prefersReducedMotion) {\n                return false;\n            }\n            const animated = config.get('animated', true);\n            if (!animated) {\n                return false;\n            }\n            if (this.accordionGroupEl && !this.accordionGroupEl.animated) {\n                return false;\n            }\n            return true;\n        };\n        this.updateState = async (initialUpdate = false) => {\n            const accordionGroup = this.accordionGroupEl;\n            const accordionValue = this.value;\n            if (!accordionGroup) {\n                return;\n            }\n            const value = accordionGroup.value;\n            const shouldExpand = Array.isArray(value) ? value.includes(accordionValue) : value === accordionValue;\n            if (shouldExpand) {\n                this.expandAccordion(initialUpdate);\n                this.isNext = this.isPrevious = false;\n            }\n            else {\n                this.collapseAccordion(initialUpdate);\n                /**\n                 * When using popout or inset,\n                 * the collapsed accordion items\n                 * may need additional border radius\n                 * applied. Check to see if the\n                 * next or previous accordion is selected.\n                 */\n                const nextAccordion = this.getNextSibling();\n                const nextAccordionValue = nextAccordion === null || nextAccordion === void 0 ? void 0 : nextAccordion.value;\n                if (nextAccordionValue !== undefined) {\n                    this.isPrevious = Array.isArray(value) ? value.includes(nextAccordionValue) : value === nextAccordionValue;\n                }\n                const previousAccordion = this.getPreviousSibling();\n                const previousAccordionValue = previousAccordion === null || previousAccordion === void 0 ? void 0 : previousAccordion.value;\n                if (previousAccordionValue !== undefined) {\n                    this.isNext = Array.isArray(value) ? value.includes(previousAccordionValue) : value === previousAccordionValue;\n                }\n            }\n        };\n        this.getNextSibling = () => {\n            if (!this.el) {\n                return;\n            }\n            const nextSibling = this.el.nextElementSibling;\n            if ((nextSibling === null || nextSibling === void 0 ? void 0 : nextSibling.tagName) !== 'ION-ACCORDION') {\n                return;\n            }\n            return nextSibling;\n        };\n        this.getPreviousSibling = () => {\n            if (!this.el) {\n                return;\n            }\n            const previousSibling = this.el.previousElementSibling;\n            if ((previousSibling === null || previousSibling === void 0 ? void 0 : previousSibling.tagName) !== 'ION-ACCORDION') {\n                return;\n            }\n            return previousSibling;\n        };\n    }\n    valueChanged() {\n        this.updateState();\n    }\n    connectedCallback() {\n        var _a;\n        const accordionGroupEl = (this.accordionGroupEl = (_a = this.el) === null || _a === void 0 ? void 0 : _a.closest('ion-accordion-group'));\n        if (accordionGroupEl) {\n            this.updateState(true);\n            addEventListener(accordionGroupEl, 'ionValueChange', this.updateListener);\n        }\n    }\n    disconnectedCallback() {\n        const accordionGroupEl = this.accordionGroupEl;\n        if (accordionGroupEl) {\n            removeEventListener(accordionGroupEl, 'ionValueChange', this.updateListener);\n        }\n    }\n    componentDidLoad() {\n        this.setItemDefaults();\n        this.slotToggleIcon();\n        /**\n         * We need to wait a tick because we\n         * just set ionItem.button = true and\n         * the button has not have been rendered yet.\n         */\n        raf(() => {\n            /**\n             * Set aria label on button inside of ion-item\n             * once the inner content has been rendered.\n             */\n            const expanded = this.state === 4 /* AccordionState.Expanded */ || this.state === 8 /* AccordionState.Expanding */;\n            this.setAria(expanded);\n        });\n    }\n    toggleExpanded() {\n        const { accordionGroupEl, disabled, readonly, value, state } = this;\n        if (disabled || readonly)\n            return;\n        if (accordionGroupEl) {\n            /**\n             * Because the accordion group may or may\n             * not allow multiple accordions open, we\n             * need to request the toggling of this\n             * accordion and the accordion group will\n             * make the decision on whether or not\n             * to allow it.\n             */\n            const expand = state === 1 /* AccordionState.Collapsed */ || state === 2 /* AccordionState.Collapsing */;\n            accordionGroupEl.requestAccordionToggle(value, expand);\n        }\n    }\n    render() {\n        const { disabled, readonly } = this;\n        const mode = getIonMode(this);\n        const expanded = this.state === 4 /* AccordionState.Expanded */ || this.state === 8 /* AccordionState.Expanding */;\n        const headerPart = expanded ? 'header expanded' : 'header';\n        const contentPart = expanded ? 'content expanded' : 'content';\n        this.setAria(expanded);\n        return (h(Host, { key: '073e1d02c18dcbc20c68648426e87c14750c031d', class: {\n                [mode]: true,\n                'accordion-expanding': this.state === 8 /* AccordionState.Expanding */,\n                'accordion-expanded': this.state === 4 /* AccordionState.Expanded */,\n                'accordion-collapsing': this.state === 2 /* AccordionState.Collapsing */,\n                'accordion-collapsed': this.state === 1 /* AccordionState.Collapsed */,\n                'accordion-next': this.isNext,\n                'accordion-previous': this.isPrevious,\n                'accordion-disabled': disabled,\n                'accordion-readonly': readonly,\n                'accordion-animated': this.shouldAnimate(),\n            } }, h(\"div\", { key: '9b4cf326de8bb6b4033992903c0c1bfd7eea9bcc', onClick: () => this.toggleExpanded(), id: \"header\", part: headerPart, \"aria-controls\": \"content\", ref: (headerEl) => (this.headerEl = headerEl) }, h(\"slot\", { key: '464c32a37f64655eacf4218284214f5f30b14a1e', name: \"header\" })), h(\"div\", { key: '8bb52e6a62d7de0106b253201a89a32e79d9a594', id: \"content\", part: contentPart, role: \"region\", \"aria-labelledby\": \"header\", ref: (contentEl) => (this.contentEl = contentEl) }, h(\"div\", { key: '1d9dfd952ad493754aaeea7a8f625b33c2dd90a0', id: \"content-wrapper\", ref: (contentElWrapper) => (this.contentElWrapper = contentElWrapper) }, h(\"slot\", { key: '970dfbc55a612d739d0ca3b7b1a08e5c96d0c479', name: \"content\" })))));\n    }\n    static get delegatesFocus() { return true; }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"value\": [\"valueChanged\"]\n    }; }\n};\nlet accordionIds = 0;\nAccordion.style = {\n    ios: accordionIosCss,\n    md: accordionMdCss\n};\n\nconst accordionGroupIosCss = \":host{display:block}:host(.accordion-group-expand-inset){-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:16px;margin-inline-end:16px;margin-top:16px;margin-bottom:16px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanding),:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanded){border-bottom:none}\";\n\nconst accordionGroupMdCss = \":host{display:block}:host(.accordion-group-expand-inset){-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:16px;margin-inline-end:16px;margin-top:16px;margin-bottom:16px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion){-webkit-box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanding),:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanded){margin-left:0;margin-right:0;margin-top:16px;margin-bottom:16px;border-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-previous){border-end-end-radius:6px;border-end-start-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-next){border-start-start-radius:6px;border-start-end-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion):first-of-type{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}\";\n\nconst AccordionGroup = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionChange = createEvent(this, \"ionChange\", 7);\n        this.ionValueChange = createEvent(this, \"ionValueChange\", 7);\n        /**\n         * If `true`, all accordions inside of the\n         * accordion group will animate when expanding\n         * or collapsing.\n         */\n        this.animated = true;\n        /**\n         * If `true`, the accordion group cannot be interacted with.\n         */\n        this.disabled = false;\n        /**\n         * If `true`, the accordion group cannot be interacted with,\n         * but does not alter the opacity.\n         */\n        this.readonly = false;\n        /**\n         * Describes the expansion behavior for each accordion.\n         * Possible values are `\"compact\"` and `\"inset\"`.\n         * Defaults to `\"compact\"`.\n         */\n        this.expand = 'compact';\n    }\n    valueChanged() {\n        const { value, multiple } = this;\n        if (!multiple && Array.isArray(value)) {\n            /**\n             * We do some processing on the `value` array so\n             * that it looks more like an array when logged to\n             * the console.\n             * Example given ['a', 'b']\n             * Default toString() behavior: a,b\n             * Custom behavior: ['a', 'b']\n             */\n            printIonWarning(`[ion-accordion-group] - An array of values was passed, but multiple is \"false\". This is incorrect usage and may result in unexpected behaviors. To dismiss this warning, pass a string to the \"value\" property when multiple=\"false\".\n\n  Value Passed: [${value.map((v) => `'${v}'`).join(', ')}]\n`, this.el);\n        }\n        /**\n         * Do not use `value` here as that will be\n         * not account for the adjustment we make above.\n         */\n        this.ionValueChange.emit({ value: this.value });\n    }\n    async disabledChanged() {\n        const { disabled } = this;\n        const accordions = await this.getAccordions();\n        for (const accordion of accordions) {\n            accordion.disabled = disabled;\n        }\n    }\n    async readonlyChanged() {\n        const { readonly } = this;\n        const accordions = await this.getAccordions();\n        for (const accordion of accordions) {\n            accordion.readonly = readonly;\n        }\n    }\n    async onKeydown(ev) {\n        const activeElement = document.activeElement;\n        if (!activeElement) {\n            return;\n        }\n        /**\n         * Make sure focus is in the header, not the body, of the accordion. This ensures\n         * that if there are any interactable elements in the body, their keyboard\n         * interaction doesn't get stolen by the accordion. Example: using up/down keys\n         * in ion-textarea.\n         */\n        const activeAccordionHeader = activeElement.closest('ion-accordion [slot=\"header\"]');\n        if (!activeAccordionHeader) {\n            return;\n        }\n        const accordionEl = activeElement.tagName === 'ION-ACCORDION' ? activeElement : activeElement.closest('ion-accordion');\n        if (!accordionEl) {\n            return;\n        }\n        const closestGroup = accordionEl.closest('ion-accordion-group');\n        if (closestGroup !== this.el) {\n            return;\n        }\n        // If the active accordion is not in the current array of accordions, do not do anything\n        const accordions = await this.getAccordions();\n        const startingIndex = accordions.findIndex((a) => a === accordionEl);\n        if (startingIndex === -1) {\n            return;\n        }\n        let accordion;\n        if (ev.key === 'ArrowDown') {\n            accordion = this.findNextAccordion(accordions, startingIndex);\n        }\n        else if (ev.key === 'ArrowUp') {\n            accordion = this.findPreviousAccordion(accordions, startingIndex);\n        }\n        else if (ev.key === 'Home') {\n            accordion = accordions[0];\n        }\n        else if (ev.key === 'End') {\n            accordion = accordions[accordions.length - 1];\n        }\n        if (accordion !== undefined && accordion !== activeElement) {\n            accordion.focus();\n        }\n    }\n    async componentDidLoad() {\n        if (this.disabled) {\n            this.disabledChanged();\n        }\n        if (this.readonly) {\n            this.readonlyChanged();\n        }\n        /**\n         * When binding values in frameworks such as Angular\n         * it is possible for the value to be set after the Web Component\n         * initializes but before the value watcher is set up in Stencil.\n         * As a result, the watcher callback may not be fired.\n         * We work around this by manually calling the watcher\n         * callback when the component has loaded and the watcher\n         * is configured.\n         */\n        this.valueChanged();\n    }\n    /**\n     * Sets the value property and emits ionChange.\n     * This should only be called when the user interacts\n     * with the accordion and not for any update\n     * to the value property. The exception is when\n     * the app sets the value of a single-select\n     * accordion group to an array.\n     */\n    setValue(accordionValue) {\n        const value = (this.value = accordionValue);\n        this.ionChange.emit({ value });\n    }\n    /**\n     * This method is used to ensure that the value\n     * of ion-accordion-group is being set in a valid\n     * way. This method should only be called in\n     * response to a user generated action.\n     * @internal\n     */\n    async requestAccordionToggle(accordionValue, accordionExpand) {\n        const { multiple, value, readonly, disabled } = this;\n        if (readonly || disabled) {\n            return;\n        }\n        if (accordionExpand) {\n            /**\n             * If group accepts multiple values\n             * check to see if value is already in\n             * in values array. If not, add it\n             * to the array.\n             */\n            if (multiple) {\n                const groupValue = value !== null && value !== void 0 ? value : [];\n                const processedValue = Array.isArray(groupValue) ? groupValue : [groupValue];\n                const valueExists = processedValue.find((v) => v === accordionValue);\n                if (valueExists === undefined && accordionValue !== undefined) {\n                    this.setValue([...processedValue, accordionValue]);\n                }\n            }\n            else {\n                this.setValue(accordionValue);\n            }\n        }\n        else {\n            /**\n             * If collapsing accordion, either filter the value\n             * out of the values array or unset the value.\n             */\n            if (multiple) {\n                const groupValue = value !== null && value !== void 0 ? value : [];\n                const processedValue = Array.isArray(groupValue) ? groupValue : [groupValue];\n                this.setValue(processedValue.filter((v) => v !== accordionValue));\n            }\n            else {\n                this.setValue(undefined);\n            }\n        }\n    }\n    findNextAccordion(accordions, startingIndex) {\n        const nextAccordion = accordions[startingIndex + 1];\n        if (nextAccordion === undefined) {\n            return accordions[0];\n        }\n        return nextAccordion;\n    }\n    findPreviousAccordion(accordions, startingIndex) {\n        const prevAccordion = accordions[startingIndex - 1];\n        if (prevAccordion === undefined) {\n            return accordions[accordions.length - 1];\n        }\n        return prevAccordion;\n    }\n    /**\n     * @internal\n     */\n    async getAccordions() {\n        return Array.from(this.el.querySelectorAll(':scope > ion-accordion'));\n    }\n    render() {\n        const { disabled, readonly, expand } = this;\n        const mode = getIonMode(this);\n        return (h(Host, { key: 'd1a79a93179474fbba66fcf11a92f4871dacc975', class: {\n                [mode]: true,\n                'accordion-group-disabled': disabled,\n                'accordion-group-readonly': readonly,\n                [`accordion-group-expand-${expand}`]: true,\n            }, role: \"presentation\" }, h(\"slot\", { key: 'e6b8954b686d1fbb4fc92adb07fddc97a24b0a31' })));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"value\": [\"valueChanged\"],\n        \"disabled\": [\"disabledChanged\"],\n        \"readonly\": [\"readonlyChanged\"]\n    }; }\n};\nAccordionGroup.style = {\n    ios: accordionGroupIosCss,\n    md: accordionGroupMdCss\n};\n\nexport { Accordion as ion_accordion, AccordionGroup as ion_accordion_group };\n"],"x_google_ignoreList":[0]}