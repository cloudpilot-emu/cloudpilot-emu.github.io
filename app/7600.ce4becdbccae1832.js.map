{"version":3,"file":"7600.ce4becdbccae1832.js","mappings":"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","names":["Segment","constructor","hostRef","registerInstance","this","ionChange","createEvent","ionSelect","ionStyle","onClick","ev","current","target","previous","checked","tagName","value","emitValueChange","scrollable","swipeGesture","checkButton","setCheckedClasses","getSegmentButton","selector","_a","_b","buttons","getButtons","filter","button","disabled","currIndex","findIndex","document","activeElement","length","activated","color","undefined","selectOnFocus","colorChanged","oldValue","emitStyle","swipeGestureChanged","gestureChanged","valueChanged","emit","scrollActiveButtonIntoView","disabledChanged","gesture","enable","connectedCallback","componentWillLoad","componentDidLoad","_this","_asyncToGenerator","raf","Promise","resolve","then","__webpack_require__","bind","createGesture","el","gestureName","gesturePriority","threshold","passive","onStart","onMove","onEnd","detail","valueBeforeGesture","activate","setNextIndex","setActivated","event","stopImmediatePropagation","Array","from","querySelectorAll","find","forEach","classList","add","remove","clicked","getIndicator","shadowRoot","querySelector","previousIndicator","currentIndicator","previousClientRect","getBoundingClientRect","currentClientRect","transform","left","width","writeTask","style","setProperty","next","smoothScroll","activeButton","scrollContainerBox","activeButtonBox","scrollBy","top","x","behavior","isEnd","rtl","isRTL","index","nextIndex","rect","currentX","previousY","height","nextEl","getRootNode","elementFromPoint","newIndex","segment","onKeyDown","keyDownSelectsButton","key","preventDefault","setFocus","render","mode","getIonMode","h","Host","role","class","createColorClasses","t","hostContext","getElement","watchers","ios","md","ids","SegmentButton","segmentEl","inheritedAttributes","updateStyle","forceUpdate","updateState","layout","type","closest","addEventListener","disconnectedCallback","removeEventListener","Object","assign","inheritAttributes","hasLabel","hasIcon","_this2","nativeEl","focus","ref","part","cssClassMap","getClassMap","classes","map","getClassList","isArray","split","c","trim","SCHEME","openURL","_ref","url","direction","animation","test","router","push","_x","_x2","_x3","_x4","apply","arguments"],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/ion-segment_2.entry.js","./node_modules/@ionic/core/dist/esm/theme-01f3f29c.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, d as createEvent, w as writeTask, h, H as Host, f as getElement, i as forceUpdate } from './index-b7d870cf.js';\nimport { r as raf, a as addEventListener, b as removeEventListener, k as inheritAttributes } from './helpers-ae653409.js';\nimport { i as isRTL } from './dir-babeabeb.js';\nimport { c as createColorClasses, h as hostContext } from './theme-01f3f29c.js';\nimport { b as getIonMode } from './ionic-global-1f99b929.js';\n\nconst segmentIosCss = \":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:grid;grid-auto-columns:1fr;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto;grid-auto-columns:minmax(-webkit-min-content, 1fr);grid-auto-columns:minmax(min-content, 1fr)}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.065);border-radius:8px;overflow:hidden;z-index:0}:host(.ion-color){background:rgba(var(--ion-color-base-rgb), 0.065)}:host(.in-toolbar){-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;width:auto}:host(.in-toolbar:not(.ion-color)){background:var(--ion-toolbar-segment-background, var(--background))}:host(.in-toolbar-color:not(.ion-color)){background:rgba(var(--ion-color-contrast-rgb), 0.11)}\";\n\nconst segmentMdCss = \":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:grid;grid-auto-columns:1fr;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto;grid-auto-columns:minmax(-webkit-min-content, 1fr);grid-auto-columns:minmax(min-content, 1fr)}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:transparent;grid-auto-columns:minmax(auto, 360px)}:host(.in-toolbar){min-height:var(--min-height)}:host(.segment-scrollable) ::slotted(ion-segment-button){min-width:auto}\";\n\nconst Segment = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionChange = createEvent(this, \"ionChange\", 7);\n        this.ionSelect = createEvent(this, \"ionSelect\", 7);\n        this.ionStyle = createEvent(this, \"ionStyle\", 7);\n        this.onClick = (ev) => {\n            const current = ev.target;\n            const previous = this.checked;\n            // If the current element is a segment then that means\n            // the user tried to swipe to a segment button and\n            // click a segment button at the same time so we should\n            // not update the checked segment button\n            if (current.tagName === 'ION-SEGMENT') {\n                return;\n            }\n            this.value = current.value;\n            if (current !== previous) {\n                this.emitValueChange();\n            }\n            if (this.scrollable || !this.swipeGesture) {\n                if (previous) {\n                    this.checkButton(previous, current);\n                }\n                else {\n                    this.setCheckedClasses();\n                }\n            }\n        };\n        this.getSegmentButton = (selector) => {\n            var _a, _b;\n            const buttons = this.getButtons().filter((button) => !button.disabled);\n            const currIndex = buttons.findIndex((button) => button === document.activeElement);\n            switch (selector) {\n                case 'first':\n                    return buttons[0];\n                case 'last':\n                    return buttons[buttons.length - 1];\n                case 'next':\n                    return (_a = buttons[currIndex + 1]) !== null && _a !== void 0 ? _a : buttons[0];\n                case 'previous':\n                    return (_b = buttons[currIndex - 1]) !== null && _b !== void 0 ? _b : buttons[buttons.length - 1];\n                default:\n                    return null;\n            }\n        };\n        this.activated = false;\n        this.color = undefined;\n        this.disabled = false;\n        this.scrollable = false;\n        this.swipeGesture = true;\n        this.value = undefined;\n        this.selectOnFocus = false;\n    }\n    colorChanged(value, oldValue) {\n        /**\n         * If color is set after not having\n         * previously been set (or vice versa),\n         * we need to emit style so the segment-buttons\n         * can apply their color classes properly.\n         */\n        if ((oldValue === undefined && value !== undefined) || (oldValue !== undefined && value === undefined)) {\n            this.emitStyle();\n        }\n    }\n    swipeGestureChanged() {\n        this.gestureChanged();\n    }\n    valueChanged(value) {\n        /**\n         * `ionSelect` is emitted every time the value changes (internal or external changes).\n         * Used by `ion-segment-button` to determine if the button should be checked.\n         */\n        this.ionSelect.emit({ value });\n        this.scrollActiveButtonIntoView();\n    }\n    disabledChanged() {\n        this.gestureChanged();\n        const buttons = this.getButtons();\n        for (const button of buttons) {\n            button.disabled = this.disabled;\n        }\n    }\n    gestureChanged() {\n        if (this.gesture) {\n            this.gesture.enable(!this.scrollable && !this.disabled && this.swipeGesture);\n        }\n    }\n    connectedCallback() {\n        this.emitStyle();\n    }\n    componentWillLoad() {\n        this.emitStyle();\n    }\n    async componentDidLoad() {\n        this.setCheckedClasses();\n        /**\n         * We need to wait for the buttons to all be rendered\n         * before we can scroll.\n         */\n        raf(() => {\n            /**\n             * When the segment loads for the first\n             * time we just want to snap the active button into\n             * place instead of scroll. Smooth scrolling should only\n             * happen when the user interacts with the segment.\n             */\n            this.scrollActiveButtonIntoView(false);\n        });\n        this.gesture = (await import('./index-2cf77112.js')).createGesture({\n            el: this.el,\n            gestureName: 'segment',\n            gesturePriority: 100,\n            threshold: 0,\n            passive: false,\n            onStart: (ev) => this.onStart(ev),\n            onMove: (ev) => this.onMove(ev),\n            onEnd: (ev) => this.onEnd(ev),\n        });\n        this.gestureChanged();\n        if (this.disabled) {\n            this.disabledChanged();\n        }\n    }\n    onStart(detail) {\n        this.valueBeforeGesture = this.value;\n        this.activate(detail);\n    }\n    onMove(detail) {\n        this.setNextIndex(detail);\n    }\n    onEnd(detail) {\n        this.setActivated(false);\n        this.setNextIndex(detail, true);\n        detail.event.stopImmediatePropagation();\n        const value = this.value;\n        if (value !== undefined) {\n            if (this.valueBeforeGesture !== value) {\n                this.emitValueChange();\n            }\n        }\n        this.valueBeforeGesture = undefined;\n    }\n    /**\n     * Emits an `ionChange` event.\n     *\n     * This API should be called for user committed changes.\n     * This API should not be used for external value changes.\n     */\n    emitValueChange() {\n        const { value } = this;\n        this.ionChange.emit({ value });\n    }\n    getButtons() {\n        return Array.from(this.el.querySelectorAll('ion-segment-button'));\n    }\n    get checked() {\n        return this.getButtons().find((button) => button.value === this.value);\n    }\n    /*\n     * Activate both the segment and the buttons\n     * due to a bug with ::slotted in Safari\n     */\n    setActivated(activated) {\n        const buttons = this.getButtons();\n        buttons.forEach((button) => {\n            if (activated) {\n                button.classList.add('segment-button-activated');\n            }\n            else {\n                button.classList.remove('segment-button-activated');\n            }\n        });\n        this.activated = activated;\n    }\n    activate(detail) {\n        const clicked = detail.event.target;\n        const buttons = this.getButtons();\n        const checked = buttons.find((button) => button.value === this.value);\n        // Make sure we are only checking for activation on a segment button\n        // since disabled buttons will get the click on the segment\n        if (clicked.tagName !== 'ION-SEGMENT-BUTTON') {\n            return;\n        }\n        // If there are no checked buttons, set the current button to checked\n        if (!checked) {\n            this.value = clicked.value;\n            this.setCheckedClasses();\n        }\n        // If the gesture began on the clicked button with the indicator\n        // then we should activate the indicator\n        if (this.value === clicked.value) {\n            this.setActivated(true);\n        }\n    }\n    getIndicator(button) {\n        const root = button.shadowRoot || button;\n        return root.querySelector('.segment-button-indicator');\n    }\n    checkButton(previous, current) {\n        const previousIndicator = this.getIndicator(previous);\n        const currentIndicator = this.getIndicator(current);\n        if (previousIndicator === null || currentIndicator === null) {\n            return;\n        }\n        const previousClientRect = previousIndicator.getBoundingClientRect();\n        const currentClientRect = currentIndicator.getBoundingClientRect();\n        const widthDelta = previousClientRect.width / currentClientRect.width;\n        const xPosition = previousClientRect.left - currentClientRect.left;\n        // Scale the indicator width to match the previous indicator width\n        // and translate it on top of the previous indicator\n        const transform = `translate3d(${xPosition}px, 0, 0) scaleX(${widthDelta})`;\n        writeTask(() => {\n            // Remove the transition before positioning on top of the previous indicator\n            currentIndicator.classList.remove('segment-button-indicator-animated');\n            currentIndicator.style.setProperty('transform', transform);\n            // Force a repaint to ensure the transform happens\n            currentIndicator.getBoundingClientRect();\n            // Add the transition to move the indicator into place\n            currentIndicator.classList.add('segment-button-indicator-animated');\n            // Remove the transform to slide the indicator back to the button clicked\n            currentIndicator.style.setProperty('transform', '');\n        });\n        this.value = current.value;\n        this.setCheckedClasses();\n    }\n    setCheckedClasses() {\n        const buttons = this.getButtons();\n        const index = buttons.findIndex((button) => button.value === this.value);\n        const next = index + 1;\n        for (const button of buttons) {\n            button.classList.remove('segment-button-after-checked');\n        }\n        if (next < buttons.length) {\n            buttons[next].classList.add('segment-button-after-checked');\n        }\n    }\n    scrollActiveButtonIntoView(smoothScroll = true) {\n        const { scrollable, value, el } = this;\n        if (scrollable) {\n            const buttons = this.getButtons();\n            const activeButton = buttons.find((button) => button.value === value);\n            if (activeButton !== undefined) {\n                const scrollContainerBox = el.getBoundingClientRect();\n                const activeButtonBox = activeButton.getBoundingClientRect();\n                /**\n                 * Subtract the active button x position from the scroll\n                 * container x position. This will give us the x position\n                 * of the active button within the scroll container.\n                 */\n                const activeButtonLeft = activeButtonBox.x - scrollContainerBox.x;\n                /**\n                 * If we just used activeButtonLeft, then the active button\n                 * would be aligned with the left edge of the scroll container.\n                 * Instead, we want the segment button to be centered. As a result,\n                 * we subtract half of the scroll container width. This will position\n                 * the left edge of the active button at the midpoint of the scroll container.\n                 * We then add half of the active button width. This will position the active\n                 * button such that the midpoint of the active button is at the midpoint of the\n                 * scroll container.\n                 */\n                const centeredX = activeButtonLeft - scrollContainerBox.width / 2 + activeButtonBox.width / 2;\n                /**\n                 * We intentionally use scrollBy here instead of scrollIntoView\n                 * to avoid a WebKit bug where accelerated animations break\n                 * when using scrollIntoView. Using scrollIntoView will cause the\n                 * segment container to jump during the transition and then snap into place.\n                 * This is because scrollIntoView can potentially cause parent element\n                 * containers to also scroll. scrollBy does not have this same behavior, so\n                 * we use this API instead.\n                 *\n                 * Note that if there is not enough scrolling space to center the element\n                 * within the scroll container, the browser will attempt\n                 * to center by as much as it can.\n                 */\n                el.scrollBy({\n                    top: 0,\n                    left: centeredX,\n                    behavior: smoothScroll ? 'smooth' : 'instant',\n                });\n            }\n        }\n    }\n    setNextIndex(detail, isEnd = false) {\n        const rtl = isRTL(this.el);\n        const activated = this.activated;\n        const buttons = this.getButtons();\n        const index = buttons.findIndex((button) => button.value === this.value);\n        const previous = buttons[index];\n        let current;\n        let nextIndex;\n        if (index === -1) {\n            return;\n        }\n        // Get the element that the touch event started on in case\n        // it was the checked button, then we will move the indicator\n        const rect = previous.getBoundingClientRect();\n        const left = rect.left;\n        const width = rect.width;\n        // Get the element that the gesture is on top of based on the currentX of the\n        // gesture event and the Y coordinate of the starting element, since the gesture\n        // can move up and down off of the segment\n        const currentX = detail.currentX;\n        const previousY = rect.top + rect.height / 2;\n        /**\n         * Segment can be used inside the shadow dom\n         * so doing document.elementFromPoint would never\n         * return a segment button in that instance.\n         * We use getRootNode to which will return the parent\n         * shadow root if used inside a shadow component and\n         * returns document otherwise.\n         */\n        const root = this.el.getRootNode();\n        const nextEl = root.elementFromPoint(currentX, previousY);\n        const decreaseIndex = rtl ? currentX > left + width : currentX < left;\n        const increaseIndex = rtl ? currentX < left : currentX > left + width;\n        // If the indicator is currently activated then we have started the gesture\n        // on top of the checked button so we need to slide the indicator\n        // by checking the button next to it as we move\n        if (activated && !isEnd) {\n            // Decrease index, move left in LTR & right in RTL\n            if (decreaseIndex) {\n                const newIndex = index - 1;\n                if (newIndex >= 0) {\n                    nextIndex = newIndex;\n                }\n                // Increase index, moves right in LTR & left in RTL\n            }\n            else if (increaseIndex) {\n                if (activated && !isEnd) {\n                    const newIndex = index + 1;\n                    if (newIndex < buttons.length) {\n                        nextIndex = newIndex;\n                    }\n                }\n            }\n            if (nextIndex !== undefined && !buttons[nextIndex].disabled) {\n                current = buttons[nextIndex];\n            }\n        }\n        // If the indicator is not activated then we will just set the indicator\n        // to the element where the gesture ended\n        if (!activated && isEnd) {\n            current = nextEl;\n        }\n        if (current != null) {\n            /**\n             * If current element is ion-segment then that means\n             * user tried to select a disabled ion-segment-button,\n             * and we should not update the ripple.\n             */\n            if (current.tagName === 'ION-SEGMENT') {\n                return false;\n            }\n            if (previous !== current) {\n                this.checkButton(previous, current);\n            }\n        }\n        return true;\n    }\n    emitStyle() {\n        this.ionStyle.emit({\n            segment: true,\n        });\n    }\n    onKeyDown(ev) {\n        const rtl = isRTL(this.el);\n        let keyDownSelectsButton = this.selectOnFocus;\n        let current;\n        switch (ev.key) {\n            case 'ArrowRight':\n                ev.preventDefault();\n                current = rtl ? this.getSegmentButton('previous') : this.getSegmentButton('next');\n                break;\n            case 'ArrowLeft':\n                ev.preventDefault();\n                current = rtl ? this.getSegmentButton('next') : this.getSegmentButton('previous');\n                break;\n            case 'Home':\n                ev.preventDefault();\n                current = this.getSegmentButton('first');\n                break;\n            case 'End':\n                ev.preventDefault();\n                current = this.getSegmentButton('last');\n                break;\n            case ' ':\n            case 'Enter':\n                ev.preventDefault();\n                current = document.activeElement;\n                keyDownSelectsButton = true;\n        }\n        if (!current) {\n            return;\n        }\n        if (keyDownSelectsButton) {\n            const previous = this.checked;\n            this.checkButton(previous || current, current);\n            if (current !== previous) {\n                this.emitValueChange();\n            }\n        }\n        current.setFocus();\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { role: \"tablist\", onClick: this.onClick, class: createColorClasses(this.color, {\n                [mode]: true,\n                'in-toolbar': hostContext('ion-toolbar', this.el),\n                'in-toolbar-color': hostContext('ion-toolbar[color]', this.el),\n                'segment-activated': this.activated,\n                'segment-disabled': this.disabled,\n                'segment-scrollable': this.scrollable,\n            }) }, h(\"slot\", null)));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"color\": [\"colorChanged\"],\n        \"swipeGesture\": [\"swipeGestureChanged\"],\n        \"value\": [\"valueChanged\"],\n        \"disabled\": [\"disabledChanged\"]\n    }; }\n};\nSegment.style = {\n    ios: segmentIosCss,\n    md: segmentMdCss\n};\n\nconst segmentButtonIosCss = \":host{--color:initial;--color-hover:var(--color);--color-checked:var(--color);--color-disabled:var(--color);--padding-start:0;--padding-end:0;--padding-top:0;--padding-bottom:0;border-radius:var(--border-radius);display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:column;flex-direction:column;height:auto;background:var(--background);color:var(--color);text-decoration:none;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;grid-row:1;-webkit-font-kerning:none;font-kerning:none}.button-native{border-radius:0;font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;-webkit-margin-start:var(--margin-start);margin-inline-start:var(--margin-start);-webkit-margin-end:var(--margin-end);margin-inline-end:var(--margin-end);margin-top:var(--margin-top);margin-bottom:var(--margin-bottom);-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);-webkit-transform:translate3d(0,  0,  0);transform:translate3d(0,  0,  0);display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:inherit;flex-direction:inherit;-ms-flex-positive:1;flex-grow:1;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;min-width:inherit;max-width:inherit;height:auto;min-height:inherit;max-height:inherit;-webkit-transition:var(--transition);transition:var(--transition);border:none;outline:none;background:transparent;contain:content;pointer-events:none;overflow:hidden;z-index:2}.button-native::after{left:0;right:0;top:0;bottom:0;position:absolute;content:\\\"\\\";opacity:0}.button-inner{display:-ms-flexbox;display:flex;position:relative;-ms-flex-flow:inherit;flex-flow:inherit;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;z-index:1}:host(.segment-button-checked){background:var(--background-checked);color:var(--color-checked)}:host(.segment-button-disabled){cursor:default;pointer-events:none}:host(.ion-focused) .button-native{color:var(--color-focused)}:host(.ion-focused) .button-native::after{background:var(--background-focused);opacity:var(--background-focused-opacity)}:host(:focus){outline:none}@media (any-hover: hover){:host(:hover) .button-native{color:var(--color-hover)}:host(:hover) .button-native::after{background:var(--background-hover);opacity:var(--background-hover-opacity)}:host(.segment-button-checked:hover) .button-native{color:var(--color-checked)}}::slotted(ion-icon){-ms-flex-negative:0;flex-shrink:0;-ms-flex-order:-1;order:-1;pointer-events:none}::slotted(ion-label){display:block;-ms-flex-item-align:center;align-self:center;max-width:100%;line-height:22px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;-webkit-box-sizing:border-box;box-sizing:border-box;pointer-events:none}:host(.segment-button-layout-icon-top) .button-native{-ms-flex-direction:column;flex-direction:column}:host(.segment-button-layout-icon-start) .button-native{-ms-flex-direction:row;flex-direction:row}:host(.segment-button-layout-icon-end) .button-native{-ms-flex-direction:row-reverse;flex-direction:row-reverse}:host(.segment-button-layout-icon-bottom) .button-native{-ms-flex-direction:column-reverse;flex-direction:column-reverse}:host(.segment-button-layout-icon-hide) ::slotted(ion-icon){display:none}:host(.segment-button-layout-label-hide) ::slotted(ion-label){display:none}ion-ripple-effect{color:var(--ripple-color, var(--color-checked))}.segment-button-indicator{-webkit-transform-origin:left;transform-origin:left;position:absolute;opacity:0;-webkit-box-sizing:border-box;box-sizing:border-box;will-change:transform, opacity;pointer-events:none}.segment-button-indicator-background{width:100%;height:var(--indicator-height);-webkit-transform:var(--indicator-transform);transform:var(--indicator-transform);-webkit-box-shadow:var(--indicator-box-shadow);box-shadow:var(--indicator-box-shadow);pointer-events:none}.segment-button-indicator-animated{-webkit-transition:var(--indicator-transition);transition:var(--indicator-transition)}:host(.segment-button-checked) .segment-button-indicator{opacity:1}@media (prefers-reduced-motion: reduce){.segment-button-indicator-background{-webkit-transform:none;transform:none}.segment-button-indicator-animated{-webkit-transition:none;transition:none}}:host{--background:none;--background-checked:none;--background-hover:none;--background-hover-opacity:0;--background-focused:none;--background-focused-opacity:0;--border-radius:7px;--border-width:1px;--border-color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.12);--border-style:solid;--indicator-box-shadow:0 0 5px rgba(0, 0, 0, 0.16);--indicator-color:var(--ion-color-step-350, var(--ion-background-color, #fff));--indicator-height:100%;--indicator-transition:transform 260ms cubic-bezier(0.4, 0, 0.2, 1);--indicator-transform:none;--transition:100ms all linear;--padding-top:0;--padding-end:13px;--padding-bottom:0;--padding-start:13px;margin-top:2px;margin-bottom:2px;position:relative;-ms-flex-direction:row;flex-direction:row;min-width:70px;min-height:28px;-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);font-size:13px;font-weight:450;line-height:37px}:host::before{margin-left:0;margin-right:0;margin-top:5px;margin-bottom:5px;-webkit-transition:160ms opacity ease-in-out;transition:160ms opacity ease-in-out;-webkit-transition-delay:100ms;transition-delay:100ms;border-left:var(--border-width) var(--border-style) var(--border-color);content:\\\"\\\";opacity:1;will-change:opacity}:host(:first-of-type)::before{border-left-color:transparent}:host(.segment-button-disabled){opacity:0.3}::slotted(ion-icon){font-size:24px}:host(.segment-button-layout-icon-start) ::slotted(ion-label){-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:0;margin-inline-end:0}:host(.segment-button-layout-icon-end) ::slotted(ion-label){-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:2px;margin-inline-end:2px}.segment-button-indicator{-webkit-padding-start:2px;padding-inline-start:2px;-webkit-padding-end:2px;padding-inline-end:2px;left:0;right:0;top:0;bottom:0}.segment-button-indicator-background{border-radius:var(--border-radius);background:var(--indicator-color)}.segment-button-indicator-background{-webkit-transition:var(--indicator-transition);transition:var(--indicator-transition)}:host(.segment-button-checked)::before,:host(.segment-button-after-checked)::before{opacity:0}:host(.segment-button-checked){z-index:-1}:host(.segment-button-activated){--indicator-transform:scale(0.95)}:host(.ion-focused) .button-native{opacity:0.7}@media (any-hover: hover){:host(:hover) .button-native{opacity:0.5}:host(.segment-button-checked:hover) .button-native{opacity:1}}:host(.in-segment-color){background:none;color:var(--ion-text-color, #000)}:host(.in-segment-color) .segment-button-indicator-background{background:var(--ion-color-step-350, var(--ion-background-color, #fff))}@media (any-hover: hover){:host(.in-segment-color:hover) .button-native,:host(.in-segment-color.segment-button-checked:hover) .button-native{color:var(--ion-text-color, #000)}}:host(.in-toolbar:not(.in-segment-color)){--background-checked:var(--ion-toolbar-segment-background-checked, none);--color:var(--ion-toolbar-segment-color, var(--ion-toolbar-color), initial);--color-checked:var(--ion-toolbar-segment-color-checked, var(--ion-toolbar-color), initial);--indicator-color:var(--ion-toolbar-segment-indicator-color, var(--ion-color-step-350, var(--ion-background-color, #fff)))}:host(.in-toolbar-color) .segment-button-indicator-background{background:var(--ion-color-contrast)}:host(.in-toolbar-color:not(.in-segment-color)) .button-native{color:var(--ion-color-contrast)}:host(.in-toolbar-color.segment-button-checked:not(.in-segment-color)) .button-native{color:var(--ion-color-base)}@media (any-hover: hover){:host(.in-toolbar-color:not(.in-segment-color):hover) .button-native{color:var(--ion-color-contrast)}:host(.in-toolbar-color.segment-button-checked:not(.in-segment-color):hover) .button-native{color:var(--ion-color-base)}}\";\n\nconst segmentButtonMdCss = \":host{--color:initial;--color-hover:var(--color);--color-checked:var(--color);--color-disabled:var(--color);--padding-start:0;--padding-end:0;--padding-top:0;--padding-bottom:0;border-radius:var(--border-radius);display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:column;flex-direction:column;height:auto;background:var(--background);color:var(--color);text-decoration:none;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;grid-row:1;-webkit-font-kerning:none;font-kerning:none}.button-native{border-radius:0;font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;-webkit-margin-start:var(--margin-start);margin-inline-start:var(--margin-start);-webkit-margin-end:var(--margin-end);margin-inline-end:var(--margin-end);margin-top:var(--margin-top);margin-bottom:var(--margin-bottom);-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);-webkit-transform:translate3d(0,  0,  0);transform:translate3d(0,  0,  0);display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:inherit;flex-direction:inherit;-ms-flex-positive:1;flex-grow:1;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;min-width:inherit;max-width:inherit;height:auto;min-height:inherit;max-height:inherit;-webkit-transition:var(--transition);transition:var(--transition);border:none;outline:none;background:transparent;contain:content;pointer-events:none;overflow:hidden;z-index:2}.button-native::after{left:0;right:0;top:0;bottom:0;position:absolute;content:\\\"\\\";opacity:0}.button-inner{display:-ms-flexbox;display:flex;position:relative;-ms-flex-flow:inherit;flex-flow:inherit;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;z-index:1}:host(.segment-button-checked){background:var(--background-checked);color:var(--color-checked)}:host(.segment-button-disabled){cursor:default;pointer-events:none}:host(.ion-focused) .button-native{color:var(--color-focused)}:host(.ion-focused) .button-native::after{background:var(--background-focused);opacity:var(--background-focused-opacity)}:host(:focus){outline:none}@media (any-hover: hover){:host(:hover) .button-native{color:var(--color-hover)}:host(:hover) .button-native::after{background:var(--background-hover);opacity:var(--background-hover-opacity)}:host(.segment-button-checked:hover) .button-native{color:var(--color-checked)}}::slotted(ion-icon){-ms-flex-negative:0;flex-shrink:0;-ms-flex-order:-1;order:-1;pointer-events:none}::slotted(ion-label){display:block;-ms-flex-item-align:center;align-self:center;max-width:100%;line-height:22px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;-webkit-box-sizing:border-box;box-sizing:border-box;pointer-events:none}:host(.segment-button-layout-icon-top) .button-native{-ms-flex-direction:column;flex-direction:column}:host(.segment-button-layout-icon-start) .button-native{-ms-flex-direction:row;flex-direction:row}:host(.segment-button-layout-icon-end) .button-native{-ms-flex-direction:row-reverse;flex-direction:row-reverse}:host(.segment-button-layout-icon-bottom) .button-native{-ms-flex-direction:column-reverse;flex-direction:column-reverse}:host(.segment-button-layout-icon-hide) ::slotted(ion-icon){display:none}:host(.segment-button-layout-label-hide) ::slotted(ion-label){display:none}ion-ripple-effect{color:var(--ripple-color, var(--color-checked))}.segment-button-indicator{-webkit-transform-origin:left;transform-origin:left;position:absolute;opacity:0;-webkit-box-sizing:border-box;box-sizing:border-box;will-change:transform, opacity;pointer-events:none}.segment-button-indicator-background{width:100%;height:var(--indicator-height);-webkit-transform:var(--indicator-transform);transform:var(--indicator-transform);-webkit-box-shadow:var(--indicator-box-shadow);box-shadow:var(--indicator-box-shadow);pointer-events:none}.segment-button-indicator-animated{-webkit-transition:var(--indicator-transition);transition:var(--indicator-transition)}:host(.segment-button-checked) .segment-button-indicator{opacity:1}@media (prefers-reduced-motion: reduce){.segment-button-indicator-background{-webkit-transform:none;transform:none}.segment-button-indicator-animated{-webkit-transition:none;transition:none}}:host{--background:none;--background-checked:none;--background-hover:var(--color-checked);--background-focused:var(--color-checked);--background-activated-opacity:0;--background-focused-opacity:.12;--background-hover-opacity:.04;--color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6);--color-checked:var(--ion-color-primary, #3880ff);--indicator-box-shadow:none;--indicator-color:var(--color-checked);--indicator-height:2px;--indicator-transition:transform 250ms cubic-bezier(0.4, 0, 0.2, 1);--indicator-transform:none;--padding-top:0;--padding-end:16px;--padding-bottom:0;--padding-start:16px;--transition:color 0.15s linear 0s, opacity 0.15s linear 0s;min-width:90px;min-height:48px;border-width:var(--border-width);border-style:var(--border-style);border-color:var(--border-color);font-size:14px;font-weight:500;letter-spacing:0.06em;line-height:40px;text-transform:uppercase}:host(.segment-button-disabled){opacity:0.3}:host(.in-segment-color){background:none;color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6)}:host(.in-segment-color) ion-ripple-effect{color:var(--ion-color-base)}:host(.in-segment-color) .segment-button-indicator-background{background:var(--ion-color-base)}:host(.in-segment-color.segment-button-checked) .button-native{color:var(--ion-color-base)}:host(.in-segment-color.ion-focused) .button-native::after{background:var(--ion-color-base)}@media (any-hover: hover){:host(.in-segment-color:hover) .button-native{color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6)}:host(.in-segment-color:hover) .button-native::after{background:var(--ion-color-base)}:host(.in-segment-color.segment-button-checked:hover) .button-native{color:var(--ion-color-base)}}:host(.in-toolbar:not(.in-segment-color)){--background:var(--ion-toolbar-segment-background, none);--background-checked:var(--ion-toolbar-segment-background-checked, none);--color:var(--ion-toolbar-segment-color, rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6));--color-checked:var(--ion-toolbar-segment-color-checked, var(--ion-color-primary, #3880ff));--indicator-color:var(--ion-toolbar-segment-color-checked, var(--color-checked))}:host(.in-toolbar-color:not(.in-segment-color)) .button-native{color:rgba(var(--ion-color-contrast-rgb), 0.6)}:host(.in-toolbar-color.segment-button-checked:not(.in-segment-color)) .button-native{color:var(--ion-color-contrast)}@media (any-hover: hover){:host(.in-toolbar-color:not(.in-segment-color)) .button-native::after{background:var(--ion-color-contrast)}}::slotted(ion-icon){margin-top:12px;margin-bottom:12px;font-size:24px}::slotted(ion-label){margin-top:12px;margin-bottom:12px}:host(.segment-button-layout-icon-top) ::slotted(ion-label),:host(.segment-button-layout-icon-bottom) ::slotted(ion-icon){margin-top:0}:host(.segment-button-layout-icon-top) ::slotted(ion-icon),:host(.segment-button-layout-icon-bottom) ::slotted(ion-label){margin-bottom:0}:host(.segment-button-layout-icon-start) ::slotted(ion-label){-webkit-margin-start:8px;margin-inline-start:8px;-webkit-margin-end:0;margin-inline-end:0}:host(.segment-button-layout-icon-end) ::slotted(ion-label){-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:8px;margin-inline-end:8px}:host(.segment-button-has-icon-only) ::slotted(ion-icon){margin-top:12px;margin-bottom:12px}:host(.segment-button-has-label-only) ::slotted(ion-label){margin-top:12px;margin-bottom:12px}.segment-button-indicator{left:0;right:0;bottom:0}.segment-button-indicator-background{background:var(--indicator-color)}:host(.in-toolbar:not(.in-segment-color)) .segment-button-indicator-background{background:var(--ion-toolbar-segment-indicator-color, var(--indicator-color))}:host(.in-toolbar-color:not(.in-segment-color)) .segment-button-indicator-background{background:var(--ion-color-contrast)}\";\n\nlet ids = 0;\nconst SegmentButton = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.segmentEl = null;\n        this.inheritedAttributes = {};\n        this.updateStyle = () => {\n            forceUpdate(this);\n        };\n        this.updateState = () => {\n            const { segmentEl } = this;\n            if (segmentEl) {\n                this.checked = segmentEl.value === this.value;\n                if (segmentEl.disabled) {\n                    this.disabled = true;\n                }\n            }\n        };\n        this.checked = false;\n        this.disabled = false;\n        this.layout = 'icon-top';\n        this.type = 'button';\n        this.value = 'ion-sb-' + ids++;\n    }\n    valueChanged() {\n        this.updateState();\n    }\n    connectedCallback() {\n        const segmentEl = (this.segmentEl = this.el.closest('ion-segment'));\n        if (segmentEl) {\n            this.updateState();\n            addEventListener(segmentEl, 'ionSelect', this.updateState);\n            addEventListener(segmentEl, 'ionStyle', this.updateStyle);\n        }\n    }\n    disconnectedCallback() {\n        const segmentEl = this.segmentEl;\n        if (segmentEl) {\n            removeEventListener(segmentEl, 'ionSelect', this.updateState);\n            removeEventListener(segmentEl, 'ionStyle', this.updateStyle);\n            this.segmentEl = null;\n        }\n    }\n    componentWillLoad() {\n        this.inheritedAttributes = Object.assign({}, inheritAttributes(this.el, ['aria-label']));\n    }\n    get hasLabel() {\n        return !!this.el.querySelector('ion-label');\n    }\n    get hasIcon() {\n        return !!this.el.querySelector('ion-icon');\n    }\n    /**\n     * @internal\n     * Focuses the native <button> element\n     * inside of ion-segment-button.\n     */\n    async setFocus() {\n        const { nativeEl } = this;\n        if (nativeEl !== undefined) {\n            nativeEl.focus();\n        }\n    }\n    render() {\n        const { checked, type, disabled, hasIcon, hasLabel, layout, segmentEl } = this;\n        const mode = getIonMode(this);\n        const hasSegmentColor = () => (segmentEl === null || segmentEl === void 0 ? void 0 : segmentEl.color) !== undefined;\n        return (h(Host, { class: {\n                [mode]: true,\n                'in-toolbar': hostContext('ion-toolbar', this.el),\n                'in-toolbar-color': hostContext('ion-toolbar[color]', this.el),\n                'in-segment': hostContext('ion-segment', this.el),\n                'in-segment-color': hasSegmentColor(),\n                'segment-button-has-label': hasLabel,\n                'segment-button-has-icon': hasIcon,\n                'segment-button-has-label-only': hasLabel && !hasIcon,\n                'segment-button-has-icon-only': hasIcon && !hasLabel,\n                'segment-button-disabled': disabled,\n                'segment-button-checked': checked,\n                [`segment-button-layout-${layout}`]: true,\n                'ion-activatable': true,\n                'ion-activatable-instant': true,\n                'ion-focusable': true,\n            } }, h(\"button\", Object.assign({ \"aria-selected\": checked ? 'true' : 'false', role: \"tab\", ref: (el) => (this.nativeEl = el), type: type, class: \"button-native\", part: \"native\", disabled: disabled }, this.inheritedAttributes), h(\"span\", { class: \"button-inner\" }, h(\"slot\", null)), mode === 'md' && h(\"ion-ripple-effect\", null)), h(\"div\", { part: \"indicator\", class: {\n                'segment-button-indicator': true,\n                'segment-button-indicator-animated': true,\n            } }, h(\"div\", { part: \"indicator-background\", class: \"segment-button-indicator-background\" }))));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"value\": [\"valueChanged\"]\n    }; }\n};\nSegmentButton.style = {\n    ios: segmentButtonIosCss,\n    md: segmentButtonMdCss\n};\n\nexport { Segment as ion_segment, SegmentButton as ion_segment_button };\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nconst hostContext = (selector, el) => {\n    return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color, cssClassMap) => {\n    return typeof color === 'string' && color.length > 0\n        ? Object.assign({ 'ion-color': true, [`ion-color-${color}`]: true }, cssClassMap) : cssClassMap;\n};\nconst getClassList = (classes) => {\n    if (classes !== undefined) {\n        const array = Array.isArray(classes) ? classes : classes.split(' ');\n        return array\n            .filter((c) => c != null)\n            .map((c) => c.trim())\n            .filter((c) => c !== '');\n    }\n    return [];\n};\nconst getClassMap = (classes) => {\n    const map = {};\n    getClassList(classes).forEach((c) => (map[c] = true));\n    return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction, animation) => {\n    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n        const router = document.querySelector('ion-router');\n        if (router) {\n            if (ev != null) {\n                ev.preventDefault();\n            }\n            return router.push(url, direction, animation);\n        }\n    }\n    return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n"],"x_google_ignoreList":[0,1]}