{"version":3,"mappings":"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","names":["Route","constructor","hostRef","registerInstance","this","ionRouteDataChanged","createEvent","url","onUpdate","newValue","emit","onComponentProps","oldValue","keys1","Object","keys","keys2","length","key","connectedCallback","watchers","component","componentProps","RouteRedirect","ionRouteRedirectChanged","propDidChange","from","to","ROUTER_INTENT_NONE","ROUTER_INTENT_FORWARD","generatePath","segments","filter","s","join","parsePath","path","queryString","qsStart","indexOf","substr","split","map","trim","writeNavState","root","chain","direction","index","changed","animation","outlet","searchNavNode","Promise","resolve","componentOnReady","route","result","setRouteId","id","params","element","markVisible","e","console","error","readNavState","ids","node","getRouteId","undefined","push","QUERY","matches","querySelector","findRouteRedirect","redirects","find","redirect","i","expected","matchesRedirect","matchesIDs","len","Math","min","score","routeId","routeChain","toLowerCase","routeIdParams","pathWithParams","j","matchesPath","inputPath","RouterSegments","allparams","matchesDefault","segment","data","next","slice","mergeParams","beforeEnter","beforeLeave","a","b","assign","routerPathToChain","chains","match","matchedChain","computePriority","level","pow","shift","readProp","el","prop","hasAttribute","getAttribute","readRedirects","Array","children","tagName","readRoutes","flattenRouterTree","readRouteNodes","nodes","flattenNode","child","Router","ionRouteWillChange","ionRouteDidChange","previousPath","busy","state","lastState","useHash","componentWillLoad","document","body","window","addEventListener","once","canProceed","t","runGuards","getPath","setPath","writeNavStateRoot","onRoutesChanged","componentDidLoad","debounce","onRedirectChanged","bind","onPopState","historyDirection","onBackButton","ev","detail","register","processNextHandler","back","canTransition","startsWith","URL","location","href","pathname","parsedPath","r","history","waitPromise","printDebug","routes","group","forEach","debug","groupEnd","printRoutes","printRedirects","navChanged","warn","maxMatches","routerIDsToChain","param","chainToPath","safeWriteNavState","_a","win","replaceState","title","redirectFrom","unlock","lock","p","n","fromChain","beforeLeaveHook","canLeave","toChain","beforeEnterHook","routeEvent","routeChangeEvent","generateUrl","pushState","writePath","loc","prefix","hash","removePrefix","readPath","redirectFromPath","redirectedFrom","getElement","RouterLink","routerDirection","onClick","openURL","routerAnimation","render","mode","getIonMode","attrs","rel","target","h","Host","class","createColorClasses","color","style"],"sources":["./node_modules/@ionic/core/dist/esm/ion-route_4.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, e as createEvent, i as getElement, h, H as Host } from './index-06cd27b1.js';\nimport { c as componentOnReady, o as debounce } from './helpers-eed79a2b.js';\nimport { b as getIonMode } from './ionic-global-a049bcbf.js';\nimport { o as openURL, c as createColorClasses } from './theme-a24ff1ad.js';\n\nlet Route = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\n    /**\n     * Relative path that needs to match in order for this route to apply.\n     *\n     * Accepts paths similar to expressjs so that you can define parameters\n     * in the url /foo/:bar where bar would be available in incoming props.\n     */\n    this.url = '';\n  }\n  onUpdate(newValue) {\n    this.ionRouteDataChanged.emit(newValue);\n  }\n  onComponentProps(newValue, oldValue) {\n    if (newValue === oldValue) {\n      return;\n    }\n    const keys1 = newValue ? Object.keys(newValue) : [];\n    const keys2 = oldValue ? Object.keys(oldValue) : [];\n    if (keys1.length !== keys2.length) {\n      this.onUpdate(newValue);\n      return;\n    }\n    for (const key of keys1) {\n      if (newValue[key] !== oldValue[key]) {\n        this.onUpdate(newValue);\n        return;\n      }\n    }\n  }\n  connectedCallback() {\n    this.ionRouteDataChanged.emit();\n  }\n  static get watchers() { return {\n    \"url\": [\"onUpdate\"],\n    \"component\": [\"onUpdate\"],\n    \"componentProps\": [\"onComponentProps\"]\n  }; }\n};\n\nlet RouteRedirect = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\n  }\n  propDidChange() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  connectedCallback() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  static get watchers() { return {\n    \"from\": [\"propDidChange\"],\n    \"to\": [\"propDidChange\"]\n  }; }\n};\n\nconst ROUTER_INTENT_NONE = 'root';\nconst ROUTER_INTENT_FORWARD = 'forward';\nconst ROUTER_INTENT_BACK = 'back';\n\n// Join the non empty segments with \"/\".\nconst generatePath = (segments) => {\n  const path = segments\n    .filter(s => s.length > 0)\n    .join('/');\n  return '/' + path;\n};\nconst generateUrl = (segments, useHash, queryString) => {\n  let url = generatePath(segments);\n  if (useHash) {\n    url = '#' + url;\n  }\n  if (queryString !== undefined) {\n    url += '?' + queryString;\n  }\n  return url;\n};\nconst writePath = (history, root, useHash, path, direction, state, queryString) => {\n  const url = generateUrl([...parsePath(root).segments, ...path], useHash, queryString);\n  if (direction === ROUTER_INTENT_FORWARD) {\n    history.pushState(state, '', url);\n  }\n  else {\n    history.replaceState(state, '', url);\n  }\n};\nconst chainToPath = (chain) => {\n  const path = [];\n  for (const route of chain) {\n    for (const segment of route.path) {\n      if (segment[0] === ':') {\n        const param = route.params && route.params[segment.slice(1)];\n        if (!param) {\n          return null;\n        }\n        path.push(param);\n      }\n      else if (segment !== '') {\n        path.push(segment);\n      }\n    }\n  }\n  return path;\n};\n// Remove the prefix segments from the path segments.\n//\n// Return:\n// - null when the path segments do not start with the passed prefix,\n// - the path segments after the prefix otherwise.\nconst removePrefix = (prefix, path) => {\n  if (prefix.length > path.length) {\n    return null;\n  }\n  if (prefix.length <= 1 && prefix[0] === '') {\n    return path;\n  }\n  for (let i = 0; i < prefix.length; i++) {\n    if (prefix[i] !== path[i]) {\n      return null;\n    }\n  }\n  if (path.length === prefix.length) {\n    return [''];\n  }\n  return path.slice(prefix.length);\n};\nconst readPath = (loc, root, useHash) => {\n  const prefix = parsePath(root).segments;\n  const pathname = useHash ? loc.hash.slice(1) : loc.pathname;\n  const path = parsePath(pathname).segments;\n  return removePrefix(prefix, path);\n};\n// Parses the path to:\n// - segments an array of '/' separated parts,\n// - queryString (undefined when no query string).\nconst parsePath = (path) => {\n  let segments = [''];\n  let queryString;\n  if (path != null) {\n    const qsStart = path.indexOf('?');\n    if (qsStart > -1) {\n      queryString = path.substr(qsStart + 1);\n      path = path.substr(0, qsStart);\n    }\n    segments = path.split('/')\n      .map(s => s.trim())\n      .filter(s => s.length > 0);\n    if (segments.length === 0) {\n      segments = [''];\n    }\n  }\n  return { segments, queryString };\n};\n\nconst printRoutes = (routes) => {\n  console.group(`[ion-core] ROUTES[${routes.length}]`);\n  for (const chain of routes) {\n    const path = [];\n    chain.forEach(r => path.push(...r.path));\n    const ids = chain.map(r => r.id);\n    console.debug(`%c ${generatePath(path)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n  }\n  console.groupEnd();\n};\nconst printRedirects = (redirects) => {\n  console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n  for (const redirect of redirects) {\n    if (redirect.to) {\n      console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to.segments)}`, 'font-weight: bold');\n    }\n  }\n  console.groupEnd();\n};\n\nconst writeNavState = async (root, chain, direction, index, changed = false, animation) => {\n  try {\n    // find next navigation outlet in the DOM\n    const outlet = searchNavNode(root);\n    // make sure we can continue interacting the DOM, otherwise abort\n    if (index >= chain.length || !outlet) {\n      return changed;\n    }\n    await new Promise(resolve => componentOnReady(outlet, resolve));\n    const route = chain[index];\n    const result = await outlet.setRouteId(route.id, route.params, direction, animation);\n    // if the outlet changed the page, reset navigation to neutral (no direction)\n    // this means nested outlets will not animate\n    if (result.changed) {\n      direction = ROUTER_INTENT_NONE;\n      changed = true;\n    }\n    // recursively set nested outlets\n    changed = await writeNavState(result.element, chain, direction, index + 1, changed, animation);\n    // once all nested outlets are visible let's make the parent visible too,\n    // using markVisible prevents flickering\n    if (result.markVisible) {\n      await result.markVisible();\n    }\n    return changed;\n  }\n  catch (e) {\n    console.error(e);\n    return false;\n  }\n};\nconst readNavState = async (root) => {\n  const ids = [];\n  let outlet;\n  let node = root;\n  // tslint:disable-next-line:no-constant-condition\n  while (true) {\n    outlet = searchNavNode(node);\n    if (outlet) {\n      const id = await outlet.getRouteId();\n      if (id) {\n        node = id.element;\n        id.element = undefined;\n        ids.push(id);\n      }\n      else {\n        break;\n      }\n    }\n    else {\n      break;\n    }\n  }\n  return { ids, outlet };\n};\nconst waitUntilNavNode = () => {\n  if (searchNavNode(document.body)) {\n    return Promise.resolve();\n  }\n  return new Promise(resolve => {\n    window.addEventListener('ionNavWillLoad', resolve, { once: true });\n  });\n};\nconst QUERY = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\nconst searchNavNode = (root) => {\n  if (!root) {\n    return undefined;\n  }\n  if (root.matches(QUERY)) {\n    return root;\n  }\n  const outlet = root.querySelector(QUERY);\n  return outlet !== null && outlet !== void 0 ? outlet : undefined;\n};\n\n// Returns whether the given redirect matches the given path segments.\n//\n// A redirect matches when the segments of the path and redirect.from are equal.\n// Note that segments are only checked until redirect.from contains a '*' which matches any path segment.\n// The path ['some', 'path', 'to', 'page'] matches both ['some', 'path', 'to', 'page'] and ['some', 'path', '*'].\nconst matchesRedirect = (path, redirect) => {\n  const { from, to } = redirect;\n  if (to === undefined) {\n    return false;\n  }\n  if (from.length > path.length) {\n    return false;\n  }\n  for (let i = 0; i < from.length; i++) {\n    const expected = from[i];\n    if (expected === '*') {\n      return true;\n    }\n    if (expected !== path[i]) {\n      return false;\n    }\n  }\n  return from.length === path.length;\n};\n// Returns the first redirect matching the path segments or undefined when no match found.\nconst findRouteRedirect = (path, redirects) => {\n  return redirects.find(redirect => matchesRedirect(path, redirect));\n};\nconst matchesIDs = (ids, chain) => {\n  const len = Math.min(ids.length, chain.length);\n  let score = 0;\n  for (let i = 0; i < len; i++) {\n    const routeId = ids[i];\n    const routeChain = chain[i];\n    // Skip results where the route id does not match the chain at the same index\n    if (routeId.id.toLowerCase() !== routeChain.id) {\n      break;\n    }\n    if (routeId.params) {\n      const routeIdParams = Object.keys(routeId.params);\n      /**\n       * Only compare routes with the chain that have the same number of parameters.\n       */\n      if (routeIdParams.length === routeChain.path.length) {\n        /**\n         * Maps the route's params into a path based on the path variable names,\n         * to compare against the route chain format.\n         *\n         * Before:\n         * ```ts\n         * {\n         *  params: {\n         *    s1: 'a',\n         *    s2: 'b'\n         *  }\n         * }\n         * ```\n         *\n         * After:\n         * ```ts\n         * [':s1',':s2']\n         * ```\n         */\n        const pathWithParams = routeIdParams.map(key => `:${key}`);\n        for (let j = 0; j < pathWithParams.length; j++) {\n          // Skip results where the path variable is not a match\n          if (pathWithParams[j].toLowerCase() !== routeChain.path[j]) {\n            break;\n          }\n          // Weight path matches for the same index higher.\n          score++;\n        }\n      }\n    }\n    // Weight id matches\n    score++;\n  }\n  return score;\n};\nconst matchesPath = (inputPath, chain) => {\n  const segments = new RouterSegments(inputPath);\n  let matchesDefault = false;\n  let allparams;\n  for (let i = 0; i < chain.length; i++) {\n    const path = chain[i].path;\n    if (path[0] === '') {\n      matchesDefault = true;\n    }\n    else {\n      for (const segment of path) {\n        const data = segments.next();\n        // data param\n        if (segment[0] === ':') {\n          if (data === '') {\n            return null;\n          }\n          allparams = allparams || [];\n          const params = allparams[i] || (allparams[i] = {});\n          params[segment.slice(1)] = data;\n        }\n        else if (data !== segment) {\n          return null;\n        }\n      }\n      matchesDefault = false;\n    }\n  }\n  const matches = (matchesDefault)\n    ? matchesDefault === (segments.next() === '')\n    : true;\n  if (!matches) {\n    return null;\n  }\n  if (allparams) {\n    return chain.map((route, i) => ({\n      id: route.id,\n      path: route.path,\n      params: mergeParams(route.params, allparams[i]),\n      beforeEnter: route.beforeEnter,\n      beforeLeave: route.beforeLeave\n    }));\n  }\n  return chain;\n};\n// Merges the route parameter objects.\n// Returns undefined when both parameters are undefined.\nconst mergeParams = (a, b) => {\n  return a || b ? Object.assign(Object.assign({}, a), b) : undefined;\n};\nconst routerIDsToChain = (ids, chains) => {\n  let match = null;\n  let maxMatches = 0;\n  for (const chain of chains) {\n    const score = matchesIDs(ids, chain);\n    if (score > maxMatches) {\n      match = chain;\n      maxMatches = score;\n    }\n  }\n  if (match) {\n    return match.map((route, i) => ({\n      id: route.id,\n      path: route.path,\n      params: mergeParams(route.params, ids[i] && ids[i].params)\n    }));\n  }\n  return null;\n};\nconst routerPathToChain = (path, chains) => {\n  let match = null;\n  let matches = 0;\n  for (const chain of chains) {\n    const matchedChain = matchesPath(path, chain);\n    if (matchedChain !== null) {\n      const score = computePriority(matchedChain);\n      if (score > matches) {\n        matches = score;\n        match = matchedChain;\n      }\n    }\n  }\n  return match;\n};\nconst computePriority = (chain) => {\n  let score = 1;\n  let level = 1;\n  for (const route of chain) {\n    for (const path of route.path) {\n      if (path[0] === ':') {\n        score += Math.pow(1, level);\n      }\n      else if (path !== '') {\n        score += Math.pow(2, level);\n      }\n      level++;\n    }\n  }\n  return score;\n};\nclass RouterSegments {\n  constructor(path) {\n    this.path = path.slice();\n  }\n  next() {\n    if (this.path.length > 0) {\n      return this.path.shift();\n    }\n    return '';\n  }\n}\n\nconst readProp = (el, prop) => {\n  if (prop in el) {\n    return el[prop];\n  }\n  if (el.hasAttribute(prop)) {\n    return el.getAttribute(prop);\n  }\n  return null;\n};\nconst readRedirects = (root) => {\n  return Array.from(root.children)\n    .filter(el => el.tagName === 'ION-ROUTE-REDIRECT')\n    .map(el => {\n    const to = readProp(el, 'to');\n    return {\n      from: parsePath(readProp(el, 'from')).segments,\n      to: to == null ? undefined : parsePath(to),\n    };\n  });\n};\nconst readRoutes = (root) => {\n  return flattenRouterTree(readRouteNodes(root));\n};\nconst readRouteNodes = (node) => {\n  return Array.from(node.children)\n    .filter(el => el.tagName === 'ION-ROUTE' && el.component)\n    .map(el => {\n    const component = readProp(el, 'component');\n    return {\n      path: parsePath(readProp(el, 'url')).segments,\n      id: component.toLowerCase(),\n      params: el.componentProps,\n      beforeLeave: el.beforeLeave,\n      beforeEnter: el.beforeEnter,\n      children: readRouteNodes(el)\n    };\n  });\n};\nconst flattenRouterTree = (nodes) => {\n  const chains = [];\n  for (const node of nodes) {\n    flattenNode([], chains, node);\n  }\n  return chains;\n};\nconst flattenNode = (chain, chains, node) => {\n  chain = chain.slice();\n  chain.push({\n    id: node.id,\n    path: node.path,\n    params: node.params,\n    beforeLeave: node.beforeLeave,\n    beforeEnter: node.beforeEnter\n  });\n  if (node.children.length === 0) {\n    chains.push(chain);\n    return;\n  }\n  for (const child of node.children) {\n    flattenNode(chain, chains, child);\n  }\n};\n\nlet Router = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n    this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n    this.previousPath = null;\n    this.busy = false;\n    this.state = 0;\n    this.lastState = 0;\n    /**\n     * The root path to use when matching URLs. By default, this is set to \"/\", but you can specify\n     * an alternate prefix for all URL paths.\n     */\n    this.root = '/';\n    /**\n     * The router can work in two \"modes\":\n     * - With hash: `/index.html#/path/to/page`\n     * - Without hash: `/path/to/page`\n     *\n     * Using one or another might depend in the requirements of your app and/or where it's deployed.\n     *\n     * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n     * requires additional server-side configuration in order to properly work.\n     *\n     * On the other side hash-navigation is much easier to deploy, it even works over the file protocol.\n     *\n     * By default, this property is `true`, change to `false` to allow hash-less URLs.\n     */\n    this.useHash = true;\n  }\n  async componentWillLoad() {\n    await waitUntilNavNode();\n    const canProceed = await this.runGuards(this.getPath());\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        const { redirect } = canProceed;\n        const path = parsePath(redirect);\n        this.setPath(path.segments, ROUTER_INTENT_NONE, path.queryString);\n        await this.writeNavStateRoot(path.segments, ROUTER_INTENT_NONE);\n      }\n    }\n    else {\n      await this.onRoutesChanged();\n    }\n  }\n  componentDidLoad() {\n    window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n    window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n  }\n  async onPopState() {\n    const direction = this.historyDirection();\n    let segments = this.getPath();\n    const canProceed = await this.runGuards(segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        segments = parsePath(canProceed.redirect).segments;\n      }\n      else {\n        return false;\n      }\n    }\n    return this.writeNavStateRoot(segments, direction);\n  }\n  onBackButton(ev) {\n    ev.detail.register(0, processNextHandler => {\n      this.back();\n      processNextHandler();\n    });\n  }\n  /** @internal */\n  async canTransition() {\n    const canProceed = await this.runGuards();\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        return canProceed.redirect;\n      }\n      else {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Navigate to the specified URL.\n   *\n   * @param url The url to navigate to.\n   * @param direction The direction of the animation. Defaults to `\"forward\"`.\n   */\n  async push(url, direction = 'forward', animation) {\n    if (url.startsWith('.')) {\n      url = (new URL(url, window.location.href)).pathname;\n    }\n    let parsedPath = parsePath(url);\n    const canProceed = await this.runGuards(parsedPath.segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        parsedPath = parsePath(canProceed.redirect);\n      }\n      else {\n        return false;\n      }\n    }\n    this.setPath(parsedPath.segments, direction, parsedPath.queryString);\n    return this.writeNavStateRoot(parsedPath.segments, direction, animation);\n  }\n  /**\n   * Go back to previous page in the window.history.\n   */\n  back() {\n    window.history.back();\n    return Promise.resolve(this.waitPromise);\n  }\n  /** @internal */\n  async printDebug() {\n    printRoutes(readRoutes(this.el));\n    printRedirects(readRedirects(this.el));\n  }\n  /** @internal */\n  async navChanged(direction) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, navChanged was cancelled');\n      return false;\n    }\n    const { ids, outlet } = await readNavState(window.document.body);\n    const routes = readRoutes(this.el);\n    const chain = routerIDsToChain(ids, routes);\n    if (!chain) {\n      console.warn('[ion-router] no matching URL for ', ids.map(i => i.id));\n      return false;\n    }\n    const path = chainToPath(chain);\n    if (!path) {\n      console.warn('[ion-router] router could not match path because some required param is missing');\n      return false;\n    }\n    this.setPath(path, direction);\n    await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, path, null, ids.length);\n    return true;\n  }\n  // This handler gets called when a `ion-route-redirect` component is added to the DOM or if the from or to property of such node changes.\n  onRedirectChanged() {\n    const path = this.getPath();\n    if (path && findRouteRedirect(path, readRedirects(this.el))) {\n      this.writeNavStateRoot(path, ROUTER_INTENT_NONE);\n    }\n  }\n  // This handler gets called when a `ion-route` component is added to the DOM or if the from or to property of such node changes.\n  onRoutesChanged() {\n    return this.writeNavStateRoot(this.getPath(), ROUTER_INTENT_NONE);\n  }\n  historyDirection() {\n    var _a;\n    const win = window;\n    if (win.history.state === null) {\n      this.state++;\n      win.history.replaceState(this.state, win.document.title, (_a = win.document.location) === null || _a === void 0 ? void 0 : _a.href);\n    }\n    const state = win.history.state;\n    const lastState = this.lastState;\n    this.lastState = state;\n    if (state > lastState || (state >= lastState && lastState > 0)) {\n      return ROUTER_INTENT_FORWARD;\n    }\n    if (state < lastState) {\n      return ROUTER_INTENT_BACK;\n    }\n    return ROUTER_INTENT_NONE;\n  }\n  async writeNavStateRoot(path, direction, animation) {\n    if (!path) {\n      console.error('[ion-router] URL is not part of the routing set');\n      return false;\n    }\n    // lookup redirect rule\n    const redirects = readRedirects(this.el);\n    const redirect = findRouteRedirect(path, redirects);\n    let redirectFrom = null;\n    if (redirect) {\n      const { segments, queryString } = redirect.to;\n      this.setPath(segments, direction, queryString);\n      redirectFrom = redirect.from;\n      path = segments;\n    }\n    // lookup route chain\n    const routes = readRoutes(this.el);\n    const chain = routerPathToChain(path, routes);\n    if (!chain) {\n      console.error('[ion-router] the path does not match any route');\n      return false;\n    }\n    // write DOM give\n    return this.safeWriteNavState(document.body, chain, direction, path, redirectFrom, 0, animation);\n  }\n  async safeWriteNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\n    const unlock = await this.lock();\n    let changed = false;\n    try {\n      changed = await this.writeNavState(node, chain, direction, path, redirectFrom, index, animation);\n    }\n    catch (e) {\n      console.error(e);\n    }\n    unlock();\n    return changed;\n  }\n  async lock() {\n    const p = this.waitPromise;\n    let resolve;\n    this.waitPromise = new Promise(r => resolve = r);\n    if (p !== undefined) {\n      await p;\n    }\n    return resolve;\n  }\n  // Executes the beforeLeave hook of the source route and the beforeEnter hook of the target route if they exist.\n  //\n  // When the beforeLeave hook does not return true (to allow navigating) then that value is returned early and the beforeEnter is executed.\n  // Otherwise the beforeEnterHook hook of the target route is executed.\n  async runGuards(to = this.getPath(), from) {\n    if (from === undefined) {\n      from = parsePath(this.previousPath).segments;\n    }\n    if (!to || !from) {\n      return true;\n    }\n    const routes = readRoutes(this.el);\n    const fromChain = routerPathToChain(from, routes);\n    const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\n    const canLeave = beforeLeaveHook ? await beforeLeaveHook() : true;\n    if (canLeave === false || typeof canLeave === 'object') {\n      return canLeave;\n    }\n    const toChain = routerPathToChain(to, routes);\n    const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\n    return beforeEnterHook ? beforeEnterHook() : true;\n  }\n  async writeNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, transition was cancelled');\n      return false;\n    }\n    this.busy = true;\n    // generate route event and emit will change\n    const routeEvent = this.routeChangeEvent(path, redirectFrom);\n    if (routeEvent) {\n      this.ionRouteWillChange.emit(routeEvent);\n    }\n    const changed = await writeNavState(node, chain, direction, index, false, animation);\n    this.busy = false;\n    // emit did change\n    if (routeEvent) {\n      this.ionRouteDidChange.emit(routeEvent);\n    }\n    return changed;\n  }\n  setPath(path, direction, queryString) {\n    this.state++;\n    writePath(window.history, this.root, this.useHash, path, direction, this.state, queryString);\n  }\n  getPath() {\n    return readPath(window.location, this.root, this.useHash);\n  }\n  routeChangeEvent(path, redirectFromPath) {\n    const from = this.previousPath;\n    const to = generatePath(path);\n    this.previousPath = to;\n    if (to === from) {\n      return null;\n    }\n    const redirectedFrom = redirectFromPath ? generatePath(redirectFromPath) : null;\n    return {\n      from,\n      redirectedFrom,\n      to,\n    };\n  }\n  get el() { return getElement(this); }\n};\n\nconst routerLinkCss = \":host{--background:transparent;--color:var(--ion-color-primary, #3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\n\nlet RouterLink = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * When using a router, it specifies the transition direction when navigating to\n     * another page using `href`.\n     */\n    this.routerDirection = 'forward';\n    this.onClick = (ev) => {\n      openURL(this.href, ev, this.routerDirection, this.routerAnimation);\n    };\n  }\n  render() {\n    const mode = getIonMode(this);\n    const attrs = {\n      href: this.href,\n      rel: this.rel,\n      target: this.target\n    };\n    return (h(Host, { onClick: this.onClick, class: createColorClasses(this.color, {\n        [mode]: true,\n        'ion-activatable': true\n      }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\n  }\n};\nRouterLink.style = routerLinkCss;\n\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };\n"],"sourceRoot":"webpack:///","file":"7937.31e838a0d9bb5ddf.js"}