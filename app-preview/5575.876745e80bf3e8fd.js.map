{"version":3,"file":"5575.876745e80bf3e8fd.js","mappings":"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","names":["Picker","constructor","hostRef","registerInstance","this","ionInputModeChange","createEvent","useInputMode","isInHighlightBounds","ev","highlightEl","bbox","getBoundingClientRect","clientX","left","right","clientY","top","bottom","onFocusOut","relatedTarget","tagName","inputEl","exitInputMode","onFocusIn","target","actionOnClick","numericInput","enterInputMode","onClick","undefined","onPointerDown","inputModeColumn","el","columnEl","querySelectorAll","length","focusInput","querySelector","destroyKeypressListener","focus","addEventListener","onKeyPress","removeEventListener","emitInputModeChange","parsedValue","parseInt","key","Number","isNaN","value","onInputChange","selectSingleColumn","singleColumnSearchTimeout","options","Array","from","filter","disabled","clearTimeout","setTimeout","newString","substring","findItemFromCompleteValue","find","textContent","replace","setValue","changedCharacter","searchColumn","colEl","zeroBehavior","behavior","option","multiColumnSearch","firstColumn","secondColumn","input","inputArray","split","hourValue","slice","join","foundHour","minuteValue","singleDigitHour","singleDigitFound","shift","remainingDigits","selectMultiColumn","numericPickers","col","lastColumn","emit","preventTouchStartPropagation","stopPropagation","componentWillLoad","getElementRoot","_this","_asyncToGenerator","blur","render","h","Host","tabindex","inputmode","type","onKeyDown","_a","ref","onInput","onBlur","class","getElement","style","ios","md"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/ion-picker.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, c as createEvent, h, d as Host, g as getElement } from './index-4DxY6_gG.js';\nimport { g as getElementRoot } from './helpers-8KSQQGQy.js';\n\nconst pickerIosCss = \":host{display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:200px;direction:ltr;z-index:0}:host .picker-before,:host .picker-after{position:absolute;width:100%;-webkit-transform:translateZ(0);transform:translateZ(0);z-index:1;pointer-events:none}:host .picker-before{top:0;height:83px}:host .picker-before{inset-inline-start:0}:host .picker-after{top:116px;height:84px}:host .picker-after{inset-inline-start:0}:host .picker-highlight{border-radius:var(--highlight-border-radius, 8px);left:0;right:0;top:50%;bottom:0;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;position:absolute;width:calc(100% - 16px);height:34px;-webkit-transform:translateY(-50%);transform:translateY(-50%);background:var(--highlight-background);z-index:-1}:host input{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}:host ::slotted(ion-picker-column:first-of-type){text-align:start}:host ::slotted(ion-picker-column:last-of-type){text-align:end}:host ::slotted(ion-picker-column:only-child){text-align:center}:host .picker-before{background:-webkit-gradient(linear, left top, left bottom, color-stop(20%, rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 1)), to(rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 0.8)));background:linear-gradient(to bottom, rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 1) 20%, rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 0.8) 100%)}:host .picker-after{background:-webkit-gradient(linear, left bottom, left top, color-stop(20%, rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 1)), to(rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 0.8)));background:linear-gradient(to top, rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 1) 20%, rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 0.8) 100%)}:host .picker-highlight{background:var(--highlight-background, var(--ion-color-step-150, var(--ion-background-color-step-150, #eeeeef)))}\";\n\nconst pickerMdCss = \":host{display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:200px;direction:ltr;z-index:0}:host .picker-before,:host .picker-after{position:absolute;width:100%;-webkit-transform:translateZ(0);transform:translateZ(0);z-index:1;pointer-events:none}:host .picker-before{top:0;height:83px}:host .picker-before{inset-inline-start:0}:host .picker-after{top:116px;height:84px}:host .picker-after{inset-inline-start:0}:host .picker-highlight{border-radius:var(--highlight-border-radius, 8px);left:0;right:0;top:50%;bottom:0;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;position:absolute;width:calc(100% - 16px);height:34px;-webkit-transform:translateY(-50%);transform:translateY(-50%);background:var(--highlight-background);z-index:-1}:host input{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}:host ::slotted(ion-picker-column:first-of-type){text-align:start}:host ::slotted(ion-picker-column:last-of-type){text-align:end}:host ::slotted(ion-picker-column:only-child){text-align:center}:host .picker-before{background:-webkit-gradient(linear, left top, left bottom, color-stop(20%, rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 1)), color-stop(90%, rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 0)));background:linear-gradient(to bottom, rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 1) 20%, rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 0) 90%)}:host .picker-after{background:-webkit-gradient(linear, left bottom, left top, color-stop(30%, rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 1)), color-stop(90%, rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 0)));background:linear-gradient(to top, rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 1) 30%, rgba(var(--fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 0) 90%)}\";\n\nconst Picker = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionInputModeChange = createEvent(this, \"ionInputModeChange\", 7);\n        this.useInputMode = false;\n        this.isInHighlightBounds = (ev) => {\n            const { highlightEl } = this;\n            if (!highlightEl) {\n                return false;\n            }\n            const bbox = highlightEl.getBoundingClientRect();\n            /**\n             * Check to see if the user clicked\n             * outside the bounds of the highlight.\n             */\n            const outsideX = ev.clientX < bbox.left || ev.clientX > bbox.right;\n            const outsideY = ev.clientY < bbox.top || ev.clientY > bbox.bottom;\n            if (outsideX || outsideY) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * If we are no longer focused\n         * on a picker column, then we should\n         * exit input mode. An exception is made\n         * for the input in the picker since having\n         * that focused means we are still in input mode.\n         */\n        this.onFocusOut = (ev) => {\n            // TODO(FW-2832): type\n            const { relatedTarget } = ev;\n            if (!relatedTarget || (relatedTarget.tagName !== 'ION-PICKER-COLUMN' && relatedTarget !== this.inputEl)) {\n                this.exitInputMode();\n            }\n        };\n        /**\n         * When picker columns receive focus\n         * the parent picker needs to determine\n         * whether to enter/exit input mode.\n         */\n        this.onFocusIn = (ev) => {\n            // TODO(FW-2832): type\n            const { target } = ev;\n            /**\n             * Due to browser differences in how/when focus\n             * is dispatched on certain elements, we need to\n             * make sure that this function only ever runs when\n             * focusing a picker column.\n             */\n            if (target.tagName !== 'ION-PICKER-COLUMN') {\n                return;\n            }\n            /**\n             * If we have actionOnClick\n             * then this means the user focused\n             * a picker column via mouse or\n             * touch (i.e. a PointerEvent). As a result,\n             * we should not enter/exit input mode\n             * until the click event has fired, which happens\n             * after the `focusin` event.\n             *\n             * Otherwise, the user likely focused\n             * the column using their keyboard and\n             * we should enter/exit input mode automatically.\n             */\n            if (!this.actionOnClick) {\n                const columnEl = target;\n                const allowInput = columnEl.numericInput;\n                if (allowInput) {\n                    this.enterInputMode(columnEl, false);\n                }\n                else {\n                    this.exitInputMode();\n                }\n            }\n        };\n        /**\n         * On click we need to run an actionOnClick\n         * function that has been set in onPointerDown\n         * so that we enter/exit input mode correctly.\n         */\n        this.onClick = () => {\n            const { actionOnClick } = this;\n            if (actionOnClick) {\n                actionOnClick();\n                this.actionOnClick = undefined;\n            }\n        };\n        /**\n         * Clicking a column also focuses the column on\n         * certain browsers, so we use onPointerDown\n         * to tell the onFocusIn function that users\n         * are trying to click the column rather than\n         * focus the column using the keyboard. When the\n         * user completes the click, the onClick function\n         * runs and runs the actionOnClick callback.\n         */\n        this.onPointerDown = (ev) => {\n            const { useInputMode, inputModeColumn, el } = this;\n            if (this.isInHighlightBounds(ev)) {\n                /**\n                 * If we were already in\n                 * input mode, then we should determine\n                 * if we tapped a particular column and\n                 * should switch to input mode for\n                 * that specific column.\n                 */\n                if (useInputMode) {\n                    /**\n                     * If we tapped a picker column\n                     * then we should either switch to input\n                     * mode for that column or all columns.\n                     * Otherwise we should exit input mode\n                     * since we just tapped the highlight and\n                     * not a column.\n                     */\n                    if (ev.target.tagName === 'ION-PICKER-COLUMN') {\n                        /**\n                         * If user taps 2 different columns\n                         * then we should just switch to input mode\n                         * for the new column rather than switching to\n                         * input mode for all columns.\n                         */\n                        if (inputModeColumn && inputModeColumn === ev.target) {\n                            this.actionOnClick = () => {\n                                this.enterInputMode();\n                            };\n                        }\n                        else {\n                            this.actionOnClick = () => {\n                                this.enterInputMode(ev.target);\n                            };\n                        }\n                    }\n                    else {\n                        this.actionOnClick = () => {\n                            this.exitInputMode();\n                        };\n                    }\n                    /**\n                     * If we were not already in\n                     * input mode, then we should\n                     * enter input mode for all columns.\n                     */\n                }\n                else {\n                    /**\n                     * If there is only 1 numeric input column\n                     * then we should skip multi column input.\n                     */\n                    const columns = el.querySelectorAll('ion-picker-column.picker-column-numeric-input');\n                    const columnEl = columns.length === 1 ? ev.target : undefined;\n                    this.actionOnClick = () => {\n                        this.enterInputMode(columnEl);\n                    };\n                }\n                return;\n            }\n            this.actionOnClick = () => {\n                this.exitInputMode();\n            };\n        };\n        /**\n         * Enters input mode to allow\n         * for text entry of numeric values.\n         * If on mobile, we focus a hidden input\n         * field so that the on screen keyboard\n         * is brought up. When tabbing using a\n         * keyboard, picker columns receive an outline\n         * to indicate they are focused. As a result,\n         * we should not focus the hidden input as it\n         * would cause the outline to go away, preventing\n         * users from having any visual indication of which\n         * column is focused.\n         */\n        this.enterInputMode = (columnEl, focusInput = true) => {\n            const { inputEl, el } = this;\n            if (!inputEl) {\n                return;\n            }\n            /**\n             * Only active input mode if there is at\n             * least one column that accepts numeric input.\n             */\n            const hasInputColumn = el.querySelector('ion-picker-column.picker-column-numeric-input');\n            if (!hasInputColumn) {\n                return;\n            }\n            /**\n             * If columnEl is undefined then\n             * it is assumed that all numeric pickers\n             * are eligible for text entry.\n             * (i.e. hour and minute columns)\n             */\n            this.useInputMode = true;\n            this.inputModeColumn = columnEl;\n            /**\n             * Users with a keyboard and mouse can\n             * activate input mode where the input is\n             * focused as well as when it is not focused,\n             * so we need to make sure we clean up any\n             * old listeners.\n             */\n            if (focusInput) {\n                if (this.destroyKeypressListener) {\n                    this.destroyKeypressListener();\n                    this.destroyKeypressListener = undefined;\n                }\n                inputEl.focus();\n            }\n            else {\n                // TODO FW-5900 Use keydown instead\n                el.addEventListener('keypress', this.onKeyPress);\n                this.destroyKeypressListener = () => {\n                    el.removeEventListener('keypress', this.onKeyPress);\n                };\n            }\n            this.emitInputModeChange();\n        };\n        this.onKeyPress = (ev) => {\n            const { inputEl } = this;\n            if (!inputEl) {\n                return;\n            }\n            const parsedValue = parseInt(ev.key, 10);\n            /**\n             * Only numbers should be allowed\n             */\n            if (!Number.isNaN(parsedValue)) {\n                inputEl.value += ev.key;\n                this.onInputChange();\n            }\n        };\n        this.selectSingleColumn = () => {\n            const { inputEl, inputModeColumn, singleColumnSearchTimeout } = this;\n            if (!inputEl || !inputModeColumn) {\n                return;\n            }\n            const options = Array.from(inputModeColumn.querySelectorAll('ion-picker-column-option')).filter((el) => el.disabled !== true);\n            /**\n             * If users pause for a bit, the search\n             * value should be reset similar to how a\n             * <select> behaves. So typing \"34\", waiting,\n             * then typing \"5\" should select \"05\".\n             */\n            if (singleColumnSearchTimeout) {\n                clearTimeout(singleColumnSearchTimeout);\n            }\n            this.singleColumnSearchTimeout = setTimeout(() => {\n                inputEl.value = '';\n                this.singleColumnSearchTimeout = undefined;\n            }, 1000);\n            /**\n             * For values that are longer than 2 digits long\n             * we should shift the value over 1 character\n             * to the left. So typing \"456\" would result in \"56\".\n             * TODO: If we want to support more than just\n             * time entry, we should update this value to be\n             * the max length of all of the picker items.\n             */\n            if (inputEl.value.length >= 3) {\n                const startIndex = inputEl.value.length - 2;\n                const newString = inputEl.value.substring(startIndex);\n                inputEl.value = newString;\n                this.selectSingleColumn();\n                return;\n            }\n            /**\n             * Checking the value of the input gets priority\n             * first. For example, if the value of the input\n             * is \"1\" and we entered \"2\", then the complete value\n             * is \"12\" and we should select hour 12.\n             *\n             * Regex removes any leading zeros from values like \"02\",\n             * but it keeps a single zero if there are only zeros in the string.\n             * 0+(?=[1-9]) --> Match 1 or more zeros that are followed by 1-9\n             * 0+(?=0$) --> Match 1 or more zeros that must be followed by one 0 and end.\n             */\n            const findItemFromCompleteValue = options.find(({ textContent }) => {\n                /**\n                 * Keyboard entry is currently only used inside of Datetime\n                 * where we guarantee textContent is set.\n                 * If we end up exposing this feature publicly we should revisit this assumption.\n                 */\n                const parsedText = textContent.replace(/^0+(?=[1-9])|0+(?=0$)/, '');\n                return parsedText === inputEl.value;\n            });\n            if (findItemFromCompleteValue) {\n                inputModeColumn.setValue(findItemFromCompleteValue.value);\n                return;\n            }\n            /**\n             * If we typed \"56\" to get minute 56, then typed \"7\",\n             * we should select \"07\" as \"567\" is not a valid minute.\n             */\n            if (inputEl.value.length === 2) {\n                const changedCharacter = inputEl.value.substring(inputEl.value.length - 1);\n                inputEl.value = changedCharacter;\n                this.selectSingleColumn();\n            }\n        };\n        /**\n         * Searches a list of column items for a particular\n         * value. This is currently used for numeric values.\n         * The zeroBehavior can be set to account for leading\n         * or trailing zeros when looking at the item text.\n         */\n        this.searchColumn = (colEl, value, zeroBehavior = 'start') => {\n            if (!value) {\n                return false;\n            }\n            const behavior = zeroBehavior === 'start' ? /^0+/ : /0$/;\n            value = value.replace(behavior, '');\n            const option = Array.from(colEl.querySelectorAll('ion-picker-column-option')).find((el) => {\n                return el.disabled !== true && el.textContent.replace(behavior, '') === value;\n            });\n            if (option) {\n                colEl.setValue(option.value);\n            }\n            return !!option;\n        };\n        /**\n         * Attempts to intelligently search the first and second\n         * column as if they're number columns for the provided numbers\n         * where the first two numbers are the first column\n         * and the last 2 are the last column. Tries to allow for the first\n         * number to be ignored for situations where typos occurred.\n         */\n        this.multiColumnSearch = (firstColumn, secondColumn, input) => {\n            if (input.length === 0) {\n                return;\n            }\n            const inputArray = input.split('');\n            const hourValue = inputArray.slice(0, 2).join('');\n            // Try to find a match for the first two digits in the first column\n            const foundHour = this.searchColumn(firstColumn, hourValue);\n            // If we have more than 2 digits and found a match for hours,\n            // use the remaining digits for the second column (minutes)\n            if (inputArray.length > 2 && foundHour) {\n                const minuteValue = inputArray.slice(2, 4).join('');\n                this.searchColumn(secondColumn, minuteValue);\n            }\n            // If we couldn't find a match for the two-digit hour, try single digit approaches\n            else if (!foundHour && inputArray.length >= 1) {\n                // First try the first digit as a single-digit hour\n                let singleDigitHour = inputArray[0];\n                let singleDigitFound = this.searchColumn(firstColumn, singleDigitHour);\n                // If that didn't work, try the second digit as a single-digit hour\n                // (handles case where user made a typo in the first digit, or they typed over themselves)\n                if (!singleDigitFound) {\n                    inputArray.shift();\n                    singleDigitHour = inputArray[0];\n                    singleDigitFound = this.searchColumn(firstColumn, singleDigitHour);\n                }\n                // If we found a single-digit hour and have remaining digits,\n                // use up to 2 of the remaining digits for the second column\n                if (singleDigitFound && inputArray.length > 1) {\n                    const remainingDigits = inputArray.slice(1, 3).join('');\n                    this.searchColumn(secondColumn, remainingDigits);\n                }\n            }\n        };\n        this.selectMultiColumn = () => {\n            const { inputEl, el } = this;\n            if (!inputEl) {\n                return;\n            }\n            const numericPickers = Array.from(el.querySelectorAll('ion-picker-column')).filter((col) => col.numericInput);\n            const firstColumn = numericPickers[0];\n            const lastColumn = numericPickers[1];\n            let value = inputEl.value;\n            if (value.length > 4) {\n                const startIndex = inputEl.value.length - 4;\n                const newString = inputEl.value.substring(startIndex);\n                inputEl.value = newString;\n                value = newString;\n            }\n            this.multiColumnSearch(firstColumn, lastColumn, value);\n        };\n        /**\n         * Searches the value of the active column\n         * to determine which value users are trying\n         * to select\n         */\n        this.onInputChange = () => {\n            const { useInputMode, inputEl, inputModeColumn } = this;\n            if (!useInputMode || !inputEl) {\n                return;\n            }\n            if (inputModeColumn) {\n                this.selectSingleColumn();\n            }\n            else {\n                this.selectMultiColumn();\n            }\n        };\n        /**\n         * Emit ionInputModeChange. Picker columns\n         * listen for this event to determine whether\n         * or not their column is \"active\" for text input.\n         */\n        this.emitInputModeChange = () => {\n            const { useInputMode, inputModeColumn } = this;\n            this.ionInputModeChange.emit({\n                useInputMode,\n                inputModeColumn,\n            });\n        };\n    }\n    /**\n     * When the picker is interacted with\n     * we need to prevent touchstart so other\n     * gestures do not fire. For example,\n     * scrolling on the wheel picker\n     * in ion-datetime should not cause\n     * a card modal to swipe to close.\n     */\n    preventTouchStartPropagation(ev) {\n        ev.stopPropagation();\n    }\n    componentWillLoad() {\n        getElementRoot(this.el).addEventListener('focusin', this.onFocusIn);\n        getElementRoot(this.el).addEventListener('focusout', this.onFocusOut);\n    }\n    /**\n     * @internal\n     * Exits text entry mode for the picker\n     * This method blurs the hidden input\n     * and cause the keyboard to dismiss.\n     */\n    async exitInputMode() {\n        const { inputEl, useInputMode } = this;\n        if (!useInputMode || !inputEl) {\n            return;\n        }\n        this.useInputMode = false;\n        this.inputModeColumn = undefined;\n        inputEl.blur();\n        inputEl.value = '';\n        if (this.destroyKeypressListener) {\n            this.destroyKeypressListener();\n            this.destroyKeypressListener = undefined;\n        }\n        this.emitInputModeChange();\n    }\n    render() {\n        return (h(Host, { key: '28f81e4ed44a633178561757c5199c2c98f94b74', onPointerDown: (ev) => this.onPointerDown(ev), onClick: () => this.onClick() }, h(\"input\", { key: 'abb3d1ad25ef63856af7804111175a4d50008bc0', \"aria-hidden\": \"true\", tabindex: -1, inputmode: \"numeric\", type: \"number\", onKeyDown: (ev) => {\n                var _a;\n                /**\n                 * The \"Enter\" key represents\n                 * the user submitting their time\n                 * selection, so we should blur the\n                 * input (and therefore close the keyboard)\n                 *\n                 * Updating the picker's state to no longer\n                 * be in input mode is handled in the onBlur\n                 * callback below.\n                 */\n                if (ev.key === 'Enter') {\n                    (_a = this.inputEl) === null || _a === void 0 ? void 0 : _a.blur();\n                }\n            }, ref: (el) => (this.inputEl = el), onInput: () => this.onInputChange(), onBlur: () => this.exitInputMode() }), h(\"div\", { key: '334a5abdc02e6b127c57177f626d7e4ff5526183', class: \"picker-before\" }), h(\"div\", { key: 'ffd6271931129e88fc7c820e919d684899e420c5', class: \"picker-after\" }), h(\"div\", { key: '78d1d95fd09e04f154ea59f24a1cece72c47ed7b', class: \"picker-highlight\", ref: (el) => (this.highlightEl = el) }), h(\"slot\", { key: '0bd5b9f875d3c71f6cbbde2054baeb1b0a2e8cd5' })));\n    }\n    get el() { return getElement(this); }\n};\nPicker.style = {\n    ios: pickerIosCss,\n    md: pickerMdCss\n};\n\nexport { Picker as ion_picker };\n"],"x_google_ignoreList":[0]}