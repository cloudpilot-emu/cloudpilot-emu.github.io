{"version":3,"sources":["webpack:///src/app/page/emulation/context-menu/context-menu.component.ts","webpack:///src/app/page/emulation/context-menu/context-menu.component.html","webpack:///src/app/service/event-handling.service.ts","webpack:///src/app/page/emulation/emulation.page.html","webpack:///src/app/page/emulation/emulation-routing.module.ts","webpack:///src/app/page/emulation/emulation.page.ts","webpack:///src/app/page/emulation/emulation.module.ts"],"names":["ContextMenuComponent","emulationService","onClick","showHelp","this","reset","resetNoExtensions","resetHard","engagePower","power","help","EventHandlingService","canvasDisplayService","ngZone","handleMouseDown","e","button","coords","eventToPalmCoordinates","area","determineArea","interactionMouse","handlePointerMove","determineButton","handleButtonDown","handleMouseMove","buttons","handeMouseUp","interaction","undefined","handleButtonUp","handlePointerUp","handleTouchStart","i","changedTouches","length","touch","item","interactionsTouch","set","identifier","cancelable","preventDefault","handleTouchMove","get","handleTouchEnd","delete","handleKeyDown","isToggleGameMode","run","gameMode","buttonFromEvent","keyCode","keyCodeFromEvent","handleKeyUp","key","btn","activeButtons","clear","drawButtons","Map","Set","canvas","release","runOutsideAngular","addEventListener","window","removeEventListener","clip","bb","getBoundingClientRect","contentX","contentY","contentWidth","contentHeight","width","height","top","left","x","Math","floor","clientX","y","clientY","has","add","Array","from","values","ctrlKey","shiftKey","isGameModeActive","charCodeAt","routes","path","component","EmulationPage","emulationState","storageService","eventHandlingService","kvsService","audioService","popoverController","modalController","alertService","fileService","loadingController","snapshotService","onNewFrame","drawEmulationCanvas","canvasWidth","devicePixelRatio","canvasHeight","session","getCurrentSession","storedSession","getSession","initialize","canvasRef","nativeElement","getCanvas","newFrameEvent","addHandler","resume","bind","pause","removeHandler","popover","create","event","backdropDismiss","showBackdrop","componentProps","dismiss","present","openFiles","processFilesForInstallation","modal","url","message","Help","isRunning","isPowerOff","isUiInitialized","name","isInitialized","isMuted","kvs","volume","muted","mute","files","loader","waitForPendingSnapshot","filesSuccess","filesFail","file","test","installFile","content","push","Promise","r","setTimeout","header","slice","join","installFiles","openContextMenu","EmulationPageRoutingModule","forChild","EmulationPageModule"],"mappings":"+OASO,IAAD,Q,MAAOA,EACT,YAAmBC,GAAA,KAAAA,mBAmCnB,KAAAC,QAAsB,OAGtB,KAAAC,SAAuB,OApCvB,YAEA,QACIC,KAAKH,iBAAiBI,QAEtBD,KAAKF,UAGT,oBACIE,KAAKH,iBAAiBK,oBAEtBF,KAAKF,UAGT,YACIE,KAAKH,iBAAiBM,YAEtBH,KAAKF,UAGT,QACIE,KAAKH,iBAAiBO,cAEtBJ,KAAKF,UAGT,OACIE,KAAKD,WAELC,KAAKF,W,6CAhCAF,GAAoB,Y,uBAApBA,EAAoB,6NCTjC,mBACE,qBAAkC,+BAAS,EAAAS,UACzC,kBACF,OACA,qBAAkC,+BAAS,EAAAJ,UACzC,kBACF,OACA,qBAAkC,+BAAS,EAAAC,sBACzC,kCACF,OACA,qBAAkC,+BAAS,EAAAC,cACzC,uBACF,OACA,qBAAkC,+BAAS,EAAAG,SACzC,kBACF,OACF,Q,MAfmB,0BAAgB,4CAGhB,0BAAgB,4CAGhB,0BAAgB,4CAGhB,0BAAgB,4CAGhB,4B,sCDJb,G,oDEgBC,IAAD,Q,MAAOC,EACT,YACYV,EACAW,EACAC,GAFA,KAAAZ,mBACA,KAAAW,uBACA,KAAAC,SAuDJ,KAAAC,gBAAmBC,IACvB,GAAiB,IAAbA,EAAEC,OAAc,OAEpB,MAAMC,EAASb,KAAKc,uBAAuBH,GAC3C,IAAKE,EAAQ,OAEb,MAAME,EAAOf,KAAKgB,cAAcH,GAEhC,GAAa,IAATE,EACAf,KAAKiB,iBAAmB,CAAEF,QAC1Bf,KAAKH,iBAAiBqB,qBAAqBL,OACxC,CACH,MAAMD,EAASZ,KAAKmB,gBAAgBN,GACpCb,KAAKiB,iBAAmB,CAAEF,OAAMH,UAEhCZ,KAAKoB,iBAAiBR,KAItB,KAAAS,gBAAmBV,I,MAEvB,KAAkB,EAAZA,EAAEW,UAA8C,KAAN,QAArB,EAAAtB,KAAKiB,wBAAgB,eAAEF,MAA0B,OAE5E,MAAMF,EAASb,KAAKc,uBAAuBH,GAAG,GACzCE,GAELb,KAAKH,iBAAiBqB,qBAAqBL,IAGvC,KAAAU,aAAgBZ,IACpB,GAAiB,IAAbA,EAAEC,OAAc,OAEpB,MAAMY,EAAcxB,KAAKiB,iBAGzB,OAFAjB,KAAKiB,sBAAmBQ,EAEhBD,aAAW,EAAXA,EAAaT,MACjB,KAAK,EACDf,KAAK0B,eAAeF,EAAYZ,QAEhC,MAEJ,KAAK,EACDZ,KAAKH,iBAAiB8B,oBAM1B,KAAAC,iBAAoBjB,IACxB,IAAK,IAAIkB,EAAI,EAAGA,EAAIlB,EAAEmB,eAAeC,OAAQF,IAAK,CAC9C,MAAMG,EAAQrB,EAAEmB,eAAeG,KAAKJ,GACpC,IAAKG,EAAO,SAEZ,MAAMnB,EAASb,KAAKc,uBAAuBkB,GAC3C,IAAKnB,EAAQ,SAEb,MAAME,EAAOf,KAAKgB,cAAcH,GAChC,GAAa,IAATE,EACAf,KAAKkC,kBAAkBC,IAAIH,EAAMI,WAAY,CAAErB,SAC/Cf,KAAKH,iBAAiBqB,qBAAqBL,OACxC,CACH,MAAMD,EAASZ,KAAKmB,gBAAgBN,GACpCb,KAAKkC,kBAAkBC,IAAIH,EAAMI,WAAY,CAAErB,OAAMH,WAErDZ,KAAKoB,iBAAiBR,KAIT,IAAjBD,EAAE0B,YAAsB1B,EAAE2B,kBAG1B,KAAAC,gBAAmB5B,I,MACvB,IAAK,IAAIkB,EAAI,EAAGA,EAAIlB,EAAEmB,eAAeC,OAAQF,IAAK,CAC9C,MAAMG,EAAQrB,EAAEmB,eAAeG,KAAKJ,GACpC,GAAKG,GAEiD,KAAN,QAA5C,EAAAhC,KAAKkC,kBAAkBM,IAAIR,EAAMI,mBAAW,eAAErB,MAA0B,CACxE,MAAMF,EAASb,KAAKc,uBAAuBkB,GAAO,GAClD,IAAKnB,EAAQ,SAEbb,KAAKH,iBAAiBqB,qBAAqBL,KAI9B,IAAjBF,EAAE0B,YAAsB1B,EAAE2B,kBAG1B,KAAAG,eAAkB9B,IACtB,IAAK,IAAIkB,EAAI,EAAGA,EAAIlB,EAAEmB,eAAeC,OAAQF,IAAK,CAC9C,MAAMG,EAAQrB,EAAEmB,eAAeG,KAAKJ,GACpC,IAAKG,EAAO,SAEZ,MAAMR,EAAcxB,KAAKkC,kBAAkBM,IAAIR,EAAMI,YAGrD,OAFApC,KAAKkC,kBAAkBQ,OAAOV,EAAMI,YAE5BZ,aAAW,EAAXA,EAAaT,MACjB,KAAK,EACDf,KAAK0B,eAAeF,EAAYZ,QAEhC,MAEJ,KAAK,EACDZ,KAAKH,iBAAiB8B,oBAMb,IAAjBhB,EAAE0B,YAAsB1B,EAAE2B,kBAG1B,KAAAK,cAAiBhC,IACrB,GAAIX,KAAK4C,iBAAiBjC,GAKtB,OAJAA,EAAE2B,sBAEFtC,KAAKS,OAAOoC,IAAI,IAAO7C,KAAK8C,UAAY9C,KAAK8C,UAKjD,MAAMlC,EAASZ,KAAK+C,gBAAgBpC,GACpC,QAAec,IAAXb,EAIA,OAHAZ,KAAKoB,iBAAiBR,QACtBD,EAAE2B,iBAKN,MAAMU,EAAUhD,KAAKiD,iBAAiBtC,QACtBc,IAAZuB,IACAhD,KAAKH,iBAAiB8C,cAAcK,GACpCrC,EAAE2B,mBAIF,KAAAY,YAAevC,IACnB,MAAMC,EAASZ,KAAK+C,gBAAgBpC,GACpC,QAAec,IAAXb,EAIA,OAHAZ,KAAK0B,eAAed,QACpBD,EAAE2B,iBAKN,GAAc,YAAV3B,EAAEwC,IAAmB,CACrB,IAAK,MAAMC,KAAOpD,KAAKqD,cACnBrD,KAAKH,iBAAiB6B,eAAe0B,GAGzCpD,KAAKqD,cAAcC,QACnBtD,KAAKQ,qBAAqB+C,YAAY,MA+KtC,KAAArB,kBAAoB,IAAIsB,IACxB,KAAAH,cAAgB,IAAII,IACpB,KAAAX,UAAW,EA3XnB,KAAKY,GACG1D,KAAK0D,QACL1D,KAAK2D,UAGT3D,KAAK0D,OAASA,EAEd1D,KAAKS,OAAOmD,kBAAkB,KAC1BF,EAAOG,iBAAiB,YAAa7D,KAAKU,iBAC1CoD,OAAOD,iBAAiB,UAAW7D,KAAKuB,cACxCuC,OAAOD,iBAAiB,YAAa7D,KAAKqB,iBAE1CqC,EAAOG,iBAAiB,aAAc7D,KAAK4B,kBAC3C8B,EAAOG,iBAAiB,YAAa7D,KAAKuC,iBAC1CmB,EAAOG,iBAAiB,WAAY7D,KAAKyC,gBACzCiB,EAAOG,iBAAiB,cAAe7D,KAAKyC,gBAE5CqB,OAAOD,iBAAiB,UAAW7D,KAAK2C,eACxCmB,OAAOD,iBAAiB,QAAS7D,KAAKkD,eAI9C,UACI,GAAKlD,KAAK0D,OAAV,CAEA1D,KAAK0D,OAAOK,oBAAoB,YAAa/D,KAAKU,iBAClDoD,OAAOC,oBAAoB,UAAW/D,KAAKuB,cAC3CuC,OAAOC,oBAAoB,YAAa/D,KAAKqB,iBAE7CrB,KAAK0D,OAAOK,oBAAoB,aAAc/D,KAAK4B,kBACnD5B,KAAK0D,OAAOK,oBAAoB,YAAa/D,KAAKuC,iBAClDvC,KAAK0D,OAAOK,oBAAoB,WAAY/D,KAAKyC,gBACjDzC,KAAK0D,OAAOK,oBAAoB,cAAe/D,KAAKyC,gBAEpDqB,OAAOC,oBAAoB,UAAW/D,KAAK2C,eAC3CmB,OAAOC,oBAAoB,QAAS/D,KAAKkD,aAEzC,IAAK,MAAMtC,KAAUZ,KAAKqD,cACtBrD,KAAK0B,eAAed,GAGxBZ,KAAKqD,cAAcC,QACnBtD,KAAKkC,kBAAkBoB,QACvBtD,KAAKiB,sBAAmBQ,EAExBzB,KAAK0D,YAASjC,GAGlB,aACI,OAAOzB,KAAK8C,SA6JR,uBAAuBnC,EAAuBqD,GAAO,GACzD,IAAKhE,KAAK0D,OAAQ,OAElB,MAAMO,EAAKjE,KAAK0D,OAAOQ,wBAEvB,IAAIC,EACAC,EACAC,EACAC,EAIAL,EAAGM,MAAQN,EAAGO,OAAS,IAAQ,KAC/BF,EAAgBL,EAAGO,OACnBH,EAAgB,IAAQ,IAAUJ,EAAGO,OACrCJ,EAAWH,EAAGQ,IACdN,EAAWF,EAAGS,MAAQT,EAAGM,MAAQF,GAAgB,IAEjDA,EAAeJ,EAAGM,MAClBD,EAAiB,IAAS,IAASL,EAAGM,MACtCJ,EAAWF,EAAGS,KACdN,EAAWH,EAAGQ,KAAOR,EAAGO,OAASF,GAAiB,GAItD,IAAIK,EAAIC,KAAKC,OAASlE,EAAEmE,QAAUX,GAAYE,EAAgB,IAAS,KAAS,IAAS,IACrFU,EAAIH,KAAKC,OAASlE,EAAEqE,QAAUZ,GAAYE,EAAiB,IAAU,KAAS,IAAS,IAa3F,GAFIS,GAAK,MAAKA,GAAK,GAEff,EACIW,EAAI,IAAGA,EAAI,GACXA,EAAI,MAAKA,EAAI,KACbI,EAAI,IAAGA,EAAI,GACXA,EAAI,MAAKA,EAAI,UAEjB,GAAIJ,EAAI,GAAKA,GAAK,KAAOI,EAAI,GAAKA,GAAK,IAAK,OAGhD,MAAO,CAACJ,EAAGI,GAGP,eAAe,CAAEA,IACrB,OAAOA,GAAK,IAAM,EAAe,EAG7B,iBAAiBJ,EAAGI,IACxB,OAAIJ,GAAK,IAAY,EACjBA,GAAK,IAAY,EACjBA,GAAK,GAAWI,GAAK,IAAM,EAAkB,EAC7CJ,GAAK,GAAW,EAEb,EAGH,iBAAiB/D,GACjBZ,KAAKqD,cAAc4B,IAAIrE,KAE3BZ,KAAKqD,cAAc6B,IAAItE,GACvBZ,KAAKH,iBAAiBuB,iBAAiBR,GACvCZ,KAAKQ,qBAAqB+C,YAAY4B,MAAMC,KAAKpF,KAAKqD,cAAcgC,YAGhE,eAAezE,GACdZ,KAAKqD,cAAc4B,IAAIrE,KAE5BZ,KAAKqD,cAAcX,OAAO9B,GAC1BZ,KAAKH,iBAAiB6B,eAAed,GACrCZ,KAAKQ,qBAAqB+C,YAAY4B,MAAMC,KAAKpF,KAAKqD,cAAcgC,YAGhE,iBAAiB1E,GACrB,MAAkB,UAAVA,EAAEwC,KAAmBxC,EAAE2E,SAAuB,YAAV3E,EAAEwC,KAAqBxC,EAAE4E,SAGjE,iBAAiB5E,GACrB,OAASX,KAAK8C,UAAYnC,EAAE2E,SAAatF,KAAK8C,WAAanC,EAAE2E,QAGzD,gBAAgB3E,GACpB,OAAQA,EAAEwC,KACN,IAAK,SACD,OAAO,EAEX,IAAK,WACD,OAAO,EAGf,GAAKnD,KAAKwF,iBAAiB7E,GAE3B,OAAQA,EAAEwC,KACN,IAAK,IACL,IAAK,IACL,IAAK,UACD,OAAO,EAEX,IAAK,IACL,IAAK,IACL,IAAK,YACD,OAAO,EAEX,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,YACD,OAAO,EAEX,IAAK,IACL,IAAK,IACL,IAAK,IACD,OAAO,EAEX,IAAK,IACL,IAAK,IACL,IAAK,IACD,OAAO,EAEX,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,aACD,OAAO,GAMX,iBAAiBxC,GACrB,IAAIX,KAAKwF,iBAAiB7E,GAA1B,CAEA,GAAqB,IAAjBA,EAAEwC,IAAIpB,QAAgBpB,EAAEwC,IAAIsC,WAAW,IAAM,IAAK,OAAO9E,EAAEwC,IAAIsC,WAAW,GAE9E,OAAQ9E,EAAEwC,KACN,IAAK,YACD,OAAO,GAEX,IAAK,aACD,OAAO,GAEX,IAAK,UACD,OAAO,GAEX,IAAK,YACD,OAAO,GAEX,IAAK,YACD,OAAO,EAEX,IAAK,MACD,OAAO,EAEX,IAAK,QACD,OAAO,GAEX,QACI,U,6CA1XH5C,GAAoB,gC,yBAApBA,EAAoB,QAApBA,EAAoB,qBAFjB,S,GAEV,G,0HCVA,uBAA2C,oDAAc,KACvD,sBACF,Q,uCACA,uBAA4C,oDAAc,KACxD,sBACF,Q,uCACA,uBAAsD,mEACpD,sBACF,Q,sBAYJ,iBACE,cAAK,8BAAmB,OAC1B,QChCF,MAAMmF,EAAiB,CACnB,CACIC,KAAM,GACNC,UCcF,M,MAAOC,EACT,YACWhG,EACAiG,EACCC,EACDC,EACCxF,EACAyF,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA/F,GAbD,KAAAZ,mBACA,KAAAiG,iBACC,KAAAC,iBACD,KAAAC,uBACC,KAAAxF,uBACA,KAAAyF,aACA,KAAAC,eACA,KAAAC,oBACA,KAAAC,kBACA,KAAAC,eACA,KAAAC,cACA,KAAAC,oBACA,KAAAC,kBACA,KAAA/F,SA0HJ,KAAAgG,WAAc/C,IAClB1D,KAAKQ,qBAAqBkG,oBAAoBhD,IAxHlD,mBAEA,kBACI,OAAO,IAGX,mBACI,OAAO,IAGX,eACI,OAAO1D,KAAK2G,YAAcC,iBAAmB,KAGjD,gBACI,OAAO5G,KAAK6G,aAAeD,iBAAmB,KAG5C,kB,kDACF,IAAIE,EAAU9G,KAAK8F,eAAeiB,oBAClC,MAAMC,EAAgB,cAEjBF,QAA6BrF,IAAlBuF,IACZF,QAAgB9G,KAAK+F,eAAekB,WAAWD,IAEnDhH,KAAKQ,qBAAqB0G,WAAWlH,KAAKmH,UAAUC,cAAeN,GACnE9G,KAAKyG,WAAWzG,KAAKH,iBAAiBwH,aAEtCrH,KAAKH,iBAAiByH,cAAcC,WAAWvH,KAAKyG,YAEpDzG,KAAKH,iBAAiB2H,SAEtBxH,KAAKS,OAAOmD,kBAAkB,IAAM5D,KAAKgG,qBAAqByB,KAAKzH,KAAKmH,UAAUC,kBAGtF,mBACIpH,KAAKH,iBAAiB6H,QAEtB1H,KAAKH,iBAAiByH,cAAcK,cAAc3H,KAAKyG,YAEvDzG,KAAKgG,qBAAqBrC,UAGxB,gBAAgBhD,G,kDAClB,MAAMiH,QAAgB5H,KAAKmG,kBAAkB0B,OAAO,CAChDjC,UAAW,EACXkC,MAAOnH,EACPoH,iBAAiB,EACjBC,cAAc,EACdC,eAAgB,CACZnI,QAAS,IAAM8H,EAAQM,UACvBnI,SAAU,IAAMC,KAAKD,cAI7B6H,EAAQO,YAGZ,eACInI,KAAKsG,YAAY8B,UAAUpI,KAAKqI,4BAA4BZ,KAAKzH,OAG/D,W,kDACF,MAAMsI,QAActI,KAAKoG,gBAAgByB,OAAO,CAC5CjC,UAAW,IACXqC,eAAgB,CACZM,IAAK,mCAGPD,EAAMH,YAGV,mB,wDACInI,KAAKqG,aAAamC,QACpB,YACA,uRAMA,CACIC,KAAM,IAAMzI,KAAKD,eAK7B,0BACI,OACKC,KAAKH,iBAAiB6I,aACvB1I,KAAKH,iBAAiB8I,eACrB3I,KAAKH,iBAAiB+I,kBAI/B,Y,MACI,OAA8C,QAAvC,EAAA5I,KAAK8F,eAAeiB,2BAAmB,eAAE8B,OAAQ,GAG5D,cACI,OAAQ7I,KAAKkG,aAAa4C,iBAAmB9I,KAAKkG,aAAa6C,UAGnE,iBACI,OAAO/I,KAAKiG,WAAW+C,IAAIC,QAAU,EAGzC,KAAKC,GACGA,EACAlJ,KAAKkG,aAAaiD,MAAK,GAEnBnJ,KAAKkG,aAAa4C,gBAClB9I,KAAKkG,aAAaiD,MAAK,GAEvBnJ,KAAKkG,aAAagB,aAShB,4BAA4BkC,G,kDACtC,MAAMC,QAAerJ,KAAKuG,kBAAkBsB,OAAO,CAC/CW,QAAS,wBAEPa,EAAOlB,gBACPnI,KAAKH,iBAAiB6H,cACtB1H,KAAKwG,gBAAgB8C,yBAE3B,MAAMC,EAA8B,GAC9BC,EAA2B,GAEjC,IACI,IAAK,MAAMC,KAAQL,EACV,gBAAgBM,KAAKD,EAAKZ,OAMiC,WAArD7I,KAAKH,iBAAiB8J,YAAYF,EAAKG,UAC9CL,EAAaM,KAAKJ,EAAKZ,MAEvBW,EAAUK,KAAKJ,EAAKZ,YAGlB,IAAIiB,QAASC,GAAMC,WAAWD,EAAG,KAXnCP,EAAUK,KAAKJ,EAAKZ,M,QAc5BQ,EAAOnB,UAEPlI,KAAKH,iBAAiB2H,SAG1B,IAAIgB,EAoCAyB,EAlCJ,OAAQV,EAAaxH,QACjB,KAAK,EACDyG,EAAU,GACV,MAEJ,KAAK,EACDA,EAAU,mBAAmBe,EAAa,iBAC1C,MAEJ,QACIf,EAAU,mBAAmBe,EAAaxH,2BAMlD,OAFIyH,EAAUzH,OAAS,IAAGyG,GAAW,cAE7BgB,EAAUzH,QACd,KAAK,EACD,MAEJ,KAAK,EACDyG,GAAW,mBAAmBgB,EAAU,aACxC,MAEJ,QACIhB,GAAW,mBAAmBgB,EACzBU,MAAM,EAAGV,EAAUzH,OAAS,EAAI,EAAIyH,EAAUzH,OAAS,GACvDoI,KAAK,aACNX,EAAUzH,OAAS,EAAIyH,EAAUzH,OAAS,EAAI,cAAgByH,EAAUA,EAAUzH,OAAS,aASnGkI,EADqB,IAArBT,EAAUzH,OACD,0BACsB,IAAxBwH,EAAaxH,OACX,sBAEA,sBAGb/B,KAAKqG,aAAamC,QAAQyB,EAAQzB,M,6CA5N7B3C,GAAa,4I,uBAAbA,EAAa,sD,GAAA,K,0fFtB1B,qBACE,sBACE,oBAAW,QAAS,OAEpB,wBACE,uBAA6C,+BAAS,EAAAuE,iBACpD,qBACF,OACF,OAEA,wBACE,uBAAY,gCAAS,EAAAC,gBAAA,KACnB,qBACF,OAEA,8BAGA,8BAGA,8BAGF,OACF,OACF,OAEA,uBAEE,iBACE,sBAEF,OAEA,wBAIF,Q,MArCe,sBAGG,+CAUC,8CAGA,+CAGA,yDASsB,2EACyB,iCAAwB,qBAAxB,CAAwB,+DAAtE,4BAAqB,yBAIJ,6D,2gBEb/B,KDNC,IAAD,Q,MAAOC,G,6CAAAA,I,uBAAAA,I,2BAHA,CAAC,IAAaC,SAAS7E,IACtB,O,GAER,G,4BEHC,IAAD,Q,MAAO8E,G,6CAAAA,I,uBAAAA,I,2BAHA,CAAC,IAAc,IAAa,IAAa,EAA4B,Q,GAG5E","file":"x","sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\n\nimport { EmulationService } from './../../../service/emulation.service';\n\n@Component({\n    selector: 'app-emulation-context-menu',\n    templateUrl: './context-menu.component.html',\n    styleUrls: ['./context-menu.component.scss'],\n})\nexport class ContextMenuComponent implements OnInit {\n    constructor(public emulationService: EmulationService) {}\n\n    ngOnInit(): void {}\n\n    reset(): void {\n        this.emulationService.reset();\n\n        this.onClick();\n    }\n\n    resetNoExtensions(): void {\n        this.emulationService.resetNoExtensions();\n\n        this.onClick();\n    }\n\n    resetHard(): void {\n        this.emulationService.resetHard();\n\n        this.onClick();\n    }\n\n    power(): void {\n        this.emulationService.engagePower();\n\n        this.onClick();\n    }\n\n    help(): void {\n        this.showHelp();\n\n        this.onClick();\n    }\n\n    @Input()\n    onClick: () => void = () => undefined;\n\n    @Input()\n    showHelp: () => void = () => undefined;\n}\n","<ion-list>\n  <ion-item button [detail]=\"false\" (click)=\"power()\" [disabled]=\"!emulationService.isRunning()\">\n    Power\n  </ion-item>\n  <ion-item button [detail]=\"false\" (click)=\"reset()\" [disabled]=\"!emulationService.isRunning()\">\n    Reset\n  </ion-item>\n  <ion-item button [detail]=\"false\" (click)=\"resetNoExtensions()\" [disabled]=\"!emulationService.isRunning()\">\n    Reset (no extensions)\n  </ion-item>\n  <ion-item button [detail]=\"false\" (click)=\"resetHard()\" [disabled]=\"!emulationService.isRunning()\">\n    Hard reset\n  </ion-item>\n  <ion-item button [detail]=\"false\" (click)=\"help()\">\n    Help\n  </ion-item>\n</ion-list>\n","import { BORDER, CanvasDisplayService, HEIGHT, SCALE, WIDTH } from './canvas-display.service';\nimport { Injectable, NgZone } from '@angular/core';\n\nimport { EmulationService } from './emulation.service';\nimport { PalmButton } from '../helper/Cloudpilot';\n\nconst enum Area {\n    silkscreen,\n    buttons,\n}\n\ninterface InteractionSilkscreen {\n    area: Area.silkscreen;\n}\n\ninterface InteractionButton {\n    area: Area.buttons;\n    button: PalmButton;\n}\n\ntype Interaction = InteractionSilkscreen | InteractionButton;\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class EventHandlingService {\n    constructor(\n        private emulationService: EmulationService,\n        private canvasDisplayService: CanvasDisplayService,\n        private ngZone: NgZone\n    ) {}\n\n    bind(canvas: HTMLCanvasElement): void {\n        if (this.canvas) {\n            this.release();\n        }\n\n        this.canvas = canvas;\n\n        this.ngZone.runOutsideAngular(() => {\n            canvas.addEventListener('mousedown', this.handleMouseDown);\n            window.addEventListener('mouseup', this.handeMouseUp);\n            window.addEventListener('mousemove', this.handleMouseMove);\n\n            canvas.addEventListener('touchstart', this.handleTouchStart);\n            canvas.addEventListener('touchmove', this.handleTouchMove);\n            canvas.addEventListener('touchend', this.handleTouchEnd);\n            canvas.addEventListener('touchcancel', this.handleTouchEnd);\n\n            window.addEventListener('keydown', this.handleKeyDown);\n            window.addEventListener('keyup', this.handleKeyUp);\n        });\n    }\n\n    release(): void {\n        if (!this.canvas) return;\n\n        this.canvas.removeEventListener('mousedown', this.handleMouseDown);\n        window.removeEventListener('mouseup', this.handeMouseUp);\n        window.removeEventListener('mousemove', this.handleMouseMove);\n\n        this.canvas.removeEventListener('touchstart', this.handleTouchStart);\n        this.canvas.removeEventListener('touchmove', this.handleTouchMove);\n        this.canvas.removeEventListener('touchend', this.handleTouchEnd);\n        this.canvas.removeEventListener('touchcancel', this.handleTouchEnd);\n\n        window.removeEventListener('keydown', this.handleKeyDown);\n        window.removeEventListener('keyup', this.handleKeyUp);\n\n        for (const button of this.activeButtons) {\n            this.handleButtonUp(button);\n        }\n\n        this.activeButtons.clear();\n        this.interactionsTouch.clear();\n        this.interactionMouse = undefined;\n\n        this.canvas = undefined;\n    }\n\n    isGameMode(): boolean {\n        return this.gameMode;\n    }\n\n    private handleMouseDown = (e: MouseEvent): void => {\n        if (e.button !== 0) return;\n\n        const coords = this.eventToPalmCoordinates(e);\n        if (!coords) return;\n\n        const area = this.determineArea(coords);\n\n        if (area === Area.silkscreen) {\n            this.interactionMouse = { area };\n            this.emulationService.handlePointerMove(...coords);\n        } else {\n            const button = this.determineButton(coords);\n            this.interactionMouse = { area, button };\n\n            this.handleButtonDown(button);\n        }\n    };\n\n    private handleMouseMove = (e: MouseEvent): void => {\n        // tslint:disable-next-line: no-bitwise\n        if (!(e.buttons & 0x01) || this.interactionMouse?.area !== Area.silkscreen) return;\n\n        const coords = this.eventToPalmCoordinates(e, true);\n        if (!coords) return;\n\n        this.emulationService.handlePointerMove(...coords);\n    };\n\n    private handeMouseUp = (e: MouseEvent): void => {\n        if (e.button !== 0) return;\n\n        const interaction = this.interactionMouse;\n        this.interactionMouse = undefined;\n\n        switch (interaction?.area) {\n            case Area.buttons:\n                this.handleButtonUp(interaction.button);\n\n                break;\n\n            case Area.silkscreen:\n                this.emulationService.handlePointerUp();\n\n                break;\n        }\n    };\n\n    private handleTouchStart = (e: TouchEvent): void => {\n        for (let i = 0; i < e.changedTouches.length; i++) {\n            const touch = e.changedTouches.item(i);\n            if (!touch) continue;\n\n            const coords = this.eventToPalmCoordinates(touch);\n            if (!coords) continue;\n\n            const area = this.determineArea(coords);\n            if (area === Area.silkscreen) {\n                this.interactionsTouch.set(touch.identifier, { area });\n                this.emulationService.handlePointerMove(...coords);\n            } else {\n                const button = this.determineButton(coords);\n                this.interactionsTouch.set(touch.identifier, { area, button });\n\n                this.handleButtonDown(button);\n            }\n        }\n\n        if (e.cancelable !== false) e.preventDefault();\n    };\n\n    private handleTouchMove = (e: TouchEvent): void => {\n        for (let i = 0; i < e.changedTouches.length; i++) {\n            const touch = e.changedTouches.item(i);\n            if (!touch) continue;\n\n            if (this.interactionsTouch.get(touch.identifier)?.area === Area.silkscreen) {\n                const coords = this.eventToPalmCoordinates(touch, true);\n                if (!coords) continue;\n\n                this.emulationService.handlePointerMove(...coords);\n            }\n        }\n\n        if (e.cancelable !== false) e.preventDefault();\n    };\n\n    private handleTouchEnd = (e: TouchEvent): void => {\n        for (let i = 0; i < e.changedTouches.length; i++) {\n            const touch = e.changedTouches.item(i);\n            if (!touch) continue;\n\n            const interaction = this.interactionsTouch.get(touch.identifier);\n            this.interactionsTouch.delete(touch.identifier);\n\n            switch (interaction?.area) {\n                case Area.buttons:\n                    this.handleButtonUp(interaction.button);\n\n                    break;\n\n                case Area.silkscreen:\n                    this.emulationService.handlePointerUp();\n\n                    break;\n            }\n        }\n\n        if (e.cancelable !== false) e.preventDefault();\n    };\n\n    private handleKeyDown = (e: KeyboardEvent): void => {\n        if (this.isToggleGameMode(e)) {\n            e.preventDefault();\n\n            this.ngZone.run(() => (this.gameMode = !this.gameMode));\n\n            return;\n        }\n\n        const button = this.buttonFromEvent(e);\n        if (button !== undefined) {\n            this.handleButtonDown(button);\n            e.preventDefault();\n\n            return;\n        }\n\n        const keyCode = this.keyCodeFromEvent(e);\n        if (keyCode !== undefined) {\n            this.emulationService.handleKeyDown(keyCode);\n            e.preventDefault();\n        }\n    };\n\n    private handleKeyUp = (e: KeyboardEvent): void => {\n        const button = this.buttonFromEvent(e);\n        if (button !== undefined) {\n            this.handleButtonUp(button);\n            e.preventDefault();\n\n            return;\n        }\n\n        if (e.key === 'Control') {\n            for (const btn of this.activeButtons) {\n                this.emulationService.handleButtonUp(btn);\n            }\n\n            this.activeButtons.clear();\n            this.canvasDisplayService.drawButtons([]);\n        }\n    };\n\n    private eventToPalmCoordinates(e: MouseEvent | Touch, clip = false): [number, number] | undefined {\n        if (!this.canvas) return;\n\n        const bb = this.canvas.getBoundingClientRect();\n\n        let contentX: number;\n        let contentY: number;\n        let contentWidth: number;\n        let contentHeight: number;\n\n        // CSS object-fit keeps the aspect ratio of the canvas content, but the canvas itself\n        // looses aspect and fills the container -> manually calculate the metrics for the content\n        if (bb.width / bb.height > WIDTH / HEIGHT) {\n            contentHeight = bb.height;\n            contentWidth = (WIDTH / HEIGHT) * bb.height;\n            contentY = bb.top;\n            contentX = bb.left + (bb.width - contentWidth) / 2;\n        } else {\n            contentWidth = bb.width;\n            contentHeight = (HEIGHT / WIDTH) * bb.width;\n            contentX = bb.left;\n            contentY = bb.top + (bb.height - contentHeight) / 2;\n        }\n\n        // Compensate for the border\n        let x = Math.floor((((e.clientX - contentX) / contentWidth) * WIDTH) / SCALE) - BORDER / SCALE;\n        let y = Math.floor((((e.clientY - contentY) / contentHeight) * HEIGHT) / SCALE) - BORDER / SCALE;\n\n        // The canvas layout inside the border is as follows:\n        //\n        // * 0 .. 159   : LCD\n        // * 160        : separator\n        // * 161 .. 220 : silkscreen\n        // * 221 .. 250 : buttons\n        //\n        // we map this to 160x250 lines by mapping the separator to the silkscreen\n\n        if (y >= 161) y -= 1;\n\n        if (clip) {\n            if (x < 0) x = 0;\n            if (x > 159) x = 159;\n            if (y < 0) y = 0;\n            if (y > 249) y = 249;\n        } else {\n            if (x < 0 || x >= 160 || y < 0 || y >= 250) return undefined;\n        }\n\n        return [x, y];\n    }\n\n    private determineArea([, y]: [number, number]): Area {\n        return y >= 220 ? Area.buttons : Area.silkscreen;\n    }\n\n    private determineButton([x, y]: [number, number]): PalmButton {\n        if (x >= 130) return PalmButton.notes;\n        if (x >= 100) return PalmButton.todo;\n        if (x >= 60) return y >= 236 ? PalmButton.down : PalmButton.up;\n        if (x >= 30) return PalmButton.phone;\n\n        return PalmButton.cal;\n    }\n\n    private handleButtonDown(button: PalmButton): void {\n        if (this.activeButtons.has(button)) return;\n\n        this.activeButtons.add(button);\n        this.emulationService.handleButtonDown(button);\n        this.canvasDisplayService.drawButtons(Array.from(this.activeButtons.values()));\n    }\n\n    private handleButtonUp(button: PalmButton): void {\n        if (!this.activeButtons.has(button)) return;\n\n        this.activeButtons.delete(button);\n        this.emulationService.handleButtonUp(button);\n        this.canvasDisplayService.drawButtons(Array.from(this.activeButtons.values()));\n    }\n\n    private isToggleGameMode(e: KeyboardEvent): boolean {\n        return (e.key === 'Shift' && e.ctrlKey) || (e.key === 'Control' && e.shiftKey);\n    }\n\n    private isGameModeActive(e: KeyboardEvent): boolean {\n        return (!this.gameMode && e.ctrlKey) || (this.gameMode && !e.ctrlKey);\n    }\n\n    private buttonFromEvent(e: KeyboardEvent): PalmButton | undefined {\n        switch (e.key) {\n            case 'PageUp':\n                return PalmButton.up;\n\n            case 'PageDown':\n                return PalmButton.down;\n        }\n\n        if (!this.isGameModeActive(e)) return;\n\n        switch (e.key) {\n            case 'w':\n            case 'i':\n            case 'ArrowUp':\n                return PalmButton.up;\n\n            case 's':\n            case 'k':\n            case 'ArrowDown':\n                return PalmButton.down;\n\n            case 'a':\n            case 'j':\n            case 'y':\n            case 'z':\n            case 'ArrowLeft':\n                return PalmButton.cal;\n\n            case 'q':\n            case 'u':\n            case 'x':\n                return PalmButton.phone;\n\n            case 'e':\n            case 'o':\n            case 'c':\n                return PalmButton.todo;\n\n            case 'd':\n            case 'l':\n            case 'v':\n            case 'ArrowRight':\n                return PalmButton.notes;\n        }\n\n        return undefined;\n    }\n\n    private keyCodeFromEvent(e: KeyboardEvent): number | undefined {\n        if (this.isGameModeActive(e)) return;\n\n        if (e.key.length === 1 && e.key.charCodeAt(0) <= 255) return e.key.charCodeAt(0);\n\n        switch (e.key) {\n            case 'ArrowLeft':\n                return 0x1c;\n\n            case 'ArrowRight':\n                return 0x1d;\n\n            case 'ArrowUp':\n                return 0x1e;\n\n            case 'ArrowDown':\n                return 0x1f;\n\n            case 'Backspace':\n                return 0x08;\n\n            case 'Tab':\n                return 0x09;\n\n            case 'Enter':\n                return 0x0a;\n\n            default:\n                return undefined;\n        }\n    }\n\n    private canvas: HTMLCanvasElement | undefined;\n    private interactionMouse: Interaction | undefined;\n    private interactionsTouch = new Map<number, Interaction>();\n    private activeButtons = new Set<PalmButton>();\n    private gameMode = false;\n}\n","<ion-header>\n  <ion-toolbar>\n    <ion-title>{{title}}</ion-title>\n\n    <ion-buttons slot=\"end\">\n      <ion-button [disabled]=\"installFileDisabled\" (click)=\"installFiles()\">\n        <ion-icon name=\"download-outline\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n\n    <ion-buttons slot=\"start\">\n      <ion-button (click)=\"openContextMenu($event)\">\n        <ion-icon name=\"ellipsis-vertical-outline\"></ion-icon>\n      </ion-button>\n\n      <ion-button *ngIf=\"isMuted && !isAudioOff\" (click)=\"mute(false)\">\n        <ion-icon name=\"volume-mute-outline\"></ion-icon>\n      </ion-button>\n      <ion-button *ngIf=\"!isMuted && !isAudioOff\" (click)=\"mute(true)\">\n        <ion-icon name=\"volume-high-outline\"></ion-icon>\n      </ion-button>\n      <ion-button *ngIf=\"eventHandlingService.isGameMode()\" (click)=\"showGameModeHint()\">\n        <ion-icon name=\"game-controller-outline\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n\n  <div class=\"container running-session\" [style.display]=\"emulationState.getCurrentSession() ? undefined : 'none'\">\n    <canvas #canvas [width]=\"canvasWidth\" [height]=\"canvasHeight\" [style.width]=\"cssWidth\" [style.height]=\"cssHeight\"\n      [style.display]=\"emulationState.getCurrentSession() ? 'block' : 'none'\"></canvas>\n  </div>\n\n  <div class=\"container no-session\" *ngIf=\" !emulationState.getCurrentSession()\">\n    <div>No session selected</div>\n  </div>\n\n</ion-content>\n","import { RouterModule, Routes } from '@angular/router';\n\nimport { EmulationPage } from './emulation.page';\nimport { NgModule } from '@angular/core';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: EmulationPage,\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class EmulationPageRoutingModule {}\n","import { AfterViewInit, Component, ElementRef, NgZone, ViewChild } from '@angular/core';\nimport { CanvasDisplayService, HEIGHT, WIDTH } from './../../service/canvas-display.service';\nimport { FileDescriptor, FileService } from 'src/app/service/file.service';\nimport { LoadingController, ModalController, PopoverController } from '@ionic/angular';\n\nimport { AlertService } from 'src/app/service/alert.service';\nimport { AudioService } from './../../service/audio.service';\nimport { ContextMenuComponent } from './context-menu/context-menu.component';\nimport { EmulationService } from './../../service/emulation.service';\nimport { EmulationStateService } from './../../service/emulation-state.service';\nimport { EventHandlingService } from './../../service/event-handling.service';\nimport { HelpComponent } from 'src/app/component/help/help.component';\nimport { KvsService } from './../../service/kvs.service';\nimport { SnapshotService } from './../../service/snapshot.service';\nimport { StorageService } from './../../service/storage.service';\nimport { getStoredSession } from 'src/app/helper/storedSession';\n\n@Component({\n    selector: 'app-emulation',\n    templateUrl: './emulation.page.html',\n    styleUrls: ['./emulation.page.scss'],\n})\nexport class EmulationPage implements AfterViewInit {\n    constructor(\n        public emulationService: EmulationService,\n        public emulationState: EmulationStateService,\n        private storageService: StorageService,\n        public eventHandlingService: EventHandlingService,\n        private canvasDisplayService: CanvasDisplayService,\n        private kvsService: KvsService,\n        private audioService: AudioService,\n        private popoverController: PopoverController,\n        private modalController: ModalController,\n        private alertService: AlertService,\n        private fileService: FileService,\n        private loadingController: LoadingController,\n        private snapshotService: SnapshotService,\n        private ngZone: NgZone\n    ) {}\n\n    ngAfterViewInit(): void {}\n\n    get canvasWidth(): number {\n        return WIDTH;\n    }\n\n    get canvasHeight(): number {\n        return HEIGHT;\n    }\n\n    get cssWidth(): string {\n        return this.canvasWidth / devicePixelRatio + 'px';\n    }\n\n    get cssHeight(): string {\n        return this.canvasHeight / devicePixelRatio + 'px';\n    }\n\n    async ionViewDidEnter(): Promise<void> {\n        let session = this.emulationState.getCurrentSession();\n        const storedSession = getStoredSession();\n\n        if (!session && storedSession !== undefined) {\n            session = await this.storageService.getSession(storedSession);\n        }\n        this.canvasDisplayService.initialize(this.canvasRef.nativeElement, session);\n        this.onNewFrame(this.emulationService.getCanvas());\n\n        this.emulationService.newFrameEvent.addHandler(this.onNewFrame);\n\n        this.emulationService.resume();\n\n        this.ngZone.runOutsideAngular(() => this.eventHandlingService.bind(this.canvasRef.nativeElement));\n    }\n\n    ionViewWillLeave() {\n        this.emulationService.pause();\n\n        this.emulationService.newFrameEvent.removeHandler(this.onNewFrame);\n\n        this.eventHandlingService.release();\n    }\n\n    async openContextMenu(e: MouseEvent): Promise<void> {\n        const popover = await this.popoverController.create({\n            component: ContextMenuComponent,\n            event: e,\n            backdropDismiss: true,\n            showBackdrop: false,\n            componentProps: {\n                onClick: () => popover.dismiss(),\n                showHelp: () => this.showHelp(),\n            },\n        });\n\n        popover.present();\n    }\n\n    installFiles(): void {\n        this.fileService.openFiles(this.processFilesForInstallation.bind(this));\n    }\n\n    async showHelp(): Promise<void> {\n        const modal = await this.modalController.create({\n            component: HelpComponent,\n            componentProps: {\n                url: 'assets/doc/emulation.md',\n            },\n        });\n        await modal.present();\n    }\n\n    async showGameModeHint(): Promise<void> {\n        await this.alertService.message(\n            'Game mode',\n            `\n                The keyboard is in game mode and controls the hardware buttons.\n                Press ctrl-shift in order to exit game mode.\n                <br/><br/>\n                Check the help page for a description of the different keyboard mappings.\n            `,\n            {\n                Help: () => this.showHelp(),\n            }\n        );\n    }\n\n    get installFileDisabled(): boolean {\n        return (\n            !this.emulationService.isRunning() ||\n            this.emulationService.isPowerOff() ||\n            !this.emulationService.isUiInitialized()\n        );\n    }\n\n    get title(): string {\n        return this.emulationState.getCurrentSession()?.name || '';\n    }\n\n    get isMuted(): boolean {\n        return !this.audioService.isInitialized() || this.audioService.isMuted();\n    }\n\n    get isAudioOff(): boolean {\n        return this.kvsService.kvs.volume <= 0;\n    }\n\n    mute(muted: boolean): void {\n        if (muted) {\n            this.audioService.mute(true);\n        } else {\n            if (this.audioService.isInitialized()) {\n                this.audioService.mute(false);\n            } else {\n                this.audioService.initialize();\n            }\n        }\n    }\n\n    private onNewFrame = (canvas: HTMLCanvasElement): void => {\n        this.canvasDisplayService.drawEmulationCanvas(canvas);\n    };\n\n    private async processFilesForInstallation(files: Array<FileDescriptor>): Promise<void> {\n        const loader = await this.loadingController.create({\n            message: 'Installing...',\n        });\n        await loader.present();\n        await this.emulationService.pause();\n        await this.snapshotService.waitForPendingSnapshot();\n\n        const filesSuccess: Array<string> = [];\n        const filesFail: Array<string> = [];\n\n        try {\n            for (const file of files) {\n                if (!/\\.(prc|pdb)$/i.test(file.name)) {\n                    filesFail.push(file.name);\n\n                    continue;\n                }\n\n                if ((await this.emulationService.installFile(file.content)) === 0) {\n                    filesSuccess.push(file.name);\n                } else {\n                    filesFail.push(file.name);\n                }\n\n                await new Promise((r) => setTimeout(r, 0));\n            }\n        } finally {\n            loader.dismiss();\n\n            this.emulationService.resume();\n        }\n\n        let message: string;\n\n        switch (filesSuccess.length) {\n            case 0:\n                message = '';\n                break;\n\n            case 1:\n                message = `Installation of ${filesSuccess[0]} successful.`;\n                break;\n\n            default:\n                message = `Installation of ${filesSuccess.length} files successful.`;\n                break;\n        }\n\n        if (filesFail.length > 0) message += '<br/><br/>';\n\n        switch (filesFail.length) {\n            case 0:\n                break;\n\n            case 1:\n                message += `Installation of ${filesFail[0]} failed.`;\n                break;\n\n            default:\n                message += `Installation of ${filesFail\n                    .slice(0, filesFail.length > 3 ? 3 : filesFail.length - 1)\n                    .join(', ')} and ${\n                    filesFail.length > 3 ? filesFail.length - 3 + ' more files' : filesFail[filesFail.length - 1]\n                } failed.`;\n\n                break;\n        }\n\n        let header;\n\n        if (filesFail.length === 0) {\n            header = 'Installation successful';\n        } else if (filesSuccess.length === 0) {\n            header = 'Installation failed';\n        } else {\n            header = 'Installation errors';\n        }\n\n        this.alertService.message(header, message);\n    }\n\n    @ViewChild('canvas') private canvasRef!: ElementRef<HTMLCanvasElement>;\n}\n","import { CommonModule } from '@angular/common';\nimport { ContextMenuComponent } from './context-menu/context-menu.component';\nimport { EmulationPage } from './emulation.page';\nimport { EmulationPageRoutingModule } from './emulation-routing.module';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { NgModule } from '@angular/core';\nimport { SharedComponentModule } from './../../component/shared-component.module';\n\n@NgModule({\n    imports: [CommonModule, FormsModule, IonicModule, EmulationPageRoutingModule, SharedComponentModule],\n    declarations: [EmulationPage, ContextMenuComponent],\n})\nexport class EmulationPageModule {}\n"]}