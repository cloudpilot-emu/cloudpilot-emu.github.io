{"version":3,"file":"3187.788995d4ef7a3276.js","mappings":"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","names":["Route","constructor","hostRef","registerInstance","this","ionRouteDataChanged","createEvent","url","component","undefined","componentProps","beforeLeave","beforeEnter","onUpdate","newValue","emit","onComponentProps","oldValue","keys1","Object","keys","keys2","length","key","connectedCallback","watchers","RouteRedirect","ionRouteRedirectChanged","from","to","propDidChange","ROUTER_INTENT_NONE","ROUTER_INTENT_FORWARD","generatePath","segments","filter","s","join","parsePath","path","queryString","qsStart","indexOf","substring","split","map","trim","writeNavState","_ref","_asyncToGenerator","root","chain","direction","index","changed","animation","outlet","searchNavNode","Promise","resolve","componentOnReady","route","result","setRouteId","id","params","element","markVisible","e","console","error","_x","_x2","_x3","_x4","apply","arguments","readNavState","_ref2","ids","node","getRouteId","push","_x5","OUTLET_SELECTOR","matches","querySelector","findRouteRedirect","redirects","find","redirect","matchesRedirect","i","expected","matchesIDs","len","Math","min","score","routeId","routeChain","toLowerCase","routeIdParams","pathWithParams","j","matchesSegments","inputSegments","RouterSegments","allparams","matchesDefault","chainSegments","segment","data","next","slice","mergeParams","a","b","assign","findChainForSegments","chains","match","bestScore","matchedChain","computePriority","level","pow","shift","readProp","el","prop","hasAttribute","getAttribute","readRedirects","Array","children","tagName","readRoutes","flattenRouterTree","readRouteNodes","nodes","flattenNode","child","Router","ionRouteWillChange","ionRouteDidChange","previousPath","busy","state","lastState","useHash","componentWillLoad","_this","document","body","window","addEventListener","once","canProceed","runGuards","getSegments","setSegments","writeNavStateRoot","onRoutesChanged","componentDidLoad","debounce","onRedirectChanged","bind","onPopState","_this2","historyDirection","onBackButton","ev","detail","register","processNextHandler","back","canTransition","_this3","_this4","_a","startsWith","currentPath","URL","pathname","search","parsedPath","history","waitPromise","printDebug","_this5","routes","group","forEach","r","debug","groupEnd","printRoutes","printRedirects","navChanged","_this6","warn","findChainForIDs","maxMatches","param","chainToSegments","safeWriteNavState","win","replaceState","title","location","href","_this7","redirectFrom","toSegments","_this8","unlock","lock","_this9","p","_this10","fromChain","beforeLeaveHook","canLeave","toChain","beforeEnterHook","_this11","routeEvent","routeChangeEvent","writeSegments","generateUrl","pushState","readSegments","loc","prefix","hash","removePrefix","redirectFromSegments","redirectedFrom","getElement","RouterLink","onClick","openURL","routerDirection","routerAnimation","color","rel","target","render","mode","getIonMode","attrs","h","Host","class","createColorClasses","t","style","hostContext","selector","closest","cssClassMap","getClassMap","classes","getClassList","isArray","c","SCHEME","test","router","preventDefault"],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/ion-route_4.entry.js","./node_modules/@ionic/core/dist/esm/theme-01f3f29c.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, d as createEvent, f as getElement, h, H as Host } from './index-b7d870cf.js';\nimport { c as componentOnReady, q as debounce } from './helpers-ae653409.js';\nimport { o as openURL, c as createColorClasses } from './theme-01f3f29c.js';\nimport { b as getIonMode } from './ionic-global-1f99b929.js';\n\nconst Route = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\n        this.url = '';\n        this.component = undefined;\n        this.componentProps = undefined;\n        this.beforeLeave = undefined;\n        this.beforeEnter = undefined;\n    }\n    onUpdate(newValue) {\n        this.ionRouteDataChanged.emit(newValue);\n    }\n    onComponentProps(newValue, oldValue) {\n        if (newValue === oldValue) {\n            return;\n        }\n        const keys1 = newValue ? Object.keys(newValue) : [];\n        const keys2 = oldValue ? Object.keys(oldValue) : [];\n        if (keys1.length !== keys2.length) {\n            this.onUpdate(newValue);\n            return;\n        }\n        for (const key of keys1) {\n            if (newValue[key] !== oldValue[key]) {\n                this.onUpdate(newValue);\n                return;\n            }\n        }\n    }\n    connectedCallback() {\n        this.ionRouteDataChanged.emit();\n    }\n    static get watchers() { return {\n        \"url\": [\"onUpdate\"],\n        \"component\": [\"onUpdate\"],\n        \"componentProps\": [\"onComponentProps\"]\n    }; }\n};\n\nconst RouteRedirect = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\n        this.from = undefined;\n        this.to = undefined;\n    }\n    propDidChange() {\n        this.ionRouteRedirectChanged.emit();\n    }\n    connectedCallback() {\n        this.ionRouteRedirectChanged.emit();\n    }\n    static get watchers() { return {\n        \"from\": [\"propDidChange\"],\n        \"to\": [\"propDidChange\"]\n    }; }\n};\n\nconst ROUTER_INTENT_NONE = 'root';\nconst ROUTER_INTENT_FORWARD = 'forward';\nconst ROUTER_INTENT_BACK = 'back';\n\n/** Join the non empty segments with \"/\". */\nconst generatePath = (segments) => {\n    const path = segments.filter((s) => s.length > 0).join('/');\n    return '/' + path;\n};\nconst generateUrl = (segments, useHash, queryString) => {\n    let url = generatePath(segments);\n    if (useHash) {\n        url = '#' + url;\n    }\n    if (queryString !== undefined) {\n        url += '?' + queryString;\n    }\n    return url;\n};\nconst writeSegments = (history, root, useHash, segments, direction, state, queryString) => {\n    const url = generateUrl([...parsePath(root).segments, ...segments], useHash, queryString);\n    if (direction === ROUTER_INTENT_FORWARD) {\n        history.pushState(state, '', url);\n    }\n    else {\n        history.replaceState(state, '', url);\n    }\n};\n/**\n * Transforms a chain to a list of segments.\n *\n * Notes:\n * - parameter segments of the form :param are replaced with their value,\n * - null is returned when a value is missing for any parameter segment.\n */\nconst chainToSegments = (chain) => {\n    const segments = [];\n    for (const route of chain) {\n        for (const segment of route.segments) {\n            if (segment[0] === ':') {\n                // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n                const param = route.params && route.params[segment.slice(1)];\n                if (!param) {\n                    return null;\n                }\n                segments.push(param);\n            }\n            else if (segment !== '') {\n                segments.push(segment);\n            }\n        }\n    }\n    return segments;\n};\n/**\n * Removes the prefix segments from the path segments.\n *\n * Return:\n * - null when the path segments do not start with the passed prefix,\n * - the path segments after the prefix otherwise.\n */\nconst removePrefix = (prefix, segments) => {\n    if (prefix.length > segments.length) {\n        return null;\n    }\n    if (prefix.length <= 1 && prefix[0] === '') {\n        return segments;\n    }\n    for (let i = 0; i < prefix.length; i++) {\n        if (prefix[i] !== segments[i]) {\n            return null;\n        }\n    }\n    if (segments.length === prefix.length) {\n        return [''];\n    }\n    return segments.slice(prefix.length);\n};\nconst readSegments = (loc, root, useHash) => {\n    const prefix = parsePath(root).segments;\n    const pathname = useHash ? loc.hash.slice(1) : loc.pathname;\n    const segments = parsePath(pathname).segments;\n    return removePrefix(prefix, segments);\n};\n/**\n * Parses the path to:\n * - segments an array of '/' separated parts,\n * - queryString (undefined when no query string).\n */\nconst parsePath = (path) => {\n    let segments = [''];\n    let queryString;\n    if (path != null) {\n        const qsStart = path.indexOf('?');\n        if (qsStart > -1) {\n            queryString = path.substring(qsStart + 1);\n            path = path.substring(0, qsStart);\n        }\n        segments = path\n            .split('/')\n            .map((s) => s.trim())\n            .filter((s) => s.length > 0);\n        if (segments.length === 0) {\n            segments = [''];\n        }\n    }\n    return { segments, queryString };\n};\n\nconst printRoutes = (routes) => {\n    console.group(`[ion-core] ROUTES[${routes.length}]`);\n    for (const chain of routes) {\n        const segments = [];\n        chain.forEach((r) => segments.push(...r.segments));\n        const ids = chain.map((r) => r.id);\n        console.debug(`%c ${generatePath(segments)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n    }\n    console.groupEnd();\n};\nconst printRedirects = (redirects) => {\n    console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n    for (const redirect of redirects) {\n        if (redirect.to) {\n            console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to.segments)}`, 'font-weight: bold');\n        }\n    }\n    console.groupEnd();\n};\n\n/**\n * Activates the passed route chain.\n *\n * There must be exactly one outlet per route entry in the chain.\n *\n * The methods calls setRouteId on each of the outlet with the corresponding route entry in the chain.\n * setRouteId will create or select the view in the outlet.\n */\nconst writeNavState = async (root, chain, direction, index, changed = false, animation) => {\n    try {\n        // find next navigation outlet in the DOM\n        const outlet = searchNavNode(root);\n        // make sure we can continue interacting the DOM, otherwise abort\n        if (index >= chain.length || !outlet) {\n            return changed;\n        }\n        await new Promise((resolve) => componentOnReady(outlet, resolve));\n        const route = chain[index];\n        const result = await outlet.setRouteId(route.id, route.params, direction, animation);\n        // if the outlet changed the page, reset navigation to neutral (no direction)\n        // this means nested outlets will not animate\n        if (result.changed) {\n            direction = ROUTER_INTENT_NONE;\n            changed = true;\n        }\n        // recursively set nested outlets\n        changed = await writeNavState(result.element, chain, direction, index + 1, changed, animation);\n        // once all nested outlets are visible let's make the parent visible too,\n        // using markVisible prevents flickering\n        if (result.markVisible) {\n            await result.markVisible();\n        }\n        return changed;\n    }\n    catch (e) {\n        console.error(e);\n        return false;\n    }\n};\n/**\n * Recursively walks the outlet in the DOM.\n *\n * The function returns a list of RouteID corresponding to each of the outlet and the last outlet without a RouteID.\n */\nconst readNavState = async (root) => {\n    const ids = [];\n    let outlet;\n    let node = root;\n    // eslint-disable-next-line no-cond-assign\n    while ((outlet = searchNavNode(node))) {\n        const id = await outlet.getRouteId();\n        if (id) {\n            node = id.element;\n            id.element = undefined;\n            ids.push(id);\n        }\n        else {\n            break;\n        }\n    }\n    return { ids, outlet };\n};\nconst waitUntilNavNode = () => {\n    if (searchNavNode(document.body)) {\n        return Promise.resolve();\n    }\n    return new Promise((resolve) => {\n        window.addEventListener('ionNavWillLoad', () => resolve(), { once: true });\n    });\n};\n/** Selector for all the outlets supported by the router. */\nconst OUTLET_SELECTOR = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\nconst searchNavNode = (root) => {\n    if (!root) {\n        return undefined;\n    }\n    if (root.matches(OUTLET_SELECTOR)) {\n        return root;\n    }\n    const outlet = root.querySelector(OUTLET_SELECTOR);\n    return outlet !== null && outlet !== void 0 ? outlet : undefined;\n};\n\n/**\n * Returns whether the given redirect matches the given path segments.\n *\n * A redirect matches when the segments of the path and redirect.from are equal.\n * Note that segments are only checked until redirect.from contains a '*' which matches any path segment.\n * The path ['some', 'path', 'to', 'page'] matches both ['some', 'path', 'to', 'page'] and ['some', 'path', '*'].\n */\nconst matchesRedirect = (segments, redirect) => {\n    const { from, to } = redirect;\n    if (to === undefined) {\n        return false;\n    }\n    if (from.length > segments.length) {\n        return false;\n    }\n    for (let i = 0; i < from.length; i++) {\n        const expected = from[i];\n        if (expected === '*') {\n            return true;\n        }\n        if (expected !== segments[i]) {\n            return false;\n        }\n    }\n    return from.length === segments.length;\n};\n/** Returns the first redirect matching the path segments or undefined when no match found. */\nconst findRouteRedirect = (segments, redirects) => {\n    return redirects.find((redirect) => matchesRedirect(segments, redirect));\n};\nconst matchesIDs = (ids, chain) => {\n    const len = Math.min(ids.length, chain.length);\n    let score = 0;\n    for (let i = 0; i < len; i++) {\n        const routeId = ids[i];\n        const routeChain = chain[i];\n        // Skip results where the route id does not match the chain at the same index\n        if (routeId.id.toLowerCase() !== routeChain.id) {\n            break;\n        }\n        if (routeId.params) {\n            const routeIdParams = Object.keys(routeId.params);\n            // Only compare routes with the chain that have the same number of parameters.\n            if (routeIdParams.length === routeChain.segments.length) {\n                // Maps the route's params into a path based on the path variable names,\n                // to compare against the route chain format.\n                //\n                // Before:\n                // ```ts\n                // {\n                //  params: {\n                //    s1: 'a',\n                //    s2: 'b'\n                //  }\n                // }\n                // ```\n                //\n                // After:\n                // ```ts\n                // [':s1',':s2']\n                // ```\n                //\n                const pathWithParams = routeIdParams.map((key) => `:${key}`);\n                for (let j = 0; j < pathWithParams.length; j++) {\n                    // Skip results where the path variable is not a match\n                    if (pathWithParams[j].toLowerCase() !== routeChain.segments[j]) {\n                        break;\n                    }\n                    // Weight path matches for the same index higher.\n                    score++;\n                }\n            }\n        }\n        // Weight id matches\n        score++;\n    }\n    return score;\n};\n/**\n * Matches the segments against the chain.\n *\n * Returns:\n * - null when there is no match,\n * - a chain with the params properties updated with the parameter segments on match.\n */\nconst matchesSegments = (segments, chain) => {\n    const inputSegments = new RouterSegments(segments);\n    let matchesDefault = false;\n    let allparams;\n    for (let i = 0; i < chain.length; i++) {\n        const chainSegments = chain[i].segments;\n        if (chainSegments[0] === '') {\n            matchesDefault = true;\n        }\n        else {\n            for (const segment of chainSegments) {\n                const data = inputSegments.next();\n                // data param\n                if (segment[0] === ':') {\n                    if (data === '') {\n                        return null;\n                    }\n                    allparams = allparams || [];\n                    const params = allparams[i] || (allparams[i] = {});\n                    params[segment.slice(1)] = data;\n                }\n                else if (data !== segment) {\n                    return null;\n                }\n            }\n            matchesDefault = false;\n        }\n    }\n    const matches = matchesDefault ? matchesDefault === (inputSegments.next() === '') : true;\n    if (!matches) {\n        return null;\n    }\n    if (allparams) {\n        return chain.map((route, i) => ({\n            id: route.id,\n            segments: route.segments,\n            params: mergeParams(route.params, allparams[i]),\n            beforeEnter: route.beforeEnter,\n            beforeLeave: route.beforeLeave,\n        }));\n    }\n    return chain;\n};\n/**\n * Merges the route parameter objects.\n * Returns undefined when both parameters are undefined.\n */\nconst mergeParams = (a, b) => {\n    return a || b ? Object.assign(Object.assign({}, a), b) : undefined;\n};\n/**\n * Finds the best match for the ids in the chains.\n *\n * Returns the best match or null when no match is found.\n * When a chain is returned the parameters are updated from the RouteIDs.\n * That is they contain both the componentProps of the <ion-route> and the parameter segment.\n */\nconst findChainForIDs = (ids, chains) => {\n    let match = null;\n    let maxMatches = 0;\n    for (const chain of chains) {\n        const score = matchesIDs(ids, chain);\n        if (score > maxMatches) {\n            match = chain;\n            maxMatches = score;\n        }\n    }\n    if (match) {\n        return match.map((route, i) => {\n            var _a;\n            return ({\n                id: route.id,\n                segments: route.segments,\n                params: mergeParams(route.params, (_a = ids[i]) === null || _a === void 0 ? void 0 : _a.params),\n            });\n        });\n    }\n    return null;\n};\n/**\n * Finds the best match for the segments in the chains.\n *\n * Returns the best match or null when no match is found.\n * When a chain is returned the parameters are updated from the segments.\n * That is they contain both the componentProps of the <ion-route> and the parameter segments.\n */\nconst findChainForSegments = (segments, chains) => {\n    let match = null;\n    let bestScore = 0;\n    for (const chain of chains) {\n        const matchedChain = matchesSegments(segments, chain);\n        if (matchedChain !== null) {\n            const score = computePriority(matchedChain);\n            if (score > bestScore) {\n                bestScore = score;\n                match = matchedChain;\n            }\n        }\n    }\n    return match;\n};\n/**\n * Computes the priority of a chain.\n *\n * Parameter segments are given a lower priority over fixed segments.\n *\n * Considering the following 2 chains matching the path /path/to/page:\n * - /path/to/:where\n * - /path/to/page\n *\n * The second one will be given a higher priority because \"page\" is a fixed segment (vs \":where\", a parameter segment).\n */\nconst computePriority = (chain) => {\n    let score = 1;\n    let level = 1;\n    for (const route of chain) {\n        for (const segment of route.segments) {\n            if (segment[0] === ':') {\n                score += Math.pow(1, level);\n            }\n            else if (segment !== '') {\n                score += Math.pow(2, level);\n            }\n            level++;\n        }\n    }\n    return score;\n};\nclass RouterSegments {\n    constructor(segments) {\n        this.segments = segments.slice();\n    }\n    next() {\n        if (this.segments.length > 0) {\n            return this.segments.shift();\n        }\n        return '';\n    }\n}\n\nconst readProp = (el, prop) => {\n    if (prop in el) {\n        return el[prop];\n    }\n    if (el.hasAttribute(prop)) {\n        return el.getAttribute(prop);\n    }\n    return null;\n};\n/**\n * Extracts the redirects (that is <ion-route-redirect> elements inside the root).\n *\n * The redirects are returned as a list of RouteRedirect.\n */\nconst readRedirects = (root) => {\n    return Array.from(root.children)\n        .filter((el) => el.tagName === 'ION-ROUTE-REDIRECT')\n        .map((el) => {\n        const to = readProp(el, 'to');\n        return {\n            from: parsePath(readProp(el, 'from')).segments,\n            to: to == null ? undefined : parsePath(to),\n        };\n    });\n};\n/**\n * Extracts all the routes (that is <ion-route> elements inside the root).\n *\n * The routes are returned as a list of chains - the flattened tree.\n */\nconst readRoutes = (root) => {\n    return flattenRouterTree(readRouteNodes(root));\n};\n/**\n * Reads the route nodes as a tree modeled after the DOM tree of <ion-route> elements.\n *\n * Note: routes without a component are ignored together with their children.\n */\nconst readRouteNodes = (node) => {\n    return Array.from(node.children)\n        .filter((el) => el.tagName === 'ION-ROUTE' && el.component)\n        .map((el) => {\n        const component = readProp(el, 'component');\n        return {\n            segments: parsePath(readProp(el, 'url')).segments,\n            id: component.toLowerCase(),\n            params: el.componentProps,\n            beforeLeave: el.beforeLeave,\n            beforeEnter: el.beforeEnter,\n            children: readRouteNodes(el),\n        };\n    });\n};\n/**\n * Flattens a RouterTree in a list of chains.\n *\n * Each chain represents a path from the root node to a terminal node.\n */\nconst flattenRouterTree = (nodes) => {\n    const chains = [];\n    for (const node of nodes) {\n        flattenNode([], chains, node);\n    }\n    return chains;\n};\n/** Flattens a route node recursively and push each branch to the chains list. */\nconst flattenNode = (chain, chains, node) => {\n    chain = [\n        ...chain,\n        {\n            id: node.id,\n            segments: node.segments,\n            params: node.params,\n            beforeLeave: node.beforeLeave,\n            beforeEnter: node.beforeEnter,\n        },\n    ];\n    if (node.children.length === 0) {\n        chains.push(chain);\n        return;\n    }\n    for (const child of node.children) {\n        flattenNode(chain, chains, child);\n    }\n};\n\nconst Router = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n        this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n        this.previousPath = null;\n        this.busy = false;\n        this.state = 0;\n        this.lastState = 0;\n        this.root = '/';\n        this.useHash = true;\n    }\n    async componentWillLoad() {\n        await waitUntilNavNode();\n        const canProceed = await this.runGuards(this.getSegments());\n        if (canProceed !== true) {\n            if (typeof canProceed === 'object') {\n                const { redirect } = canProceed;\n                const path = parsePath(redirect);\n                this.setSegments(path.segments, ROUTER_INTENT_NONE, path.queryString);\n                await this.writeNavStateRoot(path.segments, ROUTER_INTENT_NONE);\n            }\n        }\n        else {\n            await this.onRoutesChanged();\n        }\n    }\n    componentDidLoad() {\n        window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n        window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n    }\n    async onPopState() {\n        const direction = this.historyDirection();\n        let segments = this.getSegments();\n        const canProceed = await this.runGuards(segments);\n        if (canProceed !== true) {\n            if (typeof canProceed === 'object') {\n                segments = parsePath(canProceed.redirect).segments;\n            }\n            else {\n                return false;\n            }\n        }\n        return this.writeNavStateRoot(segments, direction);\n    }\n    onBackButton(ev) {\n        ev.detail.register(0, (processNextHandler) => {\n            this.back();\n            processNextHandler();\n        });\n    }\n    /** @internal */\n    async canTransition() {\n        const canProceed = await this.runGuards();\n        if (canProceed !== true) {\n            if (typeof canProceed === 'object') {\n                return canProceed.redirect;\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Navigate to the specified path.\n     *\n     * @param path The path to navigate to.\n     * @param direction The direction of the animation. Defaults to `\"forward\"`.\n     */\n    async push(path, direction = 'forward', animation) {\n        var _a;\n        if (path.startsWith('.')) {\n            const currentPath = (_a = this.previousPath) !== null && _a !== void 0 ? _a : '/';\n            // Convert currentPath to an URL by pre-pending a protocol and a host to resolve the relative path.\n            const url = new URL(path, `https://host/${currentPath}`);\n            path = url.pathname + url.search;\n        }\n        let parsedPath = parsePath(path);\n        const canProceed = await this.runGuards(parsedPath.segments);\n        if (canProceed !== true) {\n            if (typeof canProceed === 'object') {\n                parsedPath = parsePath(canProceed.redirect);\n            }\n            else {\n                return false;\n            }\n        }\n        this.setSegments(parsedPath.segments, direction, parsedPath.queryString);\n        return this.writeNavStateRoot(parsedPath.segments, direction, animation);\n    }\n    /** Go back to previous page in the window.history. */\n    back() {\n        window.history.back();\n        return Promise.resolve(this.waitPromise);\n    }\n    /** @internal */\n    async printDebug() {\n        printRoutes(readRoutes(this.el));\n        printRedirects(readRedirects(this.el));\n    }\n    /** @internal */\n    async navChanged(direction) {\n        if (this.busy) {\n            console.warn('[ion-router] router is busy, navChanged was cancelled');\n            return false;\n        }\n        const { ids, outlet } = await readNavState(window.document.body);\n        const routes = readRoutes(this.el);\n        const chain = findChainForIDs(ids, routes);\n        if (!chain) {\n            console.warn('[ion-router] no matching URL for ', ids.map((i) => i.id));\n            return false;\n        }\n        const segments = chainToSegments(chain);\n        if (!segments) {\n            console.warn('[ion-router] router could not match path because some required param is missing');\n            return false;\n        }\n        this.setSegments(segments, direction);\n        await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, segments, null, ids.length);\n        return true;\n    }\n    /** This handler gets called when a `ion-route-redirect` component is added to the DOM or if the from or to property of such node changes. */\n    onRedirectChanged() {\n        const segments = this.getSegments();\n        if (segments && findRouteRedirect(segments, readRedirects(this.el))) {\n            this.writeNavStateRoot(segments, ROUTER_INTENT_NONE);\n        }\n    }\n    /** This handler gets called when a `ion-route` component is added to the DOM or if the from or to property of such node changes. */\n    onRoutesChanged() {\n        return this.writeNavStateRoot(this.getSegments(), ROUTER_INTENT_NONE);\n    }\n    historyDirection() {\n        var _a;\n        const win = window;\n        if (win.history.state === null) {\n            this.state++;\n            win.history.replaceState(this.state, win.document.title, (_a = win.document.location) === null || _a === void 0 ? void 0 : _a.href);\n        }\n        const state = win.history.state;\n        const lastState = this.lastState;\n        this.lastState = state;\n        if (state > lastState || (state >= lastState && lastState > 0)) {\n            return ROUTER_INTENT_FORWARD;\n        }\n        if (state < lastState) {\n            return ROUTER_INTENT_BACK;\n        }\n        return ROUTER_INTENT_NONE;\n    }\n    async writeNavStateRoot(segments, direction, animation) {\n        if (!segments) {\n            console.error('[ion-router] URL is not part of the routing set');\n            return false;\n        }\n        // lookup redirect rule\n        const redirects = readRedirects(this.el);\n        const redirect = findRouteRedirect(segments, redirects);\n        let redirectFrom = null;\n        if (redirect) {\n            const { segments: toSegments, queryString } = redirect.to;\n            this.setSegments(toSegments, direction, queryString);\n            redirectFrom = redirect.from;\n            segments = toSegments;\n        }\n        // lookup route chain\n        const routes = readRoutes(this.el);\n        const chain = findChainForSegments(segments, routes);\n        if (!chain) {\n            console.error('[ion-router] the path does not match any route');\n            return false;\n        }\n        // write DOM give\n        return this.safeWriteNavState(document.body, chain, direction, segments, redirectFrom, 0, animation);\n    }\n    async safeWriteNavState(node, chain, direction, segments, redirectFrom, index = 0, animation) {\n        const unlock = await this.lock();\n        let changed = false;\n        try {\n            changed = await this.writeNavState(node, chain, direction, segments, redirectFrom, index, animation);\n        }\n        catch (e) {\n            console.error(e);\n        }\n        unlock();\n        return changed;\n    }\n    async lock() {\n        const p = this.waitPromise;\n        let resolve;\n        this.waitPromise = new Promise((r) => (resolve = r));\n        if (p !== undefined) {\n            await p;\n        }\n        return resolve;\n    }\n    /**\n     * Executes the beforeLeave hook of the source route and the beforeEnter hook of the target route if they exist.\n     *\n     * When the beforeLeave hook does not return true (to allow navigating) then that value is returned early and the beforeEnter is executed.\n     * Otherwise the beforeEnterHook hook of the target route is executed.\n     */\n    async runGuards(to = this.getSegments(), from) {\n        if (from === undefined) {\n            from = parsePath(this.previousPath).segments;\n        }\n        if (!to || !from) {\n            return true;\n        }\n        const routes = readRoutes(this.el);\n        const fromChain = findChainForSegments(from, routes);\n        // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n        const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\n        const canLeave = beforeLeaveHook ? await beforeLeaveHook() : true;\n        if (canLeave === false || typeof canLeave === 'object') {\n            return canLeave;\n        }\n        const toChain = findChainForSegments(to, routes);\n        // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n        const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\n        return beforeEnterHook ? beforeEnterHook() : true;\n    }\n    async writeNavState(node, chain, direction, segments, redirectFrom, index = 0, animation) {\n        if (this.busy) {\n            console.warn('[ion-router] router is busy, transition was cancelled');\n            return false;\n        }\n        this.busy = true;\n        // generate route event and emit will change\n        const routeEvent = this.routeChangeEvent(segments, redirectFrom);\n        if (routeEvent) {\n            this.ionRouteWillChange.emit(routeEvent);\n        }\n        const changed = await writeNavState(node, chain, direction, index, false, animation);\n        this.busy = false;\n        // emit did change\n        if (routeEvent) {\n            this.ionRouteDidChange.emit(routeEvent);\n        }\n        return changed;\n    }\n    setSegments(segments, direction, queryString) {\n        this.state++;\n        writeSegments(window.history, this.root, this.useHash, segments, direction, this.state, queryString);\n    }\n    getSegments() {\n        return readSegments(window.location, this.root, this.useHash);\n    }\n    routeChangeEvent(toSegments, redirectFromSegments) {\n        const from = this.previousPath;\n        const to = generatePath(toSegments);\n        this.previousPath = to;\n        if (to === from) {\n            return null;\n        }\n        const redirectedFrom = redirectFromSegments ? generatePath(redirectFromSegments) : null;\n        return {\n            from,\n            redirectedFrom,\n            to,\n        };\n    }\n    get el() { return getElement(this); }\n};\n\nconst routerLinkCss = \":host{--background:transparent;--color:var(--ion-color-primary, #3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\n\nconst RouterLink = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.onClick = (ev) => {\n            openURL(this.href, ev, this.routerDirection, this.routerAnimation);\n        };\n        this.color = undefined;\n        this.href = undefined;\n        this.rel = undefined;\n        this.routerDirection = 'forward';\n        this.routerAnimation = undefined;\n        this.target = undefined;\n    }\n    render() {\n        const mode = getIonMode(this);\n        const attrs = {\n            href: this.href,\n            rel: this.rel,\n            target: this.target,\n        };\n        return (h(Host, { onClick: this.onClick, class: createColorClasses(this.color, {\n                [mode]: true,\n                'ion-activatable': true,\n            }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\n    }\n};\nRouterLink.style = routerLinkCss;\n\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nconst hostContext = (selector, el) => {\n    return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color, cssClassMap) => {\n    return typeof color === 'string' && color.length > 0\n        ? Object.assign({ 'ion-color': true, [`ion-color-${color}`]: true }, cssClassMap) : cssClassMap;\n};\nconst getClassList = (classes) => {\n    if (classes !== undefined) {\n        const array = Array.isArray(classes) ? classes : classes.split(' ');\n        return array\n            .filter((c) => c != null)\n            .map((c) => c.trim())\n            .filter((c) => c !== '');\n    }\n    return [];\n};\nconst getClassMap = (classes) => {\n    const map = {};\n    getClassList(classes).forEach((c) => (map[c] = true));\n    return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction, animation) => {\n    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n        const router = document.querySelector('ion-router');\n        if (router) {\n            if (ev != null) {\n                ev.preventDefault();\n            }\n            return router.push(url, direction, animation);\n        }\n    }\n    return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n"],"x_google_ignoreList":[0,1]}