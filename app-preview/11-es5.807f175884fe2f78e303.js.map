{"version":3,"sources":["webpack:///src/app/tabs/tabs.page.ts","webpack:///src/app/tabs/tabs.module.ts","webpack:///src/app/tabs/tabs-routing.module.ts","webpack:///src/app/tabs/tabs.page.html","webpack:///src/app/service/canvas-display.service.ts"],"names":["TabsPage","TabsPageModule","TabsPageRoutingModule","routes","path","component","router","canvasDisplayService","updateUseSmallUI","isMD","document","querySelector","headerHeight","this","useSmallUI","canvasArea","window","innerHeight","innerWidth","addEventListener","url","availableHeight","availableWidth","scaledWidth","scaledHeight","Math","min","height","devicePixelRatio","width","children","loadChildren","then","m","EmulationPageModule","SessionsPageModule","SettingsPageModule","AboutPageModule","redirectTo","pathMatch","forChild","skin","DEFAULT_DEVICE","m515","BACKGROUND_COLOR_SILKSCREEN","BACKGROUND_COLOR_GRAYSCALE_DEVICE","calculateLayout","device","dimensions","scale","screenSize","borderWidth","frameDevice","frameCanvas","dist","x","coord","separatorHeight","buttonHeight","silkscreenHeight","screenHeight","screenWidth","screenLeft","screenTop","screenBottom","silkscreenTop","silkscreenBottom","buttonWidth","buttonTop","buttonBottom","prepareImage","key","image","cachedWidth","cachedHeight","canvas","createElement","ctx","getContext","Error","drawImage","deferredImage","svg","Promise","resolve","reject","Image","onload","onerror","src","btoa","IMAGE_SILKSCREEN_V","IMAGE_SILKSCREEN_M500","IMAGE_SILKSCREEN_M515","IMAGE_SILKSCREEN_IIIC","IMAGE_SILKSCREEN_M100","IMAGE_SILKSCREEN_M130","IMAGE_SILKSCREEN_TUNGSTENW","IMAGE_SILKSCREEN_PILOT","IMAGE_BUTTONS_V","IMAGE_BUTTONS_M515","IMAGE_BUTTONS_M500","IMAGE_BUTTONS_IIIC","IMAGE_BUTTONS_IIIX","IMAGE_BUTTONS_IIIE","IMAGE_BUTTONS_M100","IMAGE_BUTTONS_M125","IMAGE_BUTTONS_M130","IMAGE_BUTTONS_TUNGSTENW","IMAGE_BUTTONS_PILOT","CanvasDisplayService","layout","session","backgroundColor","fillCanvasRect","frameColor","fillRect","all","drawSilkscreen","drawButtons","imageSmoothingEnabled","imageSmoothingQuality","silkscreenImage","snapshotStatistics","emulationStatistics","beginPath","fontScale","font","fillStyle","Date","timestamp","toLocaleTimeString","pages","timeTotal","toFixed","timeBlocking","hostSpeed","emulationSpeed","averageFPS","forEach","line","i","fillText","activeButtons","buttonsImage","includes","e","clip","contentX","contentY","contentWidth","contentHeight","bb","getBoundingClientRect","top","left","floor","clientX","y","clientY","totalHeight","style","rect","fill","palmPilot","pilot","iii","palmVII","m500","m505","iiic","m100","m105","m125","m130","i710","iiix","palmVx","palmV","iiixe","iiie"],"mappings":"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","file":"x","sourcesContent":["import { CanvasDisplayService } from './../service/canvas-display.service';\nimport { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n    selector: 'app-tabs',\n    templateUrl: 'tabs.page.html',\n    styleUrls: ['tabs.page.scss'],\n})\nexport class TabsPage {\n    constructor(private router: Router, private canvasDisplayService: CanvasDisplayService) {\n        window.addEventListener('resize', this.updateUseSmallUI);\n\n        this.updateUseSmallUI();\n    }\n\n    get smallUI(): boolean {\n        return this.router.url === '/tab/emulation' && this.useSmallUI;\n    }\n\n    private updateUseSmallUI = (): void => {\n        const isMD = !!document.querySelector('html.md');\n        const headerHeight = isMD ? 56 : 44;\n        const tabbarHeight = isMD ? 57 : 51;\n        const canvasPadding = 6;\n\n        this.useSmallUI =\n            this.canvasArea(window.innerHeight - headerHeight - tabbarHeight - canvasPadding, window.innerWidth - 6) <\n            this.canvasArea(window.innerHeight - headerHeight - 25 - canvasPadding, window.innerWidth - 6);\n    };\n\n    private canvasArea(availableHeight: number, availableWidth: number): number {\n        availableHeight = Math.min(availableHeight, this.canvasDisplayService.height / devicePixelRatio);\n        availableWidth = Math.min(availableWidth, this.canvasDisplayService.width / devicePixelRatio);\n\n        let scaledWidth: number;\n        let scaledHeight: number;\n\n        if (availableWidth / availableHeight > this.canvasDisplayService.width / this.canvasDisplayService.height) {\n            scaledHeight = availableHeight;\n            scaledWidth = (availableHeight / this.canvasDisplayService.height) * this.canvasDisplayService.width;\n        } else {\n            scaledWidth = availableWidth;\n            scaledHeight = (availableWidth / this.canvasDisplayService.width) * this.canvasDisplayService.height;\n        }\n\n        return scaledWidth * scaledHeight;\n    }\n\n    private useSmallUI = false;\n}\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { NgModule } from '@angular/core';\nimport { TabsPage } from './tabs.page';\nimport { TabsPageRoutingModule } from './tabs-routing.module';\n\n@NgModule({\n    imports: [IonicModule, CommonModule, FormsModule, TabsPageRoutingModule],\n    declarations: [TabsPage],\n})\nexport class TabsPageModule {}\n","import { RouterModule, Routes } from '@angular/router';\n\nimport { NgModule } from '@angular/core';\nimport { TabsPage } from './tabs.page';\n\nconst routes: Routes = [\n    {\n        path: 'tab',\n        component: TabsPage,\n        children: [\n            {\n                path: 'emulation',\n                loadChildren: () => import('../page/emulation/emulation.module').then((m) => m.EmulationPageModule),\n            },\n            {\n                path: 'sessions',\n                loadChildren: () => import('../page/sessions/sessions.module').then((m) => m.SessionsPageModule),\n            },\n            {\n                path: 'settings',\n                loadChildren: () => import('../page/settings/settings.module').then((m) => m.SettingsPageModule),\n            },\n            {\n                path: 'about',\n                loadChildren: () => import('../page/about/about.module').then((m) => m.AboutPageModule),\n            },\n            {\n                path: '',\n                redirectTo: '/tab/sessions',\n                pathMatch: 'full',\n            },\n        ],\n    },\n    {\n        path: '',\n        redirectTo: '/tab/sessions',\n        pathMatch: 'full',\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class TabsPageRoutingModule {}\n","<ion-tabs>\n\n  <div class=\"overflow-wrapper\">\n    <ion-tab-bar [class.small-ui]=\"smallUI\" slot=\"bottom\">\n      <ion-tab-button tab=\"emulation\">\n        <ion-icon name=\"phone-portrait-outline\"></ion-icon>\n        <ion-label>Emulator</ion-label>\n      </ion-tab-button>\n\n      <ion-tab-button tab=\"sessions\">\n        <ion-icon name=\"albums-outline\"></ion-icon>\n        <ion-label>Sessions</ion-label>\n      </ion-tab-button>\n\n      <ion-tab-button tab=\"settings\">\n        <ion-icon name=\"cog-outline\"></ion-icon>\n        <ion-label>Settings</ion-label>\n      </ion-tab-button>\n\n      <ion-tab-button tab=\"about\">\n        <ion-icon name=\"help-outline\"></ion-icon>\n        <ion-label>About</ion-label>\n      </ion-tab-button>\n    </ion-tab-bar>\n  </div>\n\n</ion-tabs>\n","import { Injectable, defineInjectable } from '@angular/core';\nimport { deviceDimensions, isColor } from '../helper/deviceProperties';\n\nimport { DeviceId } from '../model/DeviceId';\nimport { EmulationStatistics } from './../model/EmulationStatistics';\nimport { GRAYSCALE_PALETTE_HEX } from './../helper/palette';\nimport { PalmButton } from '../helper/Cloudpilot';\nimport { ScreenSize } from '../model/Dimensions';\nimport { Session } from '../model/Session';\nimport { SnapshotStatistics } from './../model/SnapshotStatistics';\n\nconst skin = import('../skin');\n\nconst DEFAULT_DEVICE = DeviceId.m515;\nconst BACKGROUND_COLOR_SILKSCREEN = GRAYSCALE_PALETTE_HEX[2];\nconst BACKGROUND_COLOR_GRAYSCALE_DEVICE = GRAYSCALE_PALETTE_HEX[0];\nconst BACKGROUND_COLOR_COLOR_DEVICE = 'white';\nconst FRAME_COLOR_COLOR_DEVICE = 'white';\nconst FRAME_COLOR_GRAYSCALE_DEVICE = '#ccc';\nconst BACKGROUND_ACTIVE_BUTTON = 'rgba(0,0,0,0.2)';\n\ninterface FrameDependent {\n    frameDevice: number;\n    frameCanvas: number;\n}\n\ninterface Layout {\n    scale: number;\n    borderWidth: FrameDependent;\n    width: FrameDependent;\n    height: FrameDependent;\n    screenHeight: FrameDependent;\n    screenWidth: FrameDependent;\n    screenLeft: FrameDependent;\n    screenTop: FrameDependent;\n    screenBottom: FrameDependent;\n    separatorHeight: FrameDependent;\n    silkscreenHeight: FrameDependent;\n    silkscreenTop: FrameDependent;\n    silkscreenBottom: FrameDependent;\n    buttonHeight: FrameDependent;\n    buttonWidth: FrameDependent;\n    buttonTop: FrameDependent;\n    buttonBottom: FrameDependent;\n}\n\nfunction calculateLayout(device: DeviceId): Layout {\n    const dimensions = deviceDimensions(device);\n    const scale = (dimensions.screenSize === ScreenSize.screen320x320 ? 2 : 3) * devicePixelRatio;\n    const borderWidth: FrameDependent = { frameDevice: 1, frameCanvas: scale };\n\n    const dist = (x: number): FrameDependent => ({ frameDevice: x, frameCanvas: x * scale });\n    const coord = (x: number): FrameDependent => ({ frameDevice: x, frameCanvas: borderWidth.frameCanvas + x * scale });\n\n    const separatorHeight = dist(1);\n    const buttonHeight = dist(dimensions.screenSize === ScreenSize.screen320x320 ? 60 : 30);\n\n    return {\n        scale,\n        borderWidth,\n        height: dist(\n            2 * borderWidth.frameDevice +\n                dimensions.height +\n                separatorHeight.frameDevice +\n                dimensions.silkscreenHeight +\n                buttonHeight.frameDevice\n        ),\n        width: dist(2 * borderWidth.frameDevice + dimensions.width),\n        screenHeight: dist(dimensions.height),\n        screenWidth: dist(dimensions.width),\n        screenLeft: coord(0),\n        screenTop: coord(0),\n        screenBottom: coord(dimensions.height),\n        separatorHeight,\n        silkscreenHeight: dist(dimensions.silkscreenHeight),\n        silkscreenTop: coord(dimensions.height + separatorHeight.frameDevice),\n        silkscreenBottom: coord(dimensions.height + separatorHeight.frameDevice + dimensions.silkscreenHeight),\n        buttonHeight,\n        buttonWidth: buttonHeight,\n        buttonTop: coord(dimensions.height + separatorHeight.frameDevice + dimensions.silkscreenHeight),\n        buttonBottom: coord(\n            dimensions.height + separatorHeight.frameDevice + dimensions.silkscreenHeight + buttonHeight.frameDevice\n        ),\n    };\n}\n\ntype PrerenderedImage = (width: number, height: number) => Promise<HTMLCanvasElement>;\ntype LazyLoadingImage = () => Promise<HTMLImageElement>;\ntype SkinImageType = keyof typeof import('../skin');\n\nfunction prerender(image: LazyLoadingImage): PrerenderedImage {\n    let cachedWidth: number;\n    let cachedHeight: number;\n    const canvas = document.createElement('canvas');\n\n    return async (width: number, height: number) => {\n        if (cachedWidth === width && cachedHeight === height) {\n            return canvas;\n        }\n\n        canvas.width = width;\n        canvas.height = height;\n\n        const ctx = canvas.getContext('2d');\n        if (!ctx) throw new Error('get a new browser');\n\n        ctx.drawImage(await image(), 0, 0, canvas.width, canvas.height);\n\n        cachedWidth = width;\n        cachedHeight = height;\n\n        return canvas;\n    };\n}\n\nfunction loadImage(key: SkinImageType): LazyLoadingImage {\n    let deferredImage: Promise<HTMLImageElement> | undefined;\n\n    return async () => {\n        if (!deferredImage) {\n            const svg = (await skin)[key];\n\n            deferredImage = new Promise<HTMLImageElement>((resolve, reject) => {\n                const image = new Image();\n\n                image.onload = () => resolve(image);\n                image.onerror = () => reject();\n\n                image.src = `data:image/svg+xml;base64,${btoa(svg)}`;\n            });\n        }\n\n        return deferredImage;\n    };\n}\n\nconst prepareImage = (key: SkinImageType) => prerender(loadImage(key));\n\nconst IMAGE_SILKSCREEN_V = prepareImage('SILKSCREEN_V');\nconst IMAGE_SILKSCREEN_M500 = prepareImage('SILKSCREEN_M500');\nconst IMAGE_SILKSCREEN_M515 = prepareImage('SILKSCREEN_M515');\nconst IMAGE_SILKSCREEN_IIIC = prepareImage('SILKSCREEN_IIIC');\nconst IMAGE_SILKSCREEN_M100 = prepareImage('SILKSCREEN_M100');\nconst IMAGE_SILKSCREEN_M130 = prepareImage('SILKSCREEN_M130');\nconst IMAGE_SILKSCREEN_TUNGSTENW = prepareImage('SILKSCREEN_TUNGSTEN_W');\nconst IMAGE_SILKSCREEN_PILOT = prepareImage('SILKSCREEN_PILOT');\n\nconst IMAGE_BUTTONS_V = prepareImage('HARD_BUTTONS_PALM_V');\nconst IMAGE_BUTTONS_M515 = prepareImage('HARD_BUTTONS_M515');\nconst IMAGE_BUTTONS_M500 = prepareImage('HARD_BUTTONS_M500');\nconst IMAGE_BUTTONS_IIIC = prepareImage('HARD_BUTTONS_IIIC');\nconst IMAGE_BUTTONS_IIIX = prepareImage('HARD_BUTTONS_IIIX');\nconst IMAGE_BUTTONS_IIIE = prepareImage('HARD_BUTTONS_IIIE');\nconst IMAGE_BUTTONS_M100 = prepareImage('HARD_BUTTONS_M100');\nconst IMAGE_BUTTONS_M125 = prepareImage('HARD_BUTTONS_M125');\nconst IMAGE_BUTTONS_M130 = prepareImage('HARD_BUTTONS_M130');\nconst IMAGE_BUTTONS_TUNGSTENW = prepareImage('HARD_BUTTONS_TUNGSTEN_W');\nconst IMAGE_BUTTONS_PILOT = prepareImage('HARD_BUTTONS_PILOT');\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CanvasDisplayService {\n    constructor() {}\n\n    get width(): number {\n        return this.layout.width.frameCanvas;\n    }\n\n    get height(): number {\n        return this.layout.height.frameCanvas;\n    }\n\n    async initialize(canvas: HTMLCanvasElement, session: Session | undefined): Promise<void> {\n        this.layout = calculateLayout(session?.device ?? DeviceId.m515);\n\n        canvas.width = this.width;\n        canvas.height = this.height;\n\n        const ctx = canvas.getContext('2d');\n        if (!ctx) {\n            throw new Error('canvas not supported - get a new browser');\n        }\n\n        this.ctx = ctx;\n\n        this.session = session;\n\n        this.fillCanvasRect(0, 0, this.width, this.height, this.frameColor());\n        this.fillRect(\n            0,\n            0,\n            this.layout.screenWidth.frameDevice,\n            this.layout.screenHeight.frameDevice +\n                this.layout.silkscreenHeight.frameDevice +\n                this.layout.separatorHeight.frameDevice +\n                this.layout.buttonHeight.frameDevice,\n            this.backgroundColor()\n        );\n\n        await Promise.all([this.drawSilkscreen(), this.drawButtons()]);\n    }\n\n    async drawSilkscreen(): Promise<void> {\n        if (!this.ctx) return;\n\n        this.fillRect(\n            this.layout.screenLeft.frameDevice,\n            this.layout.silkscreenTop.frameDevice,\n            this.layout.screenWidth.frameDevice,\n            this.layout.silkscreenHeight.frameDevice,\n            BACKGROUND_COLOR_SILKSCREEN\n        );\n\n        this.ctx.imageSmoothingEnabled = true;\n        this.ctx.imageSmoothingQuality = 'high';\n\n        this.ctx.drawImage(\n            await this.silkscreenImage()(this.layout.screenWidth.frameCanvas, this.layout.silkscreenHeight.frameCanvas),\n            this.layout.borderWidth.frameCanvas,\n            this.layout.silkscreenTop.frameCanvas,\n            this.layout.screenWidth.frameCanvas,\n            this.layout.silkscreenHeight.frameCanvas\n        );\n    }\n\n    async drawStatistics(\n        snapshotStatistics?: SnapshotStatistics,\n        emulationStatistics?: EmulationStatistics\n    ): Promise<void> {\n        if (!this.ctx) return;\n\n        await this.drawSilkscreen();\n\n        this.ctx.beginPath();\n        this.fillRect(\n            this.layout.screenLeft.frameDevice,\n            this.layout.silkscreenTop.frameDevice,\n            this.layout.screenWidth.frameDevice,\n            this.layout.silkscreenHeight.frameDevice,\n            'rgba(255,255,255,0.6)'\n        );\n\n        const screenSize = deviceDimensions(this.session?.device ?? DEFAULT_DEVICE).screenSize;\n        const fontScale = screenSize === ScreenSize.screen320x320 ? 2 : 1;\n\n        this.ctx.font = `${this.layout.scale * 6 * fontScale}px monospace`;\n        this.ctx.fillStyle = 'black';\n        [\n            ...(!snapshotStatistics && !emulationStatistics ? ['collecting statistics...'] : []),\n            ...(snapshotStatistics\n                ? [\n                      `last snapshot          : ${new Date(snapshotStatistics.timestamp).toLocaleTimeString()}`,\n                      `snapshot pages         : ${snapshotStatistics.pages}`,\n                      `snapshot time total    : ${snapshotStatistics.timeTotal.toFixed(2)} msec`,\n                      `snapshot time blocking : ${snapshotStatistics.timeBlocking.toFixed(2)} msec`,\n                  ]\n                : []),\n            ...(emulationStatistics\n                ? [\n                      `host speed             : ${emulationStatistics.hostSpeed.toFixed(2)}x`,\n                      `emulation speed        : ${emulationStatistics.emulationSpeed.toFixed(2)}x`,\n                      `average FPS            : ${emulationStatistics.averageFPS.toFixed(2)}`,\n                  ]\n                : []),\n        ].forEach((line, i) =>\n            this.ctx!.fillText(\n                line,\n                this.layout.screenLeft.frameCanvas + fontScale * this.layout.scale,\n                this.layout.silkscreenTop.frameCanvas + fontScale * this.layout.scale * (8 + i * 6)\n            )\n        );\n    }\n\n    async drawButtons(activeButtons: Array<PalmButton> = []): Promise<void> {\n        if (!this.ctx) return;\n\n        this.ctx.drawImage(\n            await this.buttonsImage()(this.layout.screenWidth.frameCanvas, this.layout.buttonHeight.frameCanvas),\n            this.layout.screenLeft.frameCanvas,\n            this.layout.buttonTop.frameCanvas,\n            this.layout.screenWidth.frameCanvas,\n            this.layout.buttonHeight.frameCanvas\n        );\n\n        if (activeButtons.includes(PalmButton.cal)) {\n            this.fillRect(\n                0,\n                this.layout.buttonTop.frameDevice,\n                this.layout.buttonWidth.frameDevice,\n                this.layout.buttonHeight.frameDevice,\n                BACKGROUND_ACTIVE_BUTTON\n            );\n        }\n        if (activeButtons.includes(PalmButton.phone)) {\n            this.fillRect(\n                this.layout.buttonWidth.frameDevice,\n                this.layout.buttonTop.frameDevice,\n                this.layout.buttonWidth.frameDevice,\n                this.layout.buttonHeight.frameDevice,\n                BACKGROUND_ACTIVE_BUTTON\n            );\n        }\n        if (activeButtons.includes(PalmButton.todo)) {\n            this.fillRect(\n                this.layout.screenWidth.frameDevice - 2 * this.layout.buttonWidth.frameDevice,\n                this.layout.buttonTop.frameDevice,\n                this.layout.buttonWidth.frameDevice,\n                this.layout.buttonHeight.frameDevice,\n                BACKGROUND_ACTIVE_BUTTON\n            );\n        }\n        if (activeButtons.includes(PalmButton.notes)) {\n            this.fillRect(\n                this.layout.screenWidth.frameDevice - this.layout.buttonWidth.frameDevice,\n                this.layout.buttonTop.frameDevice,\n                this.layout.buttonWidth.frameDevice,\n                this.layout.buttonHeight.frameDevice,\n                BACKGROUND_ACTIVE_BUTTON\n            );\n        }\n        if (activeButtons.includes(PalmButton.up)) {\n            this.fillRect(\n                2 * this.layout.buttonWidth.frameDevice,\n                this.layout.buttonTop.frameDevice,\n                this.layout.screenWidth.frameDevice - 4 * this.layout.buttonWidth.frameDevice,\n                this.layout.buttonHeight.frameDevice / 2,\n                BACKGROUND_ACTIVE_BUTTON\n            );\n        }\n        if (activeButtons.includes(PalmButton.down)) {\n            this.fillRect(\n                2 * this.layout.buttonWidth.frameDevice,\n                this.layout.buttonTop.frameDevice + this.layout.buttonHeight.frameDevice / 2,\n                this.layout.screenWidth.frameDevice - 4 * this.layout.buttonWidth.frameDevice,\n                this.layout.buttonHeight.frameDevice / 2,\n                BACKGROUND_ACTIVE_BUTTON\n            );\n        }\n    }\n\n    drawEmulationCanvas(canvas: HTMLCanvasElement): void {\n        if (!this.ctx) return;\n\n        this.ctx.imageSmoothingEnabled = false;\n        this.ctx.drawImage(\n            canvas,\n            this.layout.screenLeft.frameCanvas,\n            this.layout.screenTop.frameCanvas,\n            this.layout.screenWidth.frameCanvas,\n            this.layout.screenHeight.frameCanvas\n        );\n    }\n\n    eventToPalmCoordinates(e: MouseEvent | Touch, clip = false): [number, number] | undefined {\n        if (!this.ctx) return;\n\n        const bb = this.ctx.canvas.getBoundingClientRect();\n\n        let contentX: number;\n        let contentY: number;\n        let contentWidth: number;\n        let contentHeight: number;\n\n        // CSS object-fit keeps the aspect ratio of the canvas content, but the canvas itself\n        // looses aspect and fills the container -> manually calculate the metrics for the content\n        if (bb.width / bb.height > this.width / this.height) {\n            contentHeight = bb.height;\n            contentWidth = (this.width / this.height) * bb.height;\n            contentY = bb.top;\n            contentX = bb.left + (bb.width - contentWidth) / 2;\n        } else {\n            contentWidth = bb.width;\n            contentHeight = (this.height / this.width) * bb.width;\n            contentX = bb.left;\n            contentY = bb.top + (bb.height - contentHeight) / 2;\n        }\n\n        // Compensate for the border\n        let x =\n            Math.floor((((e.clientX - contentX) / contentWidth) * this.width) / this.layout.scale) -\n            this.layout.borderWidth.frameDevice;\n        let y =\n            Math.floor((((e.clientY - contentY) / contentHeight) * this.height) / this.layout.scale) -\n            this.layout.borderWidth.frameDevice;\n\n        // The canvas layout inside the border is as follows:\n        //\n        // * 0 .. 159   : LCD\n        // * 160        : separator\n        // * 161 .. 220 : silkscreen\n        // * 221 .. 250 : buttons\n        //\n        // we map this to 160x250 lines by mapping the separator to the silkscreen\n\n        if (y >= this.layout.screenHeight.frameDevice) {\n            if (y <= this.layout.screenHeight.frameDevice + this.layout.separatorHeight.frameDevice) {\n                y = this.layout.screenHeight.frameDevice;\n            } else {\n                y -= this.layout.separatorHeight.frameDevice;\n            }\n        }\n\n        const totalHeight =\n            this.layout.screenHeight.frameDevice +\n            this.layout.silkscreenHeight.frameDevice +\n            this.layout.buttonHeight.frameDevice;\n\n        if (clip) {\n            if (x < 0) x = 0;\n            if (x >= this.layout.screenWidth.frameDevice) x = this.layout.screenWidth.frameDevice - 1;\n            if (y < 0) y = 0;\n            if (y >= totalHeight) y = totalHeight - 1;\n        } else {\n            if (x < 0 || x >= this.layout.screenWidth.frameDevice || y < 0 || y >= totalHeight) {\n                return undefined;\n            }\n        }\n\n        return [x, y];\n    }\n\n    isButtons([, y]: [number, number]): boolean {\n        return y >= this.layout.screenHeight.frameDevice + this.layout.silkscreenHeight.frameDevice;\n    }\n\n    determineButton([x, y]: [number, number]): PalmButton {\n        if (x >= this.layout.screenWidth.frameDevice - this.layout.buttonWidth.frameDevice) return PalmButton.notes;\n        if (x >= this.layout.screenWidth.frameDevice - 2 * this.layout.buttonWidth.frameDevice) return PalmButton.todo;\n        if (x >= 2 * this.layout.buttonWidth.frameDevice) {\n            return y >=\n                this.layout.screenHeight.frameDevice +\n                    this.layout.silkscreenHeight.frameDevice +\n                    this.layout.buttonHeight.frameDevice / 2\n                ? PalmButton.down\n                : PalmButton.up;\n        }\n        if (x >= this.layout.buttonWidth.frameDevice) return PalmButton.phone;\n\n        return PalmButton.cal;\n    }\n\n    private fillRect(x: number, y: number, width: number, height: number, style: string): void {\n        if (!this.ctx) return;\n\n        this.ctx.beginPath();\n        this.ctx.rect(\n            this.layout.borderWidth.frameCanvas + this.layout.scale * x,\n            this.layout.borderWidth.frameCanvas + this.layout.scale * y,\n            this.layout.scale * width,\n            this.layout.scale * height\n        );\n        this.ctx.fillStyle = style;\n        this.ctx.fill();\n    }\n\n    private fillCanvasRect(x: number, y: number, width: number, height: number, style: string): void {\n        if (!this.ctx) return;\n\n        this.ctx.beginPath();\n        this.ctx.rect(x, y, width, height);\n        this.ctx.fillStyle = style;\n        this.ctx.fill();\n    }\n\n    private silkscreenImage(): PrerenderedImage {\n        switch (this.session?.device) {\n            case DeviceId.palmPilot:\n            case DeviceId.pilot:\n            case DeviceId.iii:\n            case DeviceId.palmVII:\n                return IMAGE_SILKSCREEN_PILOT;\n\n            case DeviceId.m500:\n                return IMAGE_SILKSCREEN_M500;\n\n            case DeviceId.m505:\n            case DeviceId.m515:\n                return IMAGE_SILKSCREEN_M515;\n\n            case DeviceId.iiic:\n                return IMAGE_SILKSCREEN_IIIC;\n\n            case DeviceId.m100:\n            case DeviceId.m105:\n            case DeviceId.m125:\n                return IMAGE_SILKSCREEN_M100;\n\n            case DeviceId.m130:\n                return IMAGE_SILKSCREEN_M130;\n\n            case DeviceId.i710:\n                return IMAGE_SILKSCREEN_TUNGSTENW;\n\n            case DeviceId.iiic:\n            case DeviceId.iiix:\n            case DeviceId.iiix:\n            case DeviceId.palmVx:\n            case DeviceId.palmV:\n            default:\n                return IMAGE_SILKSCREEN_V;\n        }\n    }\n\n    private buttonsImage(): PrerenderedImage {\n        switch (this.session?.device) {\n            case DeviceId.pilot:\n            case DeviceId.palmPilot:\n                return IMAGE_BUTTONS_PILOT;\n\n            case DeviceId.m500:\n                return IMAGE_BUTTONS_M500;\n\n            case DeviceId.m505:\n            case DeviceId.m515:\n                return IMAGE_BUTTONS_M515;\n\n            case DeviceId.iiic:\n                return IMAGE_BUTTONS_IIIC;\n\n            case DeviceId.m100:\n            case DeviceId.m105:\n                return IMAGE_BUTTONS_M100;\n\n            case DeviceId.m125:\n                return IMAGE_BUTTONS_M125;\n\n            case DeviceId.m130:\n                return IMAGE_BUTTONS_M130;\n\n            case DeviceId.i710:\n                return IMAGE_BUTTONS_TUNGSTENW;\n\n            case DeviceId.iii:\n            case DeviceId.iiix:\n            case DeviceId.iiixe:\n            case DeviceId.palmVII:\n                return IMAGE_BUTTONS_IIIX;\n\n            case DeviceId.iiie:\n                return IMAGE_BUTTONS_IIIE;\n\n            case DeviceId.palmVx:\n            case DeviceId.palmV:\n            default:\n                return IMAGE_BUTTONS_V;\n        }\n    }\n\n    private backgroundColor(): string {\n        return isColor(this.session?.device) ? BACKGROUND_COLOR_COLOR_DEVICE : BACKGROUND_COLOR_GRAYSCALE_DEVICE;\n    }\n\n    private frameColor(): string {\n        return isColor(this.session?.device) ? FRAME_COLOR_COLOR_DEVICE : FRAME_COLOR_GRAYSCALE_DEVICE;\n    }\n\n    private ctx: CanvasRenderingContext2D | undefined;\n    private session: Session | undefined;\n    private layout = calculateLayout(DEFAULT_DEVICE);\n\n    // private dimensions = DEFAULT_DIMENSIONS;\n}\n"]}