{"version":3,"file":"8395.94512bc865e84d42.js","mappings":"0JAOA,MAEMA,EAAO,MACXC,YAAYC,IACVC,OAAiBC,KAAMF,EACzB,CACAG,SACE,MAAMC,KAAOC,KAAWH,MACxB,SAAQI,KAAEC,IAAM,CAAEC,SAAOC,KAAmBP,KAAKQ,MAAO,CACpDC,CAACP,IAAO,MACP,EAAGE,KAAE,OAAQ,MACpB,GAEFR,EAAKc,MAbW,gDAaHC,uECjBb,MAAMC,EAAc,CAACC,EAAUC,IACG,OAAzBA,EAAGC,QAAQF,GAKdN,EAAqB,CAACC,EAAOQ,IACT,iBAAVR,GAAsBA,EAAMS,OAAS,EAC/CC,OAAOC,OAAO,CAAE,aAAa,EAAM,CAAE,aAAYX,MAAU,GAAQQ,GAAeA,EAYlFI,EAAeC,IACnB,MAAMC,EAAM,CAAC,EACbC,MAZoBF,SACJG,IAAZH,GACYI,MAAMC,QAAQL,GAAWA,EAAUA,EAAQM,MAAM,MAE5DC,OAAQC,GAAW,MAALA,GACdP,IAAKO,GAAMA,EAAEC,QACbF,OAAQC,GAAY,KAANA,GAEZ,GAIPN,CAAaF,GAASU,QAASF,GAAOP,EAAIO,IAAK,GACxCP,GAEHU,EAAS,uBACTC,EAAO,yBAAG,UAAOC,EAAKC,EAAIC,EAAWC,GACzC,GAAW,MAAPH,GAA0B,MAAXA,EAAI,KAAeF,EAAOM,KAAKJ,GAAM,CACtD,MAAMK,EAASC,SAASC,cAAc,cACtC,GAAIF,EACF,OACEJ,GAAGO,iBAEEH,EAAOI,KAAKT,EAAKE,EAAWC,EAEvC,CACA,OAAO,CACT,GAAC,gBAXYO","names":["Text","constructor","hostRef","registerInstance","this","render","mode","getIonMode","h","Host","class","createColorClasses","color","s","style","textCss","hostContext","selector","el","closest","cssClassMap","length","Object","assign","getClassMap","classes","map","getClassList","undefined","Array","isArray","split","filter","c","trim","forEach","SCHEME","openURL","url","ev","direction","animation","test","router","document","querySelector","preventDefault","push","_x"],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/ion-text.entry.js","./node_modules/@ionic/core/dist/esm/theme-7670341c.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, h, H as Host } from './index-8e692445.js';\nimport { b as getIonMode } from './ionic-global-c95cf239.js';\nimport { c as createColorClasses } from './theme-7670341c.js';\n\nconst textCss = \":host(.ion-color){color:var(--ion-color-base)}\";\n\nconst Text = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  render() {\n    const mode = getIonMode(this);\n    return (h(Host, { class: createColorClasses(this.color, {\n        [mode]: true,\n      }) }, h(\"slot\", null)));\n  }\n};\nText.style = textCss;\n\nexport { Text as ion_text };\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nconst hostContext = (selector, el) => {\n  return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color, cssClassMap) => {\n  return typeof color === 'string' && color.length > 0\n    ? Object.assign({ 'ion-color': true, [`ion-color-${color}`]: true }, cssClassMap) : cssClassMap;\n};\nconst getClassList = (classes) => {\n  if (classes !== undefined) {\n    const array = Array.isArray(classes) ? classes : classes.split(' ');\n    return array\n      .filter((c) => c != null)\n      .map((c) => c.trim())\n      .filter((c) => c !== '');\n  }\n  return [];\n};\nconst getClassMap = (classes) => {\n  const map = {};\n  getClassList(classes).forEach((c) => (map[c] = true));\n  return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction, animation) => {\n  if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n    const router = document.querySelector('ion-router');\n    if (router) {\n      if (ev != null) {\n        ev.preventDefault();\n      }\n      return router.push(url, direction, animation);\n    }\n  }\n  return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n"],"x_google_ignoreList":[0,1]}