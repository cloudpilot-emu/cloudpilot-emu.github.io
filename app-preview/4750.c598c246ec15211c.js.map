{"version":3,"mappings":"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","names":["cloneMap","WeakMap","relocateInput","componentEl","inputEl","shouldRelocate","inputRelativeY","has","addClone","removeClone","isFocused","input","getRootNode","activeElement","parentEl","parentNode","clonedEl","cloneNode","classList","add","tabIndex","appendChild","set","tx","ownerDocument","dir","style","pointerEvents","transform","clone","get","delete","remove","SKIP_SELECTOR","jsSetFocus","contentEl","footerEl","keyboardHeight","scrollData","inputRect","contentRect","platformHeight","inputTop","top","inputBottom","bottom","visibleAreaTop","safeAreaTop","distanceToBottom","Math","min","distanceToTop","desiredScrollAmount","round","scrollAmount","duration","abs","scrollDuration","max","scrollPadding","inputSafeY","calcScrollData","closest","getBoundingClientRect","defaultView","innerHeight","getScrollData","focus","raf","click","window","scrollContentTimeout","scrollContent","undefined","clearTimeout","removeEventListener","doubleKeyboardEventListener","scrollByPoint","addEventListener","scrollEl","getScrollElement","scrollHeight","clientHeight","scrollTop","type","setTimeout","PADDING_TIMER_KEY","setScrollPadding","tagName","parentElement","el","timer","n","setProperty","startInputShims","config","doc","document","getNumber","scrollAssist","getBoolean","hideCaret","inputBlurring","inputs","Array","from","querySelectorAll","hideCaretMap","scrollAssistMap","registerInput","Promise","resolve","componentOnReady","inputRoot","shadowRoot","querySelector","v","rmFn","scrollHideCaret","shouldHideCaret","onBlur","showCaret","enableHideCaretOnScroll","coord","touchStart","ev","pointerCoord","touchEnd","endCoord","threshold","startCoord","deltaX","x","deltaY","y","distance","hasPointerMoved","stopPropagation","enableScrollAssist","focused","didScroll","active","matches","tapped","target","blur","enableInputBlurring","enableScrollPadding","detail","fn","unregisterInput"],"sources":["./node_modules/@ionic/core/dist/esm/input-shims-fef4a5fa.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { a as addEventListener, b as removeEventListener, r as raf, p as pointerCoord, c as componentOnReady } from './helpers-eed79a2b.js';\n\nconst cloneMap = new WeakMap();\nconst relocateInput = (componentEl, inputEl, shouldRelocate, inputRelativeY = 0) => {\n  if (cloneMap.has(componentEl) === shouldRelocate) {\n    return;\n  }\n  if (shouldRelocate) {\n    addClone(componentEl, inputEl, inputRelativeY);\n  }\n  else {\n    removeClone(componentEl, inputEl);\n  }\n};\nconst isFocused = (input) => {\n  return input === input.getRootNode().activeElement;\n};\nconst addClone = (componentEl, inputEl, inputRelativeY) => {\n  // this allows for the actual input to receive the focus from\n  // the user's touch event, but before it receives focus, it\n  // moves the actual input to a location that will not screw\n  // up the app's layout, and does not allow the native browser\n  // to attempt to scroll the input into place (messing up headers/footers)\n  // the cloned input fills the area of where native input should be\n  // while the native input fakes out the browser by relocating itself\n  // before it receives the actual focus event\n  // We hide the focused input (with the visible caret) invisible by making it scale(0),\n  const parentEl = inputEl.parentNode;\n  // DOM WRITES\n  const clonedEl = inputEl.cloneNode(false);\n  clonedEl.classList.add('cloned-input');\n  clonedEl.tabIndex = -1;\n  parentEl.appendChild(clonedEl);\n  cloneMap.set(componentEl, clonedEl);\n  const doc = componentEl.ownerDocument;\n  const tx = doc.dir === 'rtl' ? 9999 : -9999;\n  componentEl.style.pointerEvents = 'none';\n  inputEl.style.transform = `translate3d(${tx}px,${inputRelativeY}px,0) scale(0)`;\n};\nconst removeClone = (componentEl, inputEl) => {\n  const clone = cloneMap.get(componentEl);\n  if (clone) {\n    cloneMap.delete(componentEl);\n    clone.remove();\n  }\n  componentEl.style.pointerEvents = '';\n  inputEl.style.transform = '';\n};\n\nconst enableHideCaretOnScroll = (componentEl, inputEl, scrollEl) => {\n  if (!scrollEl || !inputEl) {\n    return () => { return; };\n  }\n  const scrollHideCaret = (shouldHideCaret) => {\n    if (isFocused(inputEl)) {\n      relocateInput(componentEl, inputEl, shouldHideCaret);\n    }\n  };\n  const onBlur = () => relocateInput(componentEl, inputEl, false);\n  const hideCaret = () => scrollHideCaret(true);\n  const showCaret = () => scrollHideCaret(false);\n  addEventListener(scrollEl, 'ionScrollStart', hideCaret);\n  addEventListener(scrollEl, 'ionScrollEnd', showCaret);\n  inputEl.addEventListener('blur', onBlur);\n  return () => {\n    removeEventListener(scrollEl, 'ionScrollStart', hideCaret);\n    removeEventListener(scrollEl, 'ionScrollEnd', showCaret);\n    inputEl.addEventListener('ionBlur', onBlur);\n  };\n};\n\nconst SKIP_SELECTOR = 'input, textarea, [no-blur], [contenteditable]';\nconst enableInputBlurring = () => {\n  let focused = true;\n  let didScroll = false;\n  const doc = document;\n  const onScroll = () => {\n    didScroll = true;\n  };\n  const onFocusin = () => {\n    focused = true;\n  };\n  const onTouchend = (ev) => {\n    // if app did scroll return early\n    if (didScroll) {\n      didScroll = false;\n      return;\n    }\n    const active = doc.activeElement;\n    if (!active) {\n      return;\n    }\n    // only blur if the active element is a text-input or a textarea\n    if (active.matches(SKIP_SELECTOR)) {\n      return;\n    }\n    // if the selected target is the active element, do not blur\n    const tapped = ev.target;\n    if (tapped === active) {\n      return;\n    }\n    if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n      return;\n    }\n    focused = false;\n    // TODO: find a better way, why 50ms?\n    setTimeout(() => {\n      if (!focused) {\n        active.blur();\n      }\n    }, 50);\n  };\n  addEventListener(doc, 'ionScrollStart', onScroll);\n  doc.addEventListener('focusin', onFocusin, true);\n  doc.addEventListener('touchend', onTouchend, false);\n  return () => {\n    removeEventListener(doc, 'ionScrollStart', onScroll, true);\n    doc.removeEventListener('focusin', onFocusin, true);\n    doc.removeEventListener('touchend', onTouchend, false);\n  };\n};\n\nconst SCROLL_ASSIST_SPEED = 0.3;\nconst getScrollData = (componentEl, contentEl, keyboardHeight) => {\n  const itemEl = componentEl.closest('ion-item,[ion-item]') || componentEl;\n  return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, componentEl.ownerDocument.defaultView.innerHeight);\n};\nconst calcScrollData = (inputRect, contentRect, keyboardHeight, platformHeight) => {\n  // compute input's Y values relative to the body\n  const inputTop = inputRect.top;\n  const inputBottom = inputRect.bottom;\n  // compute visible area\n  const visibleAreaTop = contentRect.top;\n  const visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\n  // compute safe area\n  const safeAreaTop = visibleAreaTop + 15;\n  const safeAreaBottom = visibleAreaBottom * 0.75;\n  // figure out if each edge of the input is within the safe area\n  const distanceToBottom = safeAreaBottom - inputBottom;\n  const distanceToTop = safeAreaTop - inputTop;\n  // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n  const desiredScrollAmount = Math.round((distanceToBottom < 0)\n    ? -distanceToBottom\n    : (distanceToTop > 0)\n      ? -distanceToTop\n      : 0);\n  // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n  // gets focus, so make sure we don't scroll the input above the visible area\n  const scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n  const distance = Math.abs(scrollAmount);\n  const duration = distance / SCROLL_ASSIST_SPEED;\n  const scrollDuration = Math.min(400, Math.max(150, duration));\n  return {\n    scrollAmount,\n    scrollDuration,\n    scrollPadding: keyboardHeight,\n    inputSafeY: -(inputTop - safeAreaTop) + 4\n  };\n};\n\nconst enableScrollAssist = (componentEl, inputEl, contentEl, footerEl, keyboardHeight) => {\n  let coord;\n  const touchStart = (ev) => {\n    coord = pointerCoord(ev);\n  };\n  const touchEnd = (ev) => {\n    // input cover touchend/mouseup\n    if (!coord) {\n      return;\n    }\n    // get where the touchend/mouseup ended\n    const endCoord = pointerCoord(ev);\n    // focus this input if the pointer hasn't moved XX pixels\n    // and the input doesn't already have focus\n    if (!hasPointerMoved(6, coord, endCoord) && !isFocused(inputEl)) {\n      ev.stopPropagation();\n      // begin the input focus process\n      jsSetFocus(componentEl, inputEl, contentEl, footerEl, keyboardHeight);\n    }\n  };\n  componentEl.addEventListener('touchstart', touchStart, true);\n  componentEl.addEventListener('touchend', touchEnd, true);\n  return () => {\n    componentEl.removeEventListener('touchstart', touchStart, true);\n    componentEl.removeEventListener('touchend', touchEnd, true);\n  };\n};\nconst jsSetFocus = async (componentEl, inputEl, contentEl, footerEl, keyboardHeight) => {\n  if (!contentEl && !footerEl) {\n    return;\n  }\n  const scrollData = getScrollData(componentEl, (contentEl || footerEl), keyboardHeight);\n  if (contentEl && Math.abs(scrollData.scrollAmount) < 4) {\n    // the text input is in a safe position that doesn't\n    // require it to be scrolled into view, just set focus now\n    inputEl.focus();\n    return;\n  }\n  // temporarily move the focus to the focus holder so the browser\n  // doesn't freak out while it's trying to get the input in place\n  // at this point the native text input still does not have focus\n  relocateInput(componentEl, inputEl, true, scrollData.inputSafeY);\n  inputEl.focus();\n  /**\n   * Relocating/Focusing input causes the\n   * click event to be cancelled, so\n   * manually fire one here.\n   */\n  raf(() => componentEl.click());\n  /* tslint:disable-next-line */\n  if (typeof window !== 'undefined') {\n    let scrollContentTimeout;\n    const scrollContent = async () => {\n      // clean up listeners and timeouts\n      if (scrollContentTimeout !== undefined) {\n        clearTimeout(scrollContentTimeout);\n      }\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.removeEventListener('ionKeyboardDidShow', scrollContent);\n      // scroll the input into place\n      if (contentEl) {\n        await contentEl.scrollByPoint(0, scrollData.scrollAmount, scrollData.scrollDuration);\n      }\n      // the scroll view is in the correct position now\n      // give the native text input focus\n      relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\n      // ensure this is the focused input\n      inputEl.focus();\n    };\n    const doubleKeyboardEventListener = () => {\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.addEventListener('ionKeyboardDidShow', scrollContent);\n    };\n    if (contentEl) {\n      const scrollEl = await contentEl.getScrollElement();\n      /**\n       * scrollData will only consider the amount we need\n       * to scroll in order to properly bring the input\n       * into view. It will not consider the amount\n       * we can scroll in the content element.\n       * As a result, scrollData may request a greater\n       * scroll position than is currently available\n       * in the DOM. If this is the case, we need to\n       * wait for the webview to resize/the keyboard\n       * to show in order for additional scroll\n       * bandwidth to become available.\n       */\n      const totalScrollAmount = scrollEl.scrollHeight - scrollEl.clientHeight;\n      if (scrollData.scrollAmount > (totalScrollAmount - scrollEl.scrollTop)) {\n        /**\n         * On iOS devices, the system will show a \"Passwords\" bar above the keyboard\n         * after the initial keyboard is shown. This prevents the webview from resizing\n         * until the \"Passwords\" bar is shown, so we need to wait for that to happen first.\n         */\n        if (inputEl.type === 'password') {\n          // Add 50px to account for the \"Passwords\" bar\n          scrollData.scrollAmount += 50;\n          window.addEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n        }\n        else {\n          window.addEventListener('ionKeyboardDidShow', scrollContent);\n        }\n        /**\n         * This should only fire in 2 instances:\n         * 1. The app is very slow.\n         * 2. The app is running in a browser on an old OS\n         * that does not support Ionic Keyboard Events\n         */\n        scrollContentTimeout = setTimeout(scrollContent, 1000);\n        return;\n      }\n    }\n    scrollContent();\n  }\n};\nconst hasPointerMoved = (threshold, startCoord, endCoord) => {\n  if (startCoord && endCoord) {\n    const deltaX = (startCoord.x - endCoord.x);\n    const deltaY = (startCoord.y - endCoord.y);\n    const distance = deltaX * deltaX + deltaY * deltaY;\n    return distance > (threshold * threshold);\n  }\n  return false;\n};\n\nconst PADDING_TIMER_KEY = '$ionPaddingTimer';\nconst enableScrollPadding = (keyboardHeight) => {\n  const doc = document;\n  const onFocusin = (ev) => {\n    setScrollPadding(ev.target, keyboardHeight);\n  };\n  const onFocusout = (ev) => {\n    setScrollPadding(ev.target, 0);\n  };\n  doc.addEventListener('focusin', onFocusin);\n  doc.addEventListener('focusout', onFocusout);\n  return () => {\n    doc.removeEventListener('focusin', onFocusin);\n    doc.removeEventListener('focusout', onFocusout);\n  };\n};\nconst setScrollPadding = (input, keyboardHeight) => {\n  if (input.tagName !== 'INPUT') {\n    return;\n  }\n  if (input.parentElement && input.parentElement.tagName === 'ION-INPUT') {\n    return;\n  }\n  if (input.parentElement &&\n    input.parentElement.parentElement &&\n    input.parentElement.parentElement.tagName === 'ION-SEARCHBAR') {\n    return;\n  }\n  const el = input.closest('ion-content');\n  if (el === null) {\n    return;\n  }\n  const timer = el[PADDING_TIMER_KEY];\n  if (timer) {\n    clearTimeout(timer);\n  }\n  if (keyboardHeight > 0) {\n    el.style.setProperty('--keyboard-offset', `${keyboardHeight}px`);\n  }\n  else {\n    el[PADDING_TIMER_KEY] = setTimeout(() => {\n      el.style.setProperty('--keyboard-offset', '0px');\n    }, 120);\n  }\n};\n\nconst INPUT_BLURRING = true;\nconst SCROLL_PADDING = true;\nconst startInputShims = (config) => {\n  const doc = document;\n  const keyboardHeight = config.getNumber('keyboardHeight', 290);\n  const scrollAssist = config.getBoolean('scrollAssist', true);\n  const hideCaret = config.getBoolean('hideCaretOnScroll', true);\n  const inputBlurring = config.getBoolean('inputBlurring', true);\n  const scrollPadding = config.getBoolean('scrollPadding', true);\n  const inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n  const hideCaretMap = new WeakMap();\n  const scrollAssistMap = new WeakMap();\n  const registerInput = async (componentEl) => {\n    await new Promise(resolve => componentOnReady(componentEl, resolve));\n    const inputRoot = componentEl.shadowRoot || componentEl;\n    const inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\n    const scrollEl = componentEl.closest('ion-content');\n    const footerEl = (!scrollEl) ? componentEl.closest('ion-footer') : null;\n    if (!inputEl) {\n      return;\n    }\n    if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n      const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n      hideCaretMap.set(componentEl, rmFn);\n    }\n    if ((!!scrollEl || !!footerEl) && scrollAssist && !scrollAssistMap.has(componentEl)) {\n      const rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, footerEl, keyboardHeight);\n      scrollAssistMap.set(componentEl, rmFn);\n    }\n  };\n  const unregisterInput = (componentEl) => {\n    if (hideCaret) {\n      const fn = hideCaretMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      hideCaretMap.delete(componentEl);\n    }\n    if (scrollAssist) {\n      const fn = scrollAssistMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      scrollAssistMap.delete(componentEl);\n    }\n  };\n  if (inputBlurring && INPUT_BLURRING) {\n    enableInputBlurring();\n  }\n  if (scrollPadding && SCROLL_PADDING) {\n    enableScrollPadding(keyboardHeight);\n  }\n  // Input might be already loaded in the DOM before ion-device-hacks did.\n  // At this point we need to look for all of the inputs not registered yet\n  // and register them.\n  for (const input of inputs) {\n    registerInput(input);\n  }\n  doc.addEventListener('ionInputDidLoad', ((ev) => {\n    registerInput(ev.detail);\n  }));\n  doc.addEventListener('ionInputDidUnload', ((ev) => {\n    unregisterInput(ev.detail);\n  }));\n};\n\nexport { startInputShims };\n"],"sourceRoot":"webpack:///","file":"4750.c598c246ec15211c.js"}