{"version":3,"sources":["webpack:///src/app/page/emulation/context-menu/context-menu.component.ts","webpack:///src/app/service/backup.service.ts","webpack:///src/app/service/event-handling.service.ts","webpack:///src/app/service/installation.service.ts","webpack:///src/app/page/emulation/context-menu/context-menu.component.html","webpack:///src/app/page/emulation/emulation.page.html","webpack:///src/app/page/emulation/emulation-routing.module.ts","webpack:///src/app/page/emulation/emulation.page.ts","webpack:///src/app/page/emulation/emulation.module.ts"],"names":["ContextMenuComponent","BackupService","EventHandlingService","InstallationService","emulationService","loadingController","snapshotService","fileService","emulationStateService","alertService","currentSession","this","getCurrentSession","loader","create","present","failedDatabases","pause","waitForPendingSnapshot","cloudpilot","backup","dbBackup","Init","IsInProgress","db","GetCurrentDatabase","Save","push","Promise","r","setTimeout","archive","getArchive","dismiss","resume","length","message","saveFile","filename","errorMessage","backupService","onClick","showHelp","reset","resetNoExtensions","resetHard","engagePower","saveBackup","isRunning","isPowerOff","isUiInitialized","power","help","canvasDisplayService","ngZone","handleMouseDown","e","button","coords","eventToPalmCoordinates","area","determineArea","interactionMouse","handlePointerMove","determineButton","handleButtonDown","handleMouseMove","buttons","handeMouseUp","interaction","handleButtonUp","handlePointerUp","handleTouchStart","i","changedTouches","touch","item","interactionsTouch","set","identifier","cancelable","preventDefault","handleTouchMove","get","handleTouchEnd","handleKeyDown","isToggleGameMode","run","gameMode","buttonFromEvent","keyCode","keyCodeFromEvent","handleKeyUp","key","activeButtons","btn","clear","drawButtons","Map","Set","canvas","release","runOutsideAngular","addEventListener","window","removeEventListener","isButtons","has","add","Array","from","values","ctrlKey","shiftKey","isGameModeActive","charCodeAt","files","filesSuccess","filesFail","filesRequireReset","file","test","name","installDb","content","messageSucces","messageFailed","messageRequireReset","filter","x","join","header","EmulationPage","EmulationPageRoutingModule","EmulationPageModule","routes","path","component","emulationState","storageService","eventHandlingService","kvsService","audioService","popoverController","modalController","installlationService","onSnapshot","statistics","kvs","showStatistics","drawStatistics","getStatistics","onNewFrame","drawEmulationCanvas","width","devicePixelRatio","height","session","storedSession","getSession","initialize","canvasRef","nativeElement","then","getCanvas","newFrameEvent","addHandler","snapshotEvent","bind","removeHandler","popover","event","backdropDismiss","showBackdrop","componentProps","openFiles","installFiles","modal","url","Help","isInitialized","isMuted","volume","muted","mute","openContextMenu","forChild"],"mappings":"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","file":"x","sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\n\nimport { BackupService } from './../../../service/backup.service';\nimport { EmulationService } from './../../../service/emulation.service';\n\n@Component({\n    selector: 'app-emulation-context-menu',\n    templateUrl: './context-menu.component.html',\n    styleUrls: ['./context-menu.component.scss'],\n})\nexport class ContextMenuComponent implements OnInit {\n    constructor(public emulationService: EmulationService, private backupService: BackupService) {}\n\n    ngOnInit(): void {}\n\n    reset(): void {\n        this.emulationService.reset();\n\n        this.onClick();\n    }\n\n    resetNoExtensions(): void {\n        this.emulationService.resetNoExtensions();\n\n        this.onClick();\n    }\n\n    resetHard(): void {\n        this.emulationService.resetHard();\n\n        this.onClick();\n    }\n\n    power(): void {\n        this.emulationService.engagePower();\n\n        this.onClick();\n    }\n\n    help(): void {\n        this.showHelp();\n\n        this.onClick();\n    }\n\n    backup(): void {\n        this.backupService.saveBackup();\n\n        this.onClick();\n    }\n\n    get backupDisabled(): boolean {\n        return (\n            !this.emulationService.isRunning() ||\n            this.emulationService.isPowerOff() ||\n            !this.emulationService.isUiInitialized()\n        );\n    }\n\n    @Input()\n    onClick: () => void = () => undefined;\n\n    @Input()\n    showHelp: () => void = () => undefined;\n}\n","import { concatFilenames, filenameForBackup } from 'src/app/helper/filename';\n\nimport { AlertService } from './alert.service';\nimport { EmulationService } from './emulation.service';\nimport { EmulationStateService } from './emulation-state.service';\nimport { FileService } from 'src/app/service/file.service';\nimport { Injectable } from '@angular/core';\nimport { LoadingController } from '@ionic/angular';\nimport { SnapshotService } from './snapshot.service';\n\n@Injectable({ providedIn: 'root' })\nexport class BackupService {\n    constructor(\n        private emulationService: EmulationService,\n        private loadingController: LoadingController,\n        private snapshotService: SnapshotService,\n        private fileService: FileService,\n        private emulationStateService: EmulationStateService,\n        private alertService: AlertService\n    ) {}\n\n    async saveBackup(): Promise<void> {\n        const currentSession = this.emulationStateService.getCurrentSession();\n        if (!currentSession) return;\n\n        const loader = await this.loadingController.create();\n        await loader.present();\n\n        let failedDatabases: Array<string> = [];\n        let archive: Uint8Array | undefined;\n\n        await this.emulationService.pause();\n        await this.snapshotService.waitForPendingSnapshot();\n\n        try {\n            const cloudpilot = await this.emulationService.cloudpilot;\n\n            await cloudpilot.backup(async (dbBackup) => {\n                dbBackup.Init();\n\n                while (dbBackup.IsInProgress()) {\n                    const db = dbBackup.GetCurrentDatabase();\n\n                    if (!dbBackup.Save()) failedDatabases.push(db);\n\n                    await new Promise((r) => setTimeout(r, 0));\n                }\n\n                archive = cloudpilot.getArchive(dbBackup);\n            });\n        } finally {\n            await loader.dismiss();\n            await this.emulationService.resume();\n        }\n\n        if (!archive) {\n            await this.alertService.errorMessage('Backup failed.');\n        } else if (failedDatabases.length > 0) {\n            await this.alertService.message(\n                'Backup complete',\n                `\n                    ${concatFilenames(failedDatabases)} failed  to backup.\n                    <br/><br/>\n                    Open databases cannot be backuped. Please run backup from the launcher\n                    in order to backup all databases.\n                `,\n                { 'Save Backup': () => this.fileService.saveFile(filenameForBackup(currentSession), archive!) },\n                'Cancel'\n            );\n        } else {\n            this.fileService.saveFile(filenameForBackup(currentSession), archive);\n        }\n    }\n}\n","import { Injectable, NgZone } from '@angular/core';\n\nimport { CanvasDisplayService } from './canvas-display.service';\nimport { EmulationService } from './emulation.service';\nimport { PalmButton } from '../helper/Cloudpilot';\n\nconst enum Area {\n    screen,\n    buttons,\n}\n\ninterface InteractionSilkscreen {\n    area: Area.screen;\n}\n\ninterface InteractionButton {\n    area: Area.buttons;\n    button: PalmButton;\n}\n\ntype Interaction = InteractionSilkscreen | InteractionButton;\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class EventHandlingService {\n    constructor(\n        private emulationService: EmulationService,\n        private canvasDisplayService: CanvasDisplayService,\n        private ngZone: NgZone\n    ) {}\n\n    bind(canvas: HTMLCanvasElement): void {\n        if (this.canvas) {\n            this.release();\n        }\n\n        this.canvas = canvas;\n\n        this.ngZone.runOutsideAngular(() => {\n            canvas.addEventListener('mousedown', this.handleMouseDown);\n            window.addEventListener('mouseup', this.handeMouseUp);\n            window.addEventListener('mousemove', this.handleMouseMove);\n\n            canvas.addEventListener('touchstart', this.handleTouchStart);\n            canvas.addEventListener('touchmove', this.handleTouchMove);\n            canvas.addEventListener('touchend', this.handleTouchEnd);\n            canvas.addEventListener('touchcancel', this.handleTouchEnd);\n\n            window.addEventListener('keydown', this.handleKeyDown);\n            window.addEventListener('keyup', this.handleKeyUp);\n        });\n    }\n\n    release(): void {\n        if (!this.canvas) return;\n\n        this.canvas.removeEventListener('mousedown', this.handleMouseDown);\n        window.removeEventListener('mouseup', this.handeMouseUp);\n        window.removeEventListener('mousemove', this.handleMouseMove);\n\n        this.canvas.removeEventListener('touchstart', this.handleTouchStart);\n        this.canvas.removeEventListener('touchmove', this.handleTouchMove);\n        this.canvas.removeEventListener('touchend', this.handleTouchEnd);\n        this.canvas.removeEventListener('touchcancel', this.handleTouchEnd);\n\n        window.removeEventListener('keydown', this.handleKeyDown);\n        window.removeEventListener('keyup', this.handleKeyUp);\n\n        for (const button of this.activeButtons) {\n            this.handleButtonUp(button);\n        }\n\n        this.activeButtons.clear();\n        this.interactionsTouch.clear();\n        this.interactionMouse = undefined;\n\n        this.canvas = undefined;\n    }\n\n    isGameMode(): boolean {\n        return this.gameMode;\n    }\n\n    private handleMouseDown = (e: MouseEvent): void => {\n        if (e.button !== 0) return;\n\n        const coords = this.canvasDisplayService.eventToPalmCoordinates(e);\n        if (!coords) return;\n\n        const area = this.determineArea(coords);\n\n        if (area === Area.screen) {\n            this.interactionMouse = { area };\n            this.emulationService.handlePointerMove(...coords);\n        } else {\n            const button = this.canvasDisplayService.determineButton(coords);\n            this.interactionMouse = { area, button };\n\n            this.handleButtonDown(button);\n        }\n    };\n\n    private handleMouseMove = (e: MouseEvent): void => {\n        // tslint:disable-next-line: no-bitwise\n        if (!(e.buttons & 0x01) || this.interactionMouse?.area !== Area.screen) return;\n\n        const coords = this.canvasDisplayService.eventToPalmCoordinates(e, true);\n        if (!coords) return;\n\n        this.emulationService.handlePointerMove(...coords);\n    };\n\n    private handeMouseUp = (e: MouseEvent): void => {\n        if (e.button !== 0) return;\n\n        const interaction = this.interactionMouse;\n        this.interactionMouse = undefined;\n\n        switch (interaction?.area) {\n            case Area.buttons:\n                this.handleButtonUp(interaction.button);\n\n                break;\n\n            case Area.screen:\n                this.emulationService.handlePointerUp();\n\n                break;\n        }\n    };\n\n    private handleTouchStart = (e: TouchEvent): void => {\n        for (let i = 0; i < e.changedTouches.length; i++) {\n            const touch = e.changedTouches.item(i);\n            if (!touch) continue;\n\n            const coords = this.canvasDisplayService.eventToPalmCoordinates(touch);\n            if (!coords) continue;\n\n            const area = this.determineArea(coords);\n            if (area === Area.screen) {\n                this.interactionsTouch.set(touch.identifier, { area });\n                this.emulationService.handlePointerMove(...coords);\n            } else {\n                const button = this.canvasDisplayService.determineButton(coords);\n                this.interactionsTouch.set(touch.identifier, { area, button });\n\n                this.handleButtonDown(button);\n            }\n        }\n\n        if (e.cancelable !== false) e.preventDefault();\n    };\n\n    private handleTouchMove = (e: TouchEvent): void => {\n        for (let i = 0; i < e.changedTouches.length; i++) {\n            const touch = e.changedTouches.item(i);\n            if (!touch) continue;\n\n            if (this.interactionsTouch.get(touch.identifier)?.area === Area.screen) {\n                const coords = this.canvasDisplayService.eventToPalmCoordinates(touch, true);\n                if (!coords) continue;\n\n                this.emulationService.handlePointerMove(...coords);\n            }\n        }\n\n        if (e.cancelable !== false) e.preventDefault();\n    };\n\n    private handleTouchEnd = (e: TouchEvent): void => {\n        for (let i = 0; i < e.changedTouches.length; i++) {\n            const touch = e.changedTouches.item(i);\n            if (!touch) continue;\n\n            const interaction = this.interactionsTouch.get(touch.identifier);\n            this.interactionsTouch.delete(touch.identifier);\n\n            switch (interaction?.area) {\n                case Area.buttons:\n                    this.handleButtonUp(interaction.button);\n\n                    break;\n\n                case Area.screen:\n                    this.emulationService.handlePointerUp();\n\n                    break;\n            }\n        }\n\n        if (e.cancelable !== false) e.preventDefault();\n    };\n\n    private handleKeyDown = (e: KeyboardEvent): void => {\n        if (this.isToggleGameMode(e)) {\n            e.preventDefault();\n\n            this.ngZone.run(() => (this.gameMode = !this.gameMode));\n\n            return;\n        }\n\n        const button = this.buttonFromEvent(e);\n        if (button !== undefined) {\n            this.handleButtonDown(button);\n            e.preventDefault();\n\n            return;\n        }\n\n        const keyCode = this.keyCodeFromEvent(e);\n        if (keyCode !== undefined) {\n            this.emulationService.handleKeyDown(keyCode);\n            e.preventDefault();\n        }\n    };\n\n    private handleKeyUp = (e: KeyboardEvent): void => {\n        const button = this.buttonFromEvent(e);\n        if (button !== undefined) {\n            this.handleButtonUp(button);\n            e.preventDefault();\n\n            return;\n        }\n\n        if (e.key === 'Control') {\n            for (const btn of this.activeButtons) {\n                this.emulationService.handleButtonUp(btn);\n            }\n\n            this.activeButtons.clear();\n            this.canvasDisplayService.drawButtons([]);\n        }\n    };\n\n    private determineArea(coords: [number, number]): Area {\n        return this.canvasDisplayService.isButtons(coords) ? Area.buttons : Area.screen;\n    }\n\n    private handleButtonDown(button: PalmButton): void {\n        if (this.activeButtons.has(button)) return;\n\n        this.activeButtons.add(button);\n        this.emulationService.handleButtonDown(button);\n        this.canvasDisplayService.drawButtons(Array.from(this.activeButtons.values()));\n    }\n\n    private handleButtonUp(button: PalmButton): void {\n        if (!this.activeButtons.has(button)) return;\n\n        this.activeButtons.delete(button);\n        this.emulationService.handleButtonUp(button);\n        this.canvasDisplayService.drawButtons(Array.from(this.activeButtons.values()));\n    }\n\n    private isToggleGameMode(e: KeyboardEvent): boolean {\n        return (e.key === 'Shift' && e.ctrlKey) || (e.key === 'Control' && e.shiftKey);\n    }\n\n    private isGameModeActive(e: KeyboardEvent): boolean {\n        return (!this.gameMode && e.ctrlKey) || (this.gameMode && !e.ctrlKey);\n    }\n\n    private buttonFromEvent(e: KeyboardEvent): PalmButton | undefined {\n        switch (e.key) {\n            case 'PageUp':\n                return PalmButton.up;\n\n            case 'PageDown':\n                return PalmButton.down;\n        }\n\n        if (!this.isGameModeActive(e)) return;\n\n        switch (e.key) {\n            case 'w':\n            case 'i':\n            case 'ArrowUp':\n                return PalmButton.up;\n\n            case 's':\n            case 'k':\n            case 'ArrowDown':\n                return PalmButton.down;\n\n            case 'a':\n            case 'j':\n            case 'y':\n            case 'z':\n            case 'ArrowLeft':\n                return PalmButton.cal;\n\n            case 'q':\n            case 'u':\n            case 'x':\n                return PalmButton.phone;\n\n            case 'e':\n            case 'o':\n            case 'c':\n                return PalmButton.todo;\n\n            case 'd':\n            case 'l':\n            case 'v':\n            case 'ArrowRight':\n                return PalmButton.notes;\n        }\n\n        return undefined;\n    }\n\n    private keyCodeFromEvent(e: KeyboardEvent): number | undefined {\n        if (this.isGameModeActive(e)) return;\n\n        if (e.key.length === 1 && e.key.charCodeAt(0) <= 255) return e.key.charCodeAt(0);\n\n        switch (e.key) {\n            case 'ArrowLeft':\n                return 0x1c;\n\n            case 'ArrowRight':\n                return 0x1d;\n\n            case 'ArrowUp':\n                return 0x1e;\n\n            case 'ArrowDown':\n                return 0x1f;\n\n            case 'Backspace':\n                return 0x08;\n\n            case 'Tab':\n                return 0x09;\n\n            case 'Enter':\n                return 0x0a;\n\n            default:\n                return undefined;\n        }\n    }\n\n    private canvas: HTMLCanvasElement | undefined;\n    private interactionMouse: Interaction | undefined;\n    private interactionsTouch = new Map<number, Interaction>();\n    private activeButtons = new Set<PalmButton>();\n    private gameMode = false;\n}\n","import { AlertService } from './alert.service';\nimport { DbInstallResult } from '../helper/Cloudpilot';\nimport { EmulationService } from './emulation.service';\nimport { EmulationStateService } from './emulation-state.service';\nimport { FileDescriptor } from './file.service';\nimport { Injectable } from '@angular/core';\nimport { LoadingController } from '@ionic/angular';\nimport { SnapshotService } from './snapshot.service';\nimport { concatFilenames } from '../helper/filename';\n\n@Injectable({ providedIn: 'root' })\nexport class InstallationService {\n    constructor(\n        private emulationService: EmulationService,\n        private loadingController: LoadingController,\n        private snapshotService: SnapshotService,\n        private emulationStateService: EmulationStateService,\n        private alertService: AlertService\n    ) {}\n\n    async installFiles(files: Array<FileDescriptor>): Promise<void> {\n        const loader = await this.loadingController.create({\n            message: 'Installing...',\n        });\n\n        await loader.present();\n        await this.emulationService.pause();\n        await this.snapshotService.waitForPendingSnapshot();\n\n        const filesSuccess: Array<string> = [];\n        const filesFail: Array<string> = [];\n        const filesRequireReset: Array<string> = [];\n\n        try {\n            for (const file of files) {\n                if (!/\\.(prc|pdb|pqa)$/i.test(file.name)) {\n                    filesFail.push(file.name);\n\n                    continue;\n                }\n\n                switch (await this.emulationService.installDb(file.content)) {\n                    case DbInstallResult.failure:\n                        filesFail.push(file.name);\n                        break;\n\n                    case DbInstallResult.needsReboot:\n                        filesRequireReset.push(file.name);\n                        filesSuccess.push(file.name);\n                        break;\n\n                    case DbInstallResult.success:\n                        filesSuccess.push(file.name);\n                        break;\n                }\n\n                await new Promise((r) => setTimeout(r, 0));\n            }\n        } finally {\n            loader.dismiss();\n\n            this.emulationService.resume();\n        }\n\n        const message = [\n            this.messageSucces(filesSuccess),\n            this.messageFailed(filesFail),\n            this.messageRequireReset(filesRequireReset),\n        ]\n            .filter((x) => !!x)\n            .join('<br/><br/>');\n\n        let header;\n\n        if (filesFail.length === 0) {\n            header = 'Installation successful';\n        } else if (filesSuccess.length === 0) {\n            header = 'Installation failed';\n        } else {\n            header = 'Installation errors';\n        }\n\n        this.alertService.message(\n            header,\n            message,\n            filesRequireReset.length > 0 ? { 'Reset now': () => this.emulationService.reset() } : undefined\n        );\n    }\n\n    private messageSucces(filesSuccess: Array<string>): string | undefined {\n        switch (filesSuccess.length) {\n            case 0:\n                return undefined;\n\n            case 1:\n                return `Installation of ${filesSuccess[0]} successful.`;\n\n            default:\n                return `Installation of ${filesSuccess.length} files successful.`;\n        }\n    }\n\n    private messageFailed(filesFail: Array<string>): string | undefined {\n        return filesFail.length > 0 ? `Installation of  ${concatFilenames(filesFail)} failed.` : undefined;\n    }\n\n    private messageRequireReset(filesRequireReset: Array<string>): string | undefined {\n        return filesRequireReset.length > 0\n            ? `${concatFilenames(filesRequireReset)} require a device reset.`\n            : undefined;\n    }\n}\n","<ion-list>\n  <ion-item button [detail]=\"false\" (click)=\"power()\" [disabled]=\"!emulationService.isRunning()\">\n    Power\n  </ion-item>\n  <ion-item button [detail]=\"false\" (click)=\"reset()\" [disabled]=\"!emulationService.isRunning()\">\n    Reset\n  </ion-item>\n  <ion-item button [detail]=\"false\" (click)=\"resetNoExtensions()\" [disabled]=\"!emulationService.isRunning()\">\n    Reset (no extensions)\n  </ion-item>\n  <ion-item button [detail]=\"false\" (click)=\"resetHard()\" [disabled]=\"!emulationService.isRunning()\">\n    Hard reset\n  </ion-item>\n  <ion-item button [detail]=\"false\" (click)=\"backup()\" [disabled]=\"backupDisabled\">\n    Save backup\n  </ion-item>\n  <ion-item button [detail]=\"false\" (click)=\"help()\">\n    Help\n  </ion-item>\n</ion-list>\n","<ion-header>\n  <ion-toolbar>\n    <ion-title>{{title}}</ion-title>\n\n    <ion-buttons slot=\"end\">\n      <ion-button [disabled]=\"installFileDisabled\" (click)=\"installFiles()\">\n        <ion-icon name=\"download-outline\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n\n    <ion-buttons slot=\"start\">\n      <ion-button (click)=\"openContextMenu($event)\">\n        <ion-icon name=\"ellipsis-vertical-outline\"></ion-icon>\n      </ion-button>\n\n      <ion-button *ngIf=\"isMuted && !isAudioOff\" (click)=\"mute(false)\">\n        <ion-icon name=\"volume-mute-outline\"></ion-icon>\n      </ion-button>\n      <ion-button *ngIf=\"!isMuted && !isAudioOff\" (click)=\"mute(true)\">\n        <ion-icon name=\"volume-high-outline\"></ion-icon>\n      </ion-button>\n      <ion-button *ngIf=\"eventHandlingService.isGameMode()\" (click)=\"showGameModeHint()\">\n        <ion-icon name=\"game-controller-outline\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n\n  <div class=\"container running-session\" [style.display]=\"emulationState.getCurrentSession() ? undefined : 'none'\">\n    <canvas #canvas [style.width]=\"cssWidth\" [style.height]=\"cssHeight\"\n      [style.display]=\"emulationState.getCurrentSession() ? 'block' : 'none'\"></canvas>\n  </div>\n\n  <div class=\"container no-session\" *ngIf=\" !emulationState.getCurrentSession()\">\n    <div>No session selected</div>\n  </div>\n\n</ion-content>\n","import { RouterModule, Routes } from '@angular/router';\n\nimport { EmulationPage } from './emulation.page';\nimport { NgModule } from '@angular/core';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: EmulationPage,\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class EmulationPageRoutingModule {}\n","import { AfterViewInit, Component, ElementRef, ViewChild } from '@angular/core';\nimport { ModalController, PopoverController } from '@ionic/angular';\n\nimport { AlertService } from 'src/app/service/alert.service';\nimport { AudioService } from './../../service/audio.service';\nimport { CanvasDisplayService } from './../../service/canvas-display.service';\nimport { ContextMenuComponent } from './context-menu/context-menu.component';\nimport { EmulationService } from './../../service/emulation.service';\nimport { EmulationStateService } from './../../service/emulation-state.service';\nimport { EventHandlingService } from './../../service/event-handling.service';\nimport { FileService } from 'src/app/service/file.service';\nimport { HelpComponent } from 'src/app/component/help/help.component';\nimport { InstallationService } from './../../service/installation.service';\nimport { KvsService } from './../../service/kvs.service';\nimport { SnapshotService } from './../../service/snapshot.service';\nimport { SnapshotStatistics } from './../../model/SnapshotStatistics';\nimport { StorageService } from './../../service/storage.service';\nimport { getStoredSession } from 'src/app/helper/storedSession';\n\n@Component({\n    selector: 'app-emulation',\n    templateUrl: './emulation.page.html',\n    styleUrls: ['./emulation.page.scss'],\n})\nexport class EmulationPage implements AfterViewInit {\n    constructor(\n        public emulationService: EmulationService,\n        public emulationState: EmulationStateService,\n        private storageService: StorageService,\n        public eventHandlingService: EventHandlingService,\n        private canvasDisplayService: CanvasDisplayService,\n        private kvsService: KvsService,\n        private audioService: AudioService,\n        private popoverController: PopoverController,\n        private modalController: ModalController,\n        private alertService: AlertService,\n        private fileService: FileService,\n        private snapshotService: SnapshotService,\n        private installlationService: InstallationService\n    ) {}\n\n    ngAfterViewInit(): void {}\n\n    get cssWidth(): string {\n        return this.canvasDisplayService.width / devicePixelRatio + 'px';\n    }\n\n    get cssHeight(): string {\n        return this.canvasDisplayService.height / devicePixelRatio + 'px';\n    }\n\n    async ionViewDidEnter(): Promise<void> {\n        let session = this.emulationState.getCurrentSession();\n        const storedSession = getStoredSession();\n\n        if (!session && storedSession !== undefined) {\n            session = await this.storageService.getSession(storedSession);\n        }\n        this.canvasDisplayService.initialize(this.canvasRef.nativeElement, session).then(() => {\n            if (this.kvsService.kvs.showStatistics) this.canvasDisplayService.drawStatistics();\n        });\n        this.onNewFrame(this.emulationService.getCanvas());\n\n        this.emulationService.newFrameEvent.addHandler(this.onNewFrame);\n        this.snapshotService.snapshotEvent.addHandler(this.onSnapshot);\n\n        this.emulationService.resume();\n\n        this.eventHandlingService.bind(this.canvasRef.nativeElement);\n    }\n\n    ionViewWillLeave() {\n        this.emulationService.pause();\n\n        this.emulationService.newFrameEvent.removeHandler(this.onNewFrame);\n        this.snapshotService.snapshotEvent.removeHandler(this.onSnapshot);\n\n        this.eventHandlingService.release();\n    }\n\n    async openContextMenu(e: MouseEvent): Promise<void> {\n        const popover = await this.popoverController.create({\n            component: ContextMenuComponent,\n            event: e,\n            backdropDismiss: true,\n            showBackdrop: false,\n            componentProps: {\n                onClick: () => popover.dismiss(),\n                showHelp: () => this.showHelp(),\n            },\n        });\n\n        popover.present();\n    }\n\n    installFiles(): void {\n        this.fileService.openFiles(this.installlationService.installFiles.bind(this.installlationService));\n    }\n\n    async showHelp(): Promise<void> {\n        const modal = await this.modalController.create({\n            component: HelpComponent,\n            componentProps: {\n                url: 'assets/doc/emulation.md',\n            },\n        });\n        await modal.present();\n    }\n\n    async showGameModeHint(): Promise<void> {\n        await this.alertService.message(\n            'Game mode',\n            `\n                The keyboard is in game mode and controls the hardware buttons.\n                Press ctrl-shift in order to exit game mode.\n                <br/><br/>\n                Check the help page for a description of the different keyboard mappings.\n            `,\n            {\n                Help: () => this.showHelp(),\n            }\n        );\n    }\n\n    get installFileDisabled(): boolean {\n        return (\n            !this.emulationService.isRunning() ||\n            this.emulationService.isPowerOff() ||\n            !this.emulationService.isUiInitialized()\n        );\n    }\n\n    get title(): string {\n        return this.emulationState.getCurrentSession()?.name || '';\n    }\n\n    get isMuted(): boolean {\n        return !this.audioService.isInitialized() || this.audioService.isMuted();\n    }\n\n    get isAudioOff(): boolean {\n        return this.kvsService.kvs.volume <= 0;\n    }\n\n    mute(muted: boolean): void {\n        if (muted) {\n            this.audioService.mute(true);\n        } else {\n            if (this.audioService.isInitialized()) {\n                this.audioService.mute(false);\n            } else {\n                this.audioService.initialize();\n            }\n        }\n    }\n\n    private onSnapshot = (statistics: SnapshotStatistics): void => {\n        if (this.kvsService.kvs.showStatistics) {\n            this.canvasDisplayService.drawStatistics(statistics, this.emulationService.getStatistics());\n        }\n    };\n\n    private onNewFrame = (canvas: HTMLCanvasElement): void => {\n        this.canvasDisplayService.drawEmulationCanvas(canvas);\n    };\n\n    @ViewChild('canvas') private canvasRef!: ElementRef<HTMLCanvasElement>;\n}\n","import { CommonModule } from '@angular/common';\nimport { ContextMenuComponent } from './context-menu/context-menu.component';\nimport { EmulationPage } from './emulation.page';\nimport { EmulationPageRoutingModule } from './emulation-routing.module';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { NgModule } from '@angular/core';\nimport { SharedComponentModule } from './../../component/shared-component.module';\n\n@NgModule({\n    imports: [CommonModule, FormsModule, IonicModule, EmulationPageRoutingModule, SharedComponentModule],\n    declarations: [EmulationPage, ContextMenuComponent],\n})\nexport class EmulationPageModule {}\n"]}