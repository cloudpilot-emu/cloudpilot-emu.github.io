{"version":3,"sources":["webpack:///src/app/page/emulation/helper/CanvasHelper.ts","webpack:///src/app/tabs/tabs.page.ts","webpack:///src/app/tabs/tabs-routing.module.ts","webpack:///src/app/tabs/tabs.page.html","webpack:///src/app/tabs/tabs.module.ts"],"names":["BACKGROUND_COLOR_SILKSCREEN","BACKGROUND_COLOR_DEFAULT","SCALE","devicePixelRatio","BORDER","Math","round","WIDTH","HEIGHT","loadImage","url","Promise","resolve","reject","image","Image","onload","onerror","src","prerenderButtons","canvas","document","createElement","width","height","ctx","getContext","Error","drawImage","IMAGE_SILKSCREEN_DEFAULT","IMAGE_SILKSCREEN_M515","IMAGE_BUTTONS_DEFAULT","IMAGE_BUTTONS_M515","CanvasHelper","this","session","fillCanvasRect","backgroundColor","drawSilkscreen","drawButtons","silkscreenImage","fillRect","imageSmoothingEnabled","imageSmoothingQuality","activeButtons","buttonsImage","includes","x","y","style","beginPath","rect","fillStyle","fill","device","m515","canvasArea","availableHeight","availableWidth","scaledWidth","scaledHeight","min","routes","path","component","TabsPage","router","updateUseSmallUI","useSmallUI","window","innerHeight","innerWidth","addEventListener","children","loadChildren","then","m","EmulationPageModule","SessionsPageModule","SettingsPageModule","redirectTo","pathMatch","TabsPageRoutingModule","forChild","TabsPageModule"],"mappings":"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","file":"x","sourcesContent":["import { DeviceId } from 'src/app/model/DeviceId';\nimport { GRAYSCALE_PALETTE_HEX } from './../../../service/emulation.service';\nimport { PalmButton } from '../../../../../../src';\nimport { Session } from './../../../model/Session';\n\nconst URL_SILKSCREEN_DEFAULT = 'assets/silkscreen-default.svg';\nconst URL_SILKSCREEN_M515 = 'assets/silkscreen-m515.svg';\nconst URL_BUTTONS_DEFAULT = 'assets/hard-buttons-default.svg';\nconst URL_BUTTONS_M515 = 'assets/hard-buttons-m515.svg';\n\nconst BACKGROUND_COLOR_SILKSCREEN = GRAYSCALE_PALETTE_HEX[2];\nconst BACKGROUND_COLOR_DEFAULT = GRAYSCALE_PALETTE_HEX[0];\nconst BACKGROUND_COLOR_M515 = 'white';\nconst BACKGROUND_ACTIVE_BUTTON = 'rgba(0,0,0,0.2)';\n\nexport const SCALE = 3 * devicePixelRatio;\nexport const BORDER = Math.round(1 * SCALE);\nexport const WIDTH = SCALE * 160 + 2 * BORDER;\nexport const HEIGHT = SCALE * 251 + 2 * BORDER;\n\nfunction loadImage(url: string): Promise<HTMLImageElement> {\n    return new Promise<HTMLImageElement>((resolve, reject) => {\n        const image = new Image();\n\n        image.onload = () => resolve(image);\n        image.onerror = () => reject();\n\n        image.src = url;\n    });\n}\n\nasync function prerenderButtons(url: string): Promise<HTMLCanvasElement> {\n    const canvas = document.createElement('canvas');\n    canvas.width = 160 * SCALE;\n    canvas.height = 30 * SCALE;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) throw new Error('get a new browser');\n\n    ctx.drawImage(await loadImage(url), 0, 0, SCALE * 160, SCALE * 30);\n\n    return canvas;\n}\n\nconst IMAGE_SILKSCREEN_DEFAULT = loadImage(URL_SILKSCREEN_DEFAULT);\nconst IMAGE_SILKSCREEN_M515 = loadImage(URL_SILKSCREEN_M515);\nconst IMAGE_BUTTONS_DEFAULT = prerenderButtons(URL_BUTTONS_DEFAULT);\nconst IMAGE_BUTTONS_M515 = prerenderButtons(URL_BUTTONS_M515);\n\nexport class CanvasHelper {\n    constructor(private canvas: HTMLCanvasElement) {\n        const ctx = canvas.getContext('2d');\n        if (!ctx) throw new Error('get a new browser');\n\n        this.ctx = ctx;\n    }\n\n    async clear(session: Session | undefined): Promise<void> {\n        this.session = session;\n        this.fillCanvasRect(0, 0, WIDTH, HEIGHT, this.backgroundColor());\n\n        await this.drawSilkscreen();\n        await this.drawButtons();\n    }\n\n    async drawSilkscreen(): Promise<void> {\n        const image = await this.silkscreenImage();\n\n        this.fillRect(0, 161, 160, 60, BACKGROUND_COLOR_SILKSCREEN);\n\n        this.ctx.imageSmoothingEnabled = true;\n        this.ctx.imageSmoothingQuality = 'high';\n\n        this.ctx.drawImage(image, BORDER, BORDER + 161 * SCALE, 160 * SCALE, 60 * SCALE);\n    }\n\n    async drawButtons(activeButtons: Array<PalmButton> = []): Promise<void> {\n        this.ctx.drawImage(await this.buttonsImage(), BORDER, BORDER + 221 * SCALE, 160 * SCALE, 30 * SCALE);\n\n        if (activeButtons.includes(PalmButton.cal)) this.fillRect(0, 221, 30, 30, BACKGROUND_ACTIVE_BUTTON);\n        if (activeButtons.includes(PalmButton.phone)) this.fillRect(30, 221, 30, 30, BACKGROUND_ACTIVE_BUTTON);\n        if (activeButtons.includes(PalmButton.todo)) this.fillRect(100, 221, 30, 30, BACKGROUND_ACTIVE_BUTTON);\n        if (activeButtons.includes(PalmButton.notes)) this.fillRect(130, 221, 30, 30, BACKGROUND_ACTIVE_BUTTON);\n        if (activeButtons.includes(PalmButton.up)) this.fillRect(60, 221, 40, 15, BACKGROUND_ACTIVE_BUTTON);\n        if (activeButtons.includes(PalmButton.down)) this.fillRect(60, 236, 40, 15, BACKGROUND_ACTIVE_BUTTON);\n    }\n\n    drawEmulationCanvas(canvas: HTMLCanvasElement): void {\n        this.ctx.imageSmoothingEnabled = false;\n        this.ctx.drawImage(canvas, BORDER, BORDER, SCALE * 160, SCALE * 160);\n    }\n\n    private fillRect(x: number, y: number, width: number, height: number, style: string): void {\n        this.ctx.beginPath();\n        this.ctx.rect(BORDER + SCALE * x, BORDER + SCALE * y, SCALE * width, SCALE * height);\n        this.ctx.fillStyle = style;\n        this.ctx.fill();\n    }\n\n    private fillCanvasRect(x: number, y: number, width: number, height: number, style: string): void {\n        this.ctx.beginPath();\n        this.ctx.rect(x, y, width, height);\n        this.ctx.fillStyle = style;\n        this.ctx.fill();\n    }\n\n    private silkscreenImage(): Promise<HTMLImageElement> {\n        switch (this.session?.device) {\n            case DeviceId.m515:\n                return IMAGE_SILKSCREEN_M515;\n\n            default:\n                return IMAGE_SILKSCREEN_DEFAULT;\n        }\n    }\n\n    private buttonsImage(): Promise<HTMLCanvasElement> {\n        switch (this.session?.device) {\n            case DeviceId.m515:\n                return IMAGE_BUTTONS_M515;\n\n            default:\n                return IMAGE_BUTTONS_DEFAULT;\n        }\n    }\n\n    private backgroundColor(): string {\n        switch (this.session?.device) {\n            case DeviceId.m515:\n                return BACKGROUND_COLOR_M515;\n\n            default:\n                return BACKGROUND_COLOR_DEFAULT;\n        }\n    }\n\n    private ctx: CanvasRenderingContext2D;\n    private session: Session | undefined;\n}\n","import { HEIGHT, SCALE, WIDTH } from './../page/emulation/helper/CanvasHelper';\n\nimport { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\nfunction canvasArea(availableHeight: number, availableWidth: number): number {\n    availableHeight = Math.min(availableHeight, HEIGHT / devicePixelRatio);\n    availableWidth = Math.min(availableWidth, WIDTH / devicePixelRatio);\n\n    let scaledWidth: number;\n    let scaledHeight: number;\n\n    if (availableWidth / availableHeight > WIDTH / HEIGHT) {\n        scaledHeight = availableHeight;\n        scaledWidth = (availableHeight / HEIGHT) * WIDTH;\n    } else {\n        scaledWidth = availableWidth;\n        scaledHeight = (availableWidth / WIDTH) * HEIGHT;\n    }\n\n    return scaledWidth * scaledHeight;\n}\n\n@Component({\n    selector: 'app-tabs',\n    templateUrl: 'tabs.page.html',\n    styleUrls: ['tabs.page.scss'],\n})\nexport class TabsPage {\n    constructor(private router: Router) {\n        window.addEventListener('resize', this.updateUseSmallUI);\n\n        this.updateUseSmallUI();\n    }\n\n    get smallUI(): boolean {\n        return this.router.url === '/tab/emulation' && this.useSmallUI;\n    }\n\n    private updateUseSmallUI = (): void => {\n        this.useSmallUI =\n            canvasArea(window.innerHeight - 44 - 50 - 6, window.innerWidth - 6) <\n            canvasArea(window.innerHeight - 44 - 25 - 6, window.innerWidth - 6);\n    };\n\n    private useSmallUI = false;\n}\n","import { RouterModule, Routes } from '@angular/router';\n\nimport { NgModule } from '@angular/core';\nimport { TabsPage } from './tabs.page';\n\nconst routes: Routes = [\n    {\n        path: 'tab',\n        component: TabsPage,\n        children: [\n            {\n                path: 'emulation',\n                loadChildren: () => import('../page/emulation/emulation.module').then((m) => m.EmulationPageModule),\n            },\n            {\n                path: 'sessions',\n                loadChildren: () => import('../page/sessions/sessions.module').then((m) => m.SessionsPageModule),\n            },\n            {\n                path: 'settings',\n                loadChildren: () => import('../page/settings/settings.module').then((m) => m.SettingsPageModule),\n            },\n            {\n                path: '',\n                redirectTo: '/tab/emulation',\n                pathMatch: 'full',\n            },\n        ],\n    },\n    {\n        path: '',\n        redirectTo: '/tab/sessions',\n        pathMatch: 'full',\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class TabsPageRoutingModule {}\n","<ion-tabs>\n\n  <ion-tab-bar [class.small-ui]=\"smallUI\" slot=\"bottom\">\n    <ion-tab-button tab=\"emulation\">\n      <ion-icon name=\"phone-portrait-outline\"></ion-icon>\n      <ion-label>Emulator</ion-label>\n    </ion-tab-button>\n\n    <ion-tab-button tab=\"sessions\">\n      <ion-icon name=\"albums-outline\"></ion-icon>\n      <ion-label>Sessions</ion-label>\n    </ion-tab-button>\n\n    <ion-tab-button tab=\"settings\">\n      <ion-icon name=\"cog-outline\"></ion-icon>\n      <ion-label>About / Settings</ion-label>\n    </ion-tab-button>\n  </ion-tab-bar>\n\n</ion-tabs>\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { NgModule } from '@angular/core';\nimport { TabsPage } from './tabs.page';\nimport { TabsPageRoutingModule } from './tabs-routing.module';\n\n@NgModule({\n    imports: [IonicModule, CommonModule, FormsModule, TabsPageRoutingModule],\n    declarations: [TabsPage],\n})\nexport class TabsPageModule {}\n"]}