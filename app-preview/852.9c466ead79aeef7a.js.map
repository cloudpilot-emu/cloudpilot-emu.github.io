{"version":3,"file":"852.9c466ead79aeef7a.js","mappings":"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","names":["createBaseAnimation","pullingRefresherIcon","spinner","querySelector","circle","shadowRoot","spinnerArrowContainer","arrowContainer","arrow","baseAnimation","createAnimation","duration","easing","spinnerArrowContainerAnimation","addElement","keyframes","offset","opacity","circleInnerAnimation","strokeDasharray","circleOuterAnimation","transform","arrowContainerAnimation","arrowAnimation","addAnimation","translateElement","el","value","Promise","resolve","trans","transitionEndAsync","writeTask","style","setProperty","undefined","removeProperty","supportsRubberBandScrolling","navigator","maxTouchPoints","CSS","supports","shouldUseNativeRefresher","_ref","_asyncToGenerator","referenceEl","mode","refresherContent","componentOnReady","pullingSpinner","refreshingSpinner","_x","_x2","apply","this","arguments","Refresher","constructor","hostRef","registerInstance","ionRefresh","createEvent","ionPull","ionStart","appliedStyles","didStart","progress","pointerDown","needsCompletion","didRefresh","contentFullscreen","lastVelocityY","animations","nativeRefresher","state","pullMin","pullMax","closeDuration","snapbackDuration","pullFactor","disabled","disabledChanged","gesture","enable","checkNativeRefresher","_this","useNativeRefresher","getIonMode","contentEl","closest","setupNativeRefresher","destroyNativeRefresher","scrollEl","scrollListenerCallback","removeEventListener","resetNativeRefresher","_this2","forEach","ani","destroy","setupiOSNativeRefresher","_this3","elementToTransform","ticks","querySelectorAll","MAX_PULL","clientHeight","NUM_TICKS","length","readTask","scrollTop","refresherHeight","ratio","clamp","setSpinnerOpacity","toString","emit","pullAmount","Math","abs","handleScrollWhileRefreshing","beginRefresh","hapticImpact","ImpactStyle","Light","activeElement","document","blur","handleScrollWhilePulling","numTicks","i","min","max","progression","addEventListener","then","__webpack_require__","bind","createGesture","gestureName","gesturePriority","direction","threshold","onStart","onMove","ev","velocityY","onEnd","setupMDNativeRefresher","_this4","getElementRoot","refreshingCircle","canStart","data","animation","cancelled","overflowProperty","matches","ION_CONTENT_CLASS_SELECTOR","animationType","previousSibling","previousElementSibling","tagName","getRefresherAnimationType","createPullingAnimation","type","refresherEl","createScaleAnimation","height","spinnerAnimation","createTranslateAnimation","progressStart","push","deltaY","progressStep","progressEnd","onFinish","getTimeGivenProgression","snapBackAnimation","fromTo","createSnapBackAnimation","play","_this5","setCss","componentDidUpdate","connectedCallback","_this6","getAttribute","printIonError","ION_CONTENT_ELEMENT_SELECTOR","customScrollTarget","getScrollElement","backgroundContentEl","getBackgroundElement","fullscreen","passive","printIonContentErrorMsg","disconnectedCallback","complete","_this7","raf","close","cancel","_this8","getProgress","memoizeOverflowStyle","detail","event","touches","Number","isNaN","cancelable","preventDefault","restoreOverflowStyle","delay","setTimeout","_a","y","overflowVisible","shouldRestoreOverflowStyle","scrollStyle","backgroundStyle","transitionDuration","transitionDelay","overflow","overflowX","overflowY","overflowStyles","render","h","Host","key","slot","class","e","getElement","watchers","ios","md","RefresherContent","customHTMLEnabled","config","get","ENABLE_HTML_CONTENT_DEFAULT","componentWillLoad","pullingIcon","hasRubberBandScrolling","arrowDown","renderPullingText","pullingText","innerHTML","sanitizeDOMString","renderRefreshingText","refreshingText","hasSpinner","SPINNERS","name","paused","icon","caretBackSharp","lazy"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/ion-refresher_2.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { w as writeTask, r as registerInstance, c as createEvent, a as readTask, j as printIonError, h, d as Host, g as getElement, e as config } from './index-4DxY6_gG.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-hHmYLOfE.js';\nimport { I as ION_CONTENT_CLASS_SELECTOR, b as ION_CONTENT_ELEMENT_SELECTOR, p as printIonContentErrorMsg, g as getScrollElement } from './index-7UbSlv7N.js';\nimport { c as componentOnReady, t as transitionEndAsync, e as clamp, g as getElementRoot, r as raf } from './helpers-8KSQQGQy.js';\nimport { d as hapticImpact, I as ImpactStyle } from './haptic-DzAMWJuk.js';\nimport { b as getIonMode } from './ionic-global-CTSyufhF.js';\nimport { c as createAnimation } from './animation-BvhAtgca.js';\nimport { E as ENABLE_HTML_CONTENT_DEFAULT, a as sanitizeDOMString } from './config-Dx_6wPIJ.js';\nimport { h as arrowDown, i as caretBackSharp } from './index-DV3sJJW8.js';\nimport { S as SPINNERS } from './spinner-configs-D4RIp70E.js';\nimport './capacitor-CFERIeaU.js';\nimport './index-ZjP4CjeZ.js';\n\nconst getRefresherAnimationType = (contentEl) => {\n    const previousSibling = contentEl.previousElementSibling;\n    const hasHeader = previousSibling !== null && previousSibling.tagName === 'ION-HEADER';\n    return hasHeader ? 'translate' : 'scale';\n};\nconst createPullingAnimation = (type, pullingSpinner, refresherEl) => {\n    return type === 'scale'\n        ? createScaleAnimation(pullingSpinner, refresherEl)\n        : createTranslateAnimation(pullingSpinner, refresherEl);\n};\nconst createBaseAnimation = (pullingRefresherIcon) => {\n    const spinner = pullingRefresherIcon.querySelector('ion-spinner');\n    const circle = spinner.shadowRoot.querySelector('circle');\n    const spinnerArrowContainer = pullingRefresherIcon.querySelector('.spinner-arrow-container');\n    const arrowContainer = pullingRefresherIcon.querySelector('.arrow-container');\n    const arrow = arrowContainer ? arrowContainer.querySelector('ion-icon') : null;\n    const baseAnimation = createAnimation().duration(1000).easing('ease-out');\n    const spinnerArrowContainerAnimation = createAnimation()\n        .addElement(spinnerArrowContainer)\n        .keyframes([\n        { offset: 0, opacity: '0.3' },\n        { offset: 0.45, opacity: '0.3' },\n        { offset: 0.55, opacity: '1' },\n        { offset: 1, opacity: '1' },\n    ]);\n    const circleInnerAnimation = createAnimation()\n        .addElement(circle)\n        .keyframes([\n        { offset: 0, strokeDasharray: '1px, 200px' },\n        { offset: 0.2, strokeDasharray: '1px, 200px' },\n        { offset: 0.55, strokeDasharray: '100px, 200px' },\n        { offset: 1, strokeDasharray: '100px, 200px' },\n    ]);\n    const circleOuterAnimation = createAnimation()\n        .addElement(spinner)\n        .keyframes([\n        { offset: 0, transform: 'rotate(-90deg)' },\n        { offset: 1, transform: 'rotate(210deg)' },\n    ]);\n    /**\n     * Only add arrow animation if present\n     * this allows users to customize the spinners\n     * without errors being thrown\n     */\n    if (arrowContainer && arrow) {\n        const arrowContainerAnimation = createAnimation()\n            .addElement(arrowContainer)\n            .keyframes([\n            { offset: 0, transform: 'rotate(0deg)' },\n            { offset: 0.3, transform: 'rotate(0deg)' },\n            { offset: 0.55, transform: 'rotate(280deg)' },\n            { offset: 1, transform: 'rotate(400deg)' },\n        ]);\n        const arrowAnimation = createAnimation()\n            .addElement(arrow)\n            .keyframes([\n            { offset: 0, transform: 'translateX(2px) scale(0)' },\n            { offset: 0.3, transform: 'translateX(2px) scale(0)' },\n            { offset: 0.55, transform: 'translateX(-1.5px) scale(1)' },\n            { offset: 1, transform: 'translateX(-1.5px) scale(1)' },\n        ]);\n        baseAnimation.addAnimation([arrowContainerAnimation, arrowAnimation]);\n    }\n    return baseAnimation.addAnimation([spinnerArrowContainerAnimation, circleInnerAnimation, circleOuterAnimation]);\n};\nconst createScaleAnimation = (pullingRefresherIcon, refresherEl) => {\n    /**\n     * Do not take the height of the refresher icon\n     * because at this point the DOM has not updated,\n     * so the refresher icon is still hidden with\n     * display: none.\n     * The `ion-refresher` container height\n     * is roughly the amount we need to offset\n     * the icon by when pulling down.\n     */\n    const height = refresherEl.clientHeight;\n    const spinnerAnimation = createAnimation()\n        .addElement(pullingRefresherIcon)\n        .keyframes([\n        { offset: 0, transform: `scale(0) translateY(-${height}px)` },\n        { offset: 1, transform: 'scale(1) translateY(100px)' },\n    ]);\n    return createBaseAnimation(pullingRefresherIcon).addAnimation([spinnerAnimation]);\n};\nconst createTranslateAnimation = (pullingRefresherIcon, refresherEl) => {\n    /**\n     * Do not take the height of the refresher icon\n     * because at this point the DOM has not updated,\n     * so the refresher icon is still hidden with\n     * display: none.\n     * The `ion-refresher` container height\n     * is roughly the amount we need to offset\n     * the icon by when pulling down.\n     */\n    const height = refresherEl.clientHeight;\n    const spinnerAnimation = createAnimation()\n        .addElement(pullingRefresherIcon)\n        .keyframes([\n        { offset: 0, transform: `translateY(-${height}px)` },\n        { offset: 1, transform: 'translateY(100px)' },\n    ]);\n    return createBaseAnimation(pullingRefresherIcon).addAnimation([spinnerAnimation]);\n};\nconst createSnapBackAnimation = (pullingRefresherIcon) => {\n    return createAnimation()\n        .duration(125)\n        .addElement(pullingRefresherIcon)\n        .fromTo('transform', 'translateY(var(--ion-pulling-refresher-translate, 100px))', 'translateY(0px)');\n};\n// iOS Native Refresher\n// -----------------------------\nconst setSpinnerOpacity = (spinner, opacity) => {\n    spinner.style.setProperty('opacity', opacity.toString());\n};\nconst handleScrollWhilePulling = (ticks, numTicks, pullAmount) => {\n    const max = 1;\n    writeTask(() => {\n        ticks.forEach((el, i) => {\n            /**\n             * Compute the opacity of each tick\n             * mark as a percentage of the pullAmount\n             * offset by max / numTicks so\n             * the tick marks are shown staggered.\n             */\n            const min = i * (max / numTicks);\n            const range = max - min;\n            const start = pullAmount - min;\n            const progression = clamp(0, start / range, 1);\n            el.style.setProperty('opacity', progression.toString());\n        });\n    });\n};\nconst handleScrollWhileRefreshing = (spinner, lastVelocityY) => {\n    writeTask(() => {\n        // If user pulls down quickly, the spinner should spin faster\n        spinner.style.setProperty('--refreshing-rotation-duration', lastVelocityY >= 1.0 ? '0.5s' : '2s');\n        spinner.style.setProperty('opacity', '1');\n    });\n};\nconst translateElement = (el, value, duration = 200) => {\n    if (!el) {\n        return Promise.resolve();\n    }\n    const trans = transitionEndAsync(el, duration);\n    writeTask(() => {\n        el.style.setProperty('transition', `${duration}ms all ease-out`);\n        if (value === undefined) {\n            el.style.removeProperty('transform');\n        }\n        else {\n            el.style.setProperty('transform', `translate3d(0px, ${value}, 0px)`);\n        }\n    });\n    return trans;\n};\n// Utils\n// -----------------------------\n/**\n * In order to use the native iOS refresher the device must support rubber band scrolling.\n * As part of this, we need to exclude Desktop Safari because it has a slightly different rubber band effect that is not compatible with the native refresher in Ionic.\n *\n * We also need to be careful not to include devices that spoof their user agent.\n * For example, when using iOS emulation in Chrome the user agent will be spoofed such that\n * navigator.maxTouchPointer > 0. To work around this,\n * we check to see if the apple-pay-logo is supported as a named image which is only\n * true on Apple devices.\n *\n * We previously checked referencEl.style.webkitOverflowScrolling to explicitly check\n * for rubber band support. However, this property was removed on iPadOS and it's possible\n * that this will be removed on iOS in the future too.\n *\n */\nconst supportsRubberBandScrolling = () => {\n    return navigator.maxTouchPoints > 0 && CSS.supports('background: -webkit-named-image(apple-pay-logo-black)');\n};\nconst shouldUseNativeRefresher = async (referenceEl, mode) => {\n    const refresherContent = referenceEl.querySelector('ion-refresher-content');\n    if (!refresherContent) {\n        return Promise.resolve(false);\n    }\n    await new Promise((resolve) => componentOnReady(refresherContent, resolve));\n    const pullingSpinner = referenceEl.querySelector('ion-refresher-content .refresher-pulling ion-spinner');\n    const refreshingSpinner = referenceEl.querySelector('ion-refresher-content .refresher-refreshing ion-spinner');\n    return (pullingSpinner !== null &&\n        refreshingSpinner !== null &&\n        ((mode === 'ios' && supportsRubberBandScrolling()) || mode === 'md'));\n};\n\nconst refresherIosCss = \"ion-refresher{top:0;display:none;position:absolute;width:100%;height:60px;pointer-events:none;z-index:-1}ion-refresher{inset-inline-start:0}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:200ms;transition:200ms;font-size:30px;text-align:center}:host-context([dir=rtl]) .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}[dir=rtl] .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}@supports selector(:dir(rtl)){.refresher-pulling-icon:dir(rtl),.refresher-refreshing-icon:dir(rtl){-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}ion-refresher-content .arrow-container{display:none}.refresher-pulling ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-native .refresher-pulling-text,.refresher-native .refresher-refreshing-text{display:none}.refresher-ios .refresher-pulling-icon,.refresher-ios .refresher-refreshing-icon{color:var(--ion-text-color, #000)}.refresher-ios .refresher-pulling-text,.refresher-ios .refresher-refreshing-text{color:var(--ion-text-color, #000)}.refresher-ios .refresher-refreshing .spinner-lines-ios line,.refresher-ios .refresher-refreshing .spinner-lines-small-ios line,.refresher-ios .refresher-refreshing .spinner-crescent circle{stroke:var(--ion-text-color, #000)}.refresher-ios .refresher-refreshing .spinner-bubbles circle,.refresher-ios .refresher-refreshing .spinner-circles circle,.refresher-ios .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color, #000)}ion-refresher.refresher-native{display:block;z-index:1}ion-refresher.refresher-native ion-spinner{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0}.refresher-native .refresher-refreshing ion-spinner{--refreshing-rotation-duration:2s;display:none;-webkit-animation:var(--refreshing-rotation-duration) ease-out refresher-rotate forwards;animation:var(--refreshing-rotation-duration) ease-out refresher-rotate forwards}.refresher-native .refresher-refreshing{display:none;-webkit-animation:250ms linear refresher-pop forwards;animation:250ms linear refresher-pop forwards}.refresher-native ion-spinner{width:32px;height:32px;color:var(--ion-color-step-450, var(--ion-background-color-step-450, #747577))}.refresher-native.refresher-refreshing .refresher-pulling ion-spinner,.refresher-native.refresher-completing .refresher-pulling ion-spinner{display:none}.refresher-native.refresher-refreshing .refresher-refreshing ion-spinner,.refresher-native.refresher-completing .refresher-refreshing ion-spinner{display:block}.refresher-native.refresher-pulling .refresher-pulling ion-spinner{display:block}.refresher-native.refresher-pulling .refresher-refreshing ion-spinner{display:none}.refresher-native.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0) rotate(180deg);transform:scale(0) rotate(180deg);-webkit-transition:300ms;transition:300ms}@-webkit-keyframes refresher-pop{0%{-webkit-transform:scale(1);transform:scale(1);-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in}50%{-webkit-transform:scale(1.2);transform:scale(1.2);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}100%{-webkit-transform:scale(1);transform:scale(1)}}@keyframes refresher-pop{0%{-webkit-transform:scale(1);transform:scale(1);-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in}50%{-webkit-transform:scale(1.2);transform:scale(1.2);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}100%{-webkit-transform:scale(1);transform:scale(1)}}@-webkit-keyframes refresher-rotate{from{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(180deg);transform:rotate(180deg)}}@keyframes refresher-rotate{from{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(180deg);transform:rotate(180deg)}}\";\n\nconst refresherMdCss = \"ion-refresher{top:0;display:none;position:absolute;width:100%;height:60px;pointer-events:none;z-index:-1}ion-refresher{inset-inline-start:0}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:200ms;transition:200ms;font-size:30px;text-align:center}:host-context([dir=rtl]) .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}[dir=rtl] .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}@supports selector(:dir(rtl)){.refresher-pulling-icon:dir(rtl),.refresher-refreshing-icon:dir(rtl){-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}ion-refresher-content .arrow-container{display:none}.refresher-pulling ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-native .refresher-pulling-text,.refresher-native .refresher-refreshing-text{display:none}.refresher-md .refresher-pulling-icon,.refresher-md .refresher-refreshing-icon{color:var(--ion-text-color, #000)}.refresher-md .refresher-pulling-text,.refresher-md .refresher-refreshing-text{color:var(--ion-text-color, #000)}.refresher-md .refresher-refreshing .spinner-lines-md line,.refresher-md .refresher-refreshing .spinner-lines-small-md line,.refresher-md .refresher-refreshing .spinner-crescent circle{stroke:var(--ion-text-color, #000)}.refresher-md .refresher-refreshing .spinner-bubbles circle,.refresher-md .refresher-refreshing .spinner-circles circle,.refresher-md .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color, #000)}ion-refresher.refresher-native{display:block;z-index:1}ion-refresher.refresher-native ion-spinner{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;width:24px;height:24px;color:var(--ion-color-primary, #0054e9)}ion-refresher.refresher-native .spinner-arrow-container{display:inherit}ion-refresher.refresher-native .arrow-container{display:block;position:absolute;width:24px;height:24px}ion-refresher.refresher-native .arrow-container ion-icon{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;left:0;right:0;bottom:-4px;position:absolute;color:var(--ion-color-primary, #0054e9);font-size:12px}ion-refresher.refresher-native.refresher-pulling ion-refresher-content .refresher-pulling,ion-refresher.refresher-native.refresher-ready ion-refresher-content .refresher-pulling{display:-ms-flexbox;display:flex}ion-refresher.refresher-native.refresher-refreshing ion-refresher-content .refresher-refreshing,ion-refresher.refresher-native.refresher-completing ion-refresher-content .refresher-refreshing,ion-refresher.refresher-native.refresher-cancelling ion-refresher-content .refresher-refreshing{display:-ms-flexbox;display:flex}ion-refresher.refresher-native .refresher-pulling-icon{-webkit-transform:translateY(calc(-100% - 10px));transform:translateY(calc(-100% - 10px))}ion-refresher.refresher-native .refresher-pulling-icon,ion-refresher.refresher-native .refresher-refreshing-icon{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;border-radius:100%;-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px;padding-top:8px;padding-bottom:8px;display:-ms-flexbox;display:flex;border:1px solid var(--ion-color-step-200, var(--ion-background-color-step-200, #ececec));background:var(--ion-color-step-250, var(--ion-background-color-step-250, #ffffff));-webkit-box-shadow:0px 1px 6px rgba(0, 0, 0, 0.1);box-shadow:0px 1px 6px rgba(0, 0, 0, 0.1)}\";\n\nconst Refresher = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionRefresh = createEvent(this, \"ionRefresh\", 7);\n        this.ionPull = createEvent(this, \"ionPull\", 7);\n        this.ionStart = createEvent(this, \"ionStart\", 7);\n        this.appliedStyles = false;\n        this.didStart = false;\n        this.progress = 0;\n        this.pointerDown = false;\n        this.needsCompletion = false;\n        this.didRefresh = false;\n        this.contentFullscreen = false;\n        this.lastVelocityY = 0;\n        this.animations = [];\n        this.nativeRefresher = false;\n        /**\n         * The current state which the refresher is in. The refresher's states include:\n         *\n         * - `inactive` - The refresher is not being pulled down or refreshing and is currently hidden.\n         * - `pulling` - The user is actively pulling down the refresher, but has not reached the point yet that if the user lets go, it'll refresh.\n         * - `cancelling` - The user pulled down the refresher and let go, but did not pull down far enough to kick off the `refreshing` state. After letting go, the refresher is in the `cancelling` state while it is closing, and will go back to the `inactive` state once closed.\n         * - `ready` - The user has pulled down the refresher far enough that if they let go, it'll begin the `refreshing` state.\n         * - `refreshing` - The refresher is actively waiting on the async operation to end. Once the refresh handler calls `complete()` it will begin the `completing` state.\n         * - `completing` - The `refreshing` state has finished and the refresher is in the way of closing itself. Once closed, the refresher will go back to the `inactive` state.\n         */\n        this.state = 1 /* RefresherState.Inactive */;\n        /**\n         * The minimum distance the user must pull down until the\n         * refresher will go into the `refreshing` state.\n         * Does not apply when the refresher content uses a spinner,\n         * enabling the native refresher.\n         */\n        this.pullMin = 60;\n        /**\n         * The maximum distance of the pull until the refresher\n         * will automatically go into the `refreshing` state.\n         * Defaults to the result of `pullMin + 60`.\n         * Does not apply when  the refresher content uses a spinner,\n         * enabling the native refresher.\n         */\n        this.pullMax = this.pullMin + 60;\n        /**\n         * Time it takes to close the refresher.\n         * Does not apply when the refresher content uses a spinner,\n         * enabling the native refresher.\n         */\n        this.closeDuration = '280ms';\n        /**\n         * Time it takes the refresher to snap back to the `refreshing` state.\n         * Does not apply when the refresher content uses a spinner,\n         * enabling the native refresher.\n         */\n        this.snapbackDuration = '280ms';\n        /**\n         * How much to multiply the pull speed by. To slow the pull animation down,\n         * pass a number less than `1`. To speed up the pull, pass a number greater\n         * than `1`. The default value is `1` which is equal to the speed of the cursor.\n         * If a negative value is passed in, the factor will be `1` instead.\n         *\n         * For example: If the value passed is `1.2` and the content is dragged by\n         * `10` pixels, instead of `10` pixels the content will be pulled by `12` pixels\n         * (an increase of 20 percent). If the value passed is `0.8`, the dragged amount\n         * will be `8` pixels, less than the amount the cursor has moved.\n         *\n         * Does not apply when the refresher content uses a spinner,\n         * enabling the native refresher.\n         */\n        this.pullFactor = 1;\n        /**\n         * If `true`, the refresher will be hidden.\n         */\n        this.disabled = false;\n    }\n    disabledChanged() {\n        if (this.gesture) {\n            this.gesture.enable(!this.disabled);\n        }\n    }\n    async checkNativeRefresher() {\n        const useNativeRefresher = await shouldUseNativeRefresher(this.el, getIonMode(this));\n        if (useNativeRefresher && !this.nativeRefresher) {\n            const contentEl = this.el.closest('ion-content');\n            this.setupNativeRefresher(contentEl);\n        }\n        else if (!useNativeRefresher) {\n            this.destroyNativeRefresher();\n        }\n    }\n    destroyNativeRefresher() {\n        if (this.scrollEl && this.scrollListenerCallback) {\n            this.scrollEl.removeEventListener('scroll', this.scrollListenerCallback);\n            this.scrollListenerCallback = undefined;\n        }\n        this.nativeRefresher = false;\n    }\n    async resetNativeRefresher(el, state) {\n        this.state = state;\n        if (getIonMode(this) === 'ios') {\n            await translateElement(el, undefined, 300);\n        }\n        else {\n            await transitionEndAsync(this.el.querySelector('.refresher-refreshing-icon'), 200);\n        }\n        this.didRefresh = false;\n        this.needsCompletion = false;\n        this.pointerDown = false;\n        this.animations.forEach((ani) => ani.destroy());\n        this.animations = [];\n        this.progress = 0;\n        this.state = 1 /* RefresherState.Inactive */;\n    }\n    async setupiOSNativeRefresher(pullingSpinner, refreshingSpinner) {\n        this.elementToTransform = this.scrollEl;\n        const ticks = pullingSpinner.shadowRoot.querySelectorAll('svg');\n        let MAX_PULL = this.scrollEl.clientHeight * 0.16;\n        const NUM_TICKS = ticks.length;\n        writeTask(() => ticks.forEach((el) => el.style.setProperty('animation', 'none')));\n        this.scrollListenerCallback = () => {\n            // If pointer is not on screen or refresher is not active, ignore scroll\n            if (!this.pointerDown && this.state === 1 /* RefresherState.Inactive */) {\n                return;\n            }\n            readTask(() => {\n                // PTR should only be active when overflow scrolling at the top\n                const scrollTop = this.scrollEl.scrollTop;\n                const refresherHeight = this.el.clientHeight;\n                if (scrollTop > 0) {\n                    /**\n                     * If refresher is refreshing and user tries to scroll\n                     * progressively fade refresher out/in\n                     */\n                    if (this.state === 8 /* RefresherState.Refreshing */) {\n                        const ratio = clamp(0, scrollTop / (refresherHeight * 0.5), 1);\n                        writeTask(() => setSpinnerOpacity(refreshingSpinner, 1 - ratio));\n                        return;\n                    }\n                    return;\n                }\n                if (this.pointerDown) {\n                    if (!this.didStart) {\n                        this.didStart = true;\n                        this.ionStart.emit();\n                    }\n                    // emit \"pulling\" on every move\n                    if (this.pointerDown) {\n                        this.ionPull.emit();\n                    }\n                }\n                /**\n                 * We want to delay the start of this gesture by ~30px\n                 * when initially pulling down so the refresher does not\n                 * overlap with the content. But when letting go of the\n                 * gesture before the refresher completes, we want the\n                 * refresher tick marks to quickly fade out.\n                 */\n                const offset = this.didStart ? 30 : 0;\n                const pullAmount = (this.progress = clamp(0, (Math.abs(scrollTop) - offset) / MAX_PULL, 1));\n                const shouldShowRefreshingSpinner = this.state === 8 /* RefresherState.Refreshing */ || pullAmount === 1;\n                if (shouldShowRefreshingSpinner) {\n                    if (this.pointerDown) {\n                        handleScrollWhileRefreshing(refreshingSpinner, this.lastVelocityY);\n                    }\n                    if (!this.didRefresh) {\n                        this.beginRefresh();\n                        this.didRefresh = true;\n                        hapticImpact({ style: ImpactStyle.Light });\n                        /**\n                         * Clear focus from any active element to prevent scroll jumps\n                         * when the refresh completes\n                         */\n                        const activeElement = document.activeElement;\n                        if ((activeElement === null || activeElement === void 0 ? void 0 : activeElement.blur) !== undefined) {\n                            activeElement.blur();\n                        }\n                        /**\n                         * Translate the content element otherwise when pointer is removed\n                         * from screen the scroll content will bounce back over the refresher\n                         */\n                        if (!this.pointerDown) {\n                            translateElement(this.elementToTransform, `${refresherHeight}px`);\n                        }\n                    }\n                }\n                else {\n                    this.state = 2 /* RefresherState.Pulling */;\n                    handleScrollWhilePulling(ticks, NUM_TICKS, pullAmount);\n                }\n            });\n        };\n        this.scrollEl.addEventListener('scroll', this.scrollListenerCallback);\n        this.gesture = (await import('./index-CfgBF1SE.js')).createGesture({\n            el: this.scrollEl,\n            gestureName: 'refresher',\n            gesturePriority: 31,\n            direction: 'y',\n            threshold: 5,\n            onStart: () => {\n                this.pointerDown = true;\n                if (!this.didRefresh) {\n                    translateElement(this.elementToTransform, '0px');\n                }\n                /**\n                 * If the content had `display: none` when\n                 * the refresher was initialized, its clientHeight\n                 * will be 0. When the gesture starts, the content\n                 * will be visible, so try to get the correct\n                 * client height again. This is most common when\n                 * using the refresher in an ion-menu.\n                 */\n                if (MAX_PULL === 0) {\n                    MAX_PULL = this.scrollEl.clientHeight * 0.16;\n                }\n            },\n            onMove: (ev) => {\n                this.lastVelocityY = ev.velocityY;\n            },\n            onEnd: () => {\n                this.pointerDown = false;\n                this.didStart = false;\n                if (this.needsCompletion) {\n                    this.resetNativeRefresher(this.elementToTransform, 32 /* RefresherState.Completing */);\n                    this.needsCompletion = false;\n                }\n                else if (this.didRefresh) {\n                    readTask(() => translateElement(this.elementToTransform, `${this.el.clientHeight}px`));\n                }\n            },\n        });\n        this.disabledChanged();\n    }\n    async setupMDNativeRefresher(contentEl, pullingSpinner, refreshingSpinner) {\n        const circle = getElementRoot(pullingSpinner).querySelector('circle');\n        const pullingRefresherIcon = this.el.querySelector('ion-refresher-content .refresher-pulling-icon');\n        const refreshingCircle = getElementRoot(refreshingSpinner).querySelector('circle');\n        if (circle !== null && refreshingCircle !== null) {\n            writeTask(() => {\n                circle.style.setProperty('animation', 'none');\n                // This lines up the animation on the refreshing spinner with the pulling spinner\n                refreshingSpinner.style.setProperty('animation-delay', '-655ms');\n                refreshingCircle.style.setProperty('animation-delay', '-655ms');\n            });\n        }\n        this.gesture = (await import('./index-CfgBF1SE.js')).createGesture({\n            el: this.scrollEl,\n            gestureName: 'refresher',\n            gesturePriority: 31,\n            direction: 'y',\n            threshold: 5,\n            canStart: () => this.state !== 8 /* RefresherState.Refreshing */ &&\n                this.state !== 32 /* RefresherState.Completing */ &&\n                this.scrollEl.scrollTop === 0,\n            onStart: (ev) => {\n                this.progress = 0;\n                ev.data = { animation: undefined, didStart: false, cancelled: false };\n            },\n            onMove: (ev) => {\n                if ((ev.velocityY < 0 && this.progress === 0 && !ev.data.didStart) || ev.data.cancelled) {\n                    ev.data.cancelled = true;\n                    return;\n                }\n                if (!ev.data.didStart) {\n                    ev.data.didStart = true;\n                    this.state = 2 /* RefresherState.Pulling */;\n                    // When ion-refresher is being used with a custom scroll target, the overflow styles need to be applied directly instead of via a css variable\n                    const { scrollEl } = this;\n                    const overflowProperty = scrollEl.matches(ION_CONTENT_CLASS_SELECTOR) ? 'overflow' : '--overflow';\n                    writeTask(() => scrollEl.style.setProperty(overflowProperty, 'hidden'));\n                    const animationType = getRefresherAnimationType(contentEl);\n                    const animation = createPullingAnimation(animationType, pullingRefresherIcon, this.el);\n                    ev.data.animation = animation;\n                    animation.progressStart(false, 0);\n                    this.ionStart.emit();\n                    this.animations.push(animation);\n                    return;\n                }\n                // Since we are using an easing curve, slow the gesture tracking down a bit\n                this.progress = clamp(0, (ev.deltaY / 180) * 0.5, 1);\n                ev.data.animation.progressStep(this.progress);\n                this.ionPull.emit();\n            },\n            onEnd: (ev) => {\n                if (!ev.data.didStart) {\n                    return;\n                }\n                this.gesture.enable(false);\n                const { scrollEl } = this;\n                const overflowProperty = scrollEl.matches(ION_CONTENT_CLASS_SELECTOR) ? 'overflow' : '--overflow';\n                writeTask(() => scrollEl.style.removeProperty(overflowProperty));\n                if (this.progress <= 0.4) {\n                    ev.data.animation.progressEnd(0, this.progress, 500).onFinish(() => {\n                        this.animations.forEach((ani) => ani.destroy());\n                        this.animations = [];\n                        this.gesture.enable(true);\n                        this.state = 1 /* RefresherState.Inactive */;\n                    });\n                    return;\n                }\n                const progress = getTimeGivenProgression([0, 0], [0, 0], [1, 1], [1, 1], this.progress)[0];\n                const snapBackAnimation = createSnapBackAnimation(pullingRefresherIcon);\n                this.animations.push(snapBackAnimation);\n                writeTask(async () => {\n                    pullingRefresherIcon.style.setProperty('--ion-pulling-refresher-translate', `${progress * 100}px`);\n                    ev.data.animation.progressEnd();\n                    await snapBackAnimation.play();\n                    this.beginRefresh();\n                    ev.data.animation.destroy();\n                    this.gesture.enable(true);\n                });\n            },\n        });\n        this.disabledChanged();\n    }\n    async setupNativeRefresher(contentEl) {\n        if (this.scrollListenerCallback || !contentEl || this.nativeRefresher || !this.scrollEl) {\n            return;\n        }\n        /**\n         * If using non-native refresher before make sure\n         * we clean up any old CSS. This can happen when\n         * a user manually calls the refresh method in a\n         * component create callback before the native\n         * refresher is setup.\n         */\n        this.setCss(0, '', false, '');\n        this.nativeRefresher = true;\n        const pullingSpinner = this.el.querySelector('ion-refresher-content .refresher-pulling ion-spinner');\n        const refreshingSpinner = this.el.querySelector('ion-refresher-content .refresher-refreshing ion-spinner');\n        if (getIonMode(this) === 'ios') {\n            this.setupiOSNativeRefresher(pullingSpinner, refreshingSpinner);\n        }\n        else {\n            this.setupMDNativeRefresher(contentEl, pullingSpinner, refreshingSpinner);\n        }\n    }\n    componentDidUpdate() {\n        this.checkNativeRefresher();\n    }\n    async connectedCallback() {\n        if (this.el.getAttribute('slot') !== 'fixed') {\n            printIonError('[ion-refresher] - Make sure you use: <ion-refresher slot=\"fixed\">');\n            return;\n        }\n        const contentEl = this.el.closest(ION_CONTENT_ELEMENT_SELECTOR);\n        if (!contentEl) {\n            printIonContentErrorMsg(this.el);\n            return;\n        }\n        /**\n         * Waits for the content to be ready before querying the scroll\n         * or the background content element.\n         */\n        componentOnReady(contentEl, async () => {\n            const customScrollTarget = contentEl.querySelector(ION_CONTENT_CLASS_SELECTOR);\n            /**\n             * Query the custom scroll target (if available), first. In refresher implementations,\n             * the ion-refresher element will always be a direct child of ion-content (slot=\"fixed\"). By\n             * querying the custom scroll target first and falling back to the ion-content element,\n             * the correct scroll element will be returned by the implementation.\n             */\n            this.scrollEl = await getScrollElement(customScrollTarget !== null && customScrollTarget !== void 0 ? customScrollTarget : contentEl);\n            /**\n             * Query the background content element from the host ion-content element directly.\n             */\n            this.backgroundContentEl = await contentEl.getBackgroundElement();\n            /**\n             * Check if the content element is fullscreen to apply the correct styles\n             * when the refresher is refreshing. Otherwise, the refresher will be\n             * hidden because it is positioned behind the background content element.\n             */\n            this.contentFullscreen = contentEl.fullscreen;\n            if (await shouldUseNativeRefresher(this.el, getIonMode(this))) {\n                this.setupNativeRefresher(contentEl);\n            }\n            else {\n                this.gesture = (await import('./index-CfgBF1SE.js')).createGesture({\n                    el: contentEl,\n                    gestureName: 'refresher',\n                    gesturePriority: 31,\n                    direction: 'y',\n                    threshold: 20,\n                    passive: false,\n                    canStart: () => this.canStart(),\n                    onStart: () => this.onStart(),\n                    onMove: (ev) => this.onMove(ev),\n                    onEnd: () => this.onEnd(),\n                });\n                this.disabledChanged();\n            }\n        });\n    }\n    disconnectedCallback() {\n        this.destroyNativeRefresher();\n        this.scrollEl = undefined;\n        if (this.gesture) {\n            this.gesture.destroy();\n            this.gesture = undefined;\n        }\n    }\n    /**\n     * Call `complete()` when your async operation has completed.\n     * For example, the `refreshing` state is while the app is performing\n     * an asynchronous operation, such as receiving more data from an\n     * AJAX request. Once the data has been received, you then call this\n     * method to signify that the refreshing has completed and to close\n     * the refresher. This method also changes the refresher's state from\n     * `refreshing` to `completing`.\n     */\n    async complete() {\n        if (this.nativeRefresher) {\n            this.needsCompletion = true;\n            // Do not reset scroll el until user removes pointer from screen\n            if (!this.pointerDown) {\n                raf(() => raf(() => this.resetNativeRefresher(this.elementToTransform, 32 /* RefresherState.Completing */)));\n            }\n        }\n        else {\n            this.close(32 /* RefresherState.Completing */, '120ms');\n        }\n    }\n    /**\n     * Changes the refresher's state from `refreshing` to `cancelling`.\n     */\n    async cancel() {\n        if (this.nativeRefresher) {\n            // Do not reset scroll el until user removes pointer from screen\n            if (!this.pointerDown) {\n                raf(() => raf(() => this.resetNativeRefresher(this.elementToTransform, 16 /* RefresherState.Cancelling */)));\n            }\n        }\n        else {\n            this.close(16 /* RefresherState.Cancelling */, '');\n        }\n    }\n    /**\n     * A number representing how far down the user has pulled.\n     * The number `0` represents the user hasn't pulled down at all. The\n     * number `1`, and anything greater than `1`, represents that the user\n     * has pulled far enough down that when they let go then the refresh will\n     * happen. If they let go and the number is less than `1`, then the\n     * refresh will not happen, and the content will return to it's original\n     * position.\n     */\n    getProgress() {\n        return Promise.resolve(this.progress);\n    }\n    canStart() {\n        if (!this.scrollEl) {\n            return false;\n        }\n        if (this.state !== 1 /* RefresherState.Inactive */) {\n            return false;\n        }\n        // if the scrollTop is greater than zero then it's\n        // not possible to pull the content down yet\n        if (this.scrollEl.scrollTop > 0) {\n            return false;\n        }\n        return true;\n    }\n    onStart() {\n        this.progress = 0;\n        this.state = 1 /* RefresherState.Inactive */;\n        this.memoizeOverflowStyle();\n        /**\n         * If the content is fullscreen, then we need to\n         * set the offset-top style on the background content\n         * element to ensure that the refresher is shown.\n         */\n        if (this.contentFullscreen && this.backgroundContentEl) {\n            this.backgroundContentEl.style.setProperty('--offset-top', '0px');\n        }\n    }\n    onMove(detail) {\n        if (!this.scrollEl) {\n            return;\n        }\n        // this method can get called like a bazillion times per second,\n        // so it's built to be as efficient as possible, and does its\n        // best to do any DOM read/writes only when absolutely necessary\n        // if multi-touch then get out immediately\n        const ev = detail.event;\n        if (ev.touches !== undefined && ev.touches.length > 1) {\n            return;\n        }\n        // do nothing if it's actively refreshing\n        // or it's in the way of closing\n        // or this was never a startY\n        if ((this.state & 56 /* RefresherState._BUSY_ */) !== 0) {\n            return;\n        }\n        const pullFactor = Number.isNaN(this.pullFactor) || this.pullFactor < 0 ? 1 : this.pullFactor;\n        const deltaY = detail.deltaY * pullFactor;\n        // don't bother if they're scrolling up\n        // and have not already started dragging\n        if (deltaY <= 0) {\n            // the current Y is higher than the starting Y\n            // so they scrolled up enough to be ignored\n            this.progress = 0;\n            this.state = 1 /* RefresherState.Inactive */;\n            if (this.appliedStyles) {\n                // reset the styles only if they were applied\n                this.setCss(0, '', false, '');\n                return;\n            }\n            return;\n        }\n        if (this.state === 1 /* RefresherState.Inactive */) {\n            // this refresh is not already actively pulling down\n            // get the content's scrollTop\n            const scrollHostScrollTop = this.scrollEl.scrollTop;\n            // if the scrollTop is greater than zero then it's\n            // not possible to pull the content down yet\n            if (scrollHostScrollTop > 0) {\n                this.progress = 0;\n                return;\n            }\n            // content scrolled all the way to the top, and dragging down\n            this.state = 2 /* RefresherState.Pulling */;\n        }\n        // prevent native scroll events\n        if (ev.cancelable) {\n            ev.preventDefault();\n        }\n        // the refresher is actively pulling at this point\n        // move the scroll element within the content element\n        this.setCss(deltaY, '0ms', true, '');\n        if (deltaY === 0) {\n            // don't continue if there's no delta yet\n            this.progress = 0;\n            return;\n        }\n        const pullMin = this.pullMin;\n        // set pull progress\n        this.progress = deltaY / pullMin;\n        // emit \"start\" if it hasn't started yet\n        if (!this.didStart) {\n            this.didStart = true;\n            this.ionStart.emit();\n        }\n        // emit \"pulling\" on every move\n        this.ionPull.emit();\n        // do nothing if the delta is less than the pull threshold\n        if (deltaY < pullMin) {\n            // ensure it stays in the pulling state, cuz its not ready yet\n            this.state = 2 /* RefresherState.Pulling */;\n            return;\n        }\n        if (deltaY > this.pullMax) {\n            // they pulled farther than the max, so kick off the refresh\n            this.beginRefresh();\n            return;\n        }\n        // pulled farther than the pull min!!\n        // it is now in the `ready` state!!\n        // if they let go then it'll refresh, kerpow!!\n        this.state = 4 /* RefresherState.Ready */;\n        return;\n    }\n    onEnd() {\n        // only run in a zone when absolutely necessary\n        if (this.state === 4 /* RefresherState.Ready */) {\n            // they pulled down far enough, so it's ready to refresh\n            this.beginRefresh();\n        }\n        else if (this.state === 2 /* RefresherState.Pulling */) {\n            // they were pulling down, but didn't pull down far enough\n            // set the content back to it's original location\n            // and close the refresher\n            // set that the refresh is actively cancelling\n            this.cancel();\n        }\n        else if (this.state === 1 /* RefresherState.Inactive */) {\n            /**\n             * The pull to refresh gesture was aborted\n             * so we should immediately restore any overflow styles\n             * that have been modified. Do not call this.cancel\n             * because the styles will only be reset after a timeout.\n             * If the gesture is aborted then scrolling should be\n             * available right away.\n             */\n            this.restoreOverflowStyle();\n        }\n    }\n    beginRefresh() {\n        // assumes we're already back in a zone\n        // they pulled down far enough, so it's ready to refresh\n        this.state = 8 /* RefresherState.Refreshing */;\n        // place the content in a hangout position while it thinks\n        this.setCss(this.pullMin, this.snapbackDuration, true, '');\n        /**\n         * Clear focus from any active element to prevent the browser\n         * from restoring focus and causing scroll jumps after refresh.\n         * This ensures the view stays at the top after refresh completes.\n         */\n        const activeElement = document.activeElement;\n        if ((activeElement === null || activeElement === void 0 ? void 0 : activeElement.blur) !== undefined) {\n            activeElement.blur();\n        }\n        // emit \"refresh\" because it was pulled down far enough\n        // and they let go to begin refreshing\n        this.ionRefresh.emit({\n            complete: this.complete.bind(this),\n        });\n    }\n    close(state, delay) {\n        // create fallback timer incase something goes wrong with transitionEnd event\n        setTimeout(() => {\n            var _a;\n            this.state = 1 /* RefresherState.Inactive */;\n            this.progress = 0;\n            this.didStart = false;\n            /**\n             * Reset any overflow styles so the\n             * user can scroll again.\n             */\n            this.setCss(0, '0ms', false, '', true);\n            /**\n             * Reset the offset-top style on the background content\n             * when the refresher is no longer refreshing and the\n             * content is fullscreen.\n             *\n             * This ensures that the behavior of background content\n             * does not change when refreshing is complete.\n             */\n            if (this.contentFullscreen && this.backgroundContentEl) {\n                (_a = this.backgroundContentEl) === null || _a === void 0 ? void 0 : _a.style.removeProperty('--offset-top');\n            }\n        }, 600);\n        // reset the styles on the scroll element\n        // set that the refresh is actively cancelling/completing\n        this.state = state;\n        this.setCss(0, this.closeDuration, true, delay);\n    }\n    setCss(y, duration, overflowVisible, delay, shouldRestoreOverflowStyle = false) {\n        if (this.nativeRefresher) {\n            return;\n        }\n        this.appliedStyles = y > 0;\n        writeTask(() => {\n            if (this.scrollEl && this.backgroundContentEl) {\n                const scrollStyle = this.scrollEl.style;\n                const backgroundStyle = this.backgroundContentEl.style;\n                scrollStyle.transform = backgroundStyle.transform = y > 0 ? `translateY(${y}px) translateZ(0px)` : '';\n                scrollStyle.transitionDuration = backgroundStyle.transitionDuration = duration;\n                scrollStyle.transitionDelay = backgroundStyle.transitionDelay = delay;\n                scrollStyle.overflow = overflowVisible ? 'hidden' : '';\n            }\n            /**\n             * Reset the overflow styles only once\n             * the pull to refresh effect has been closed.\n             * This ensures that the gesture is done\n             * and the refresh operation has either\n             * been aborted or has completed.\n             */\n            if (shouldRestoreOverflowStyle) {\n                this.restoreOverflowStyle();\n            }\n        });\n    }\n    memoizeOverflowStyle() {\n        if (this.scrollEl) {\n            const { overflow, overflowX, overflowY } = this.scrollEl.style;\n            this.overflowStyles = {\n                overflow: overflow !== null && overflow !== void 0 ? overflow : '',\n                overflowX: overflowX !== null && overflowX !== void 0 ? overflowX : '',\n                overflowY: overflowY !== null && overflowY !== void 0 ? overflowY : '',\n            };\n        }\n    }\n    restoreOverflowStyle() {\n        if (this.overflowStyles !== undefined && this.scrollEl !== undefined) {\n            const { overflow, overflowX, overflowY } = this.overflowStyles;\n            this.scrollEl.style.overflow = overflow;\n            this.scrollEl.style.overflowX = overflowX;\n            this.scrollEl.style.overflowY = overflowY;\n            this.overflowStyles = undefined;\n        }\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { key: '2d1bd880877b698604542ab2d602d38b9504d975', slot: \"fixed\", class: {\n                [mode]: true,\n                // Used internally for styling\n                [`refresher-${mode}`]: true,\n                'refresher-native': this.nativeRefresher,\n                'refresher-active': this.state !== 1 /* RefresherState.Inactive */,\n                'refresher-pulling': this.state === 2 /* RefresherState.Pulling */,\n                'refresher-ready': this.state === 4 /* RefresherState.Ready */,\n                'refresher-refreshing': this.state === 8 /* RefresherState.Refreshing */,\n                'refresher-cancelling': this.state === 16 /* RefresherState.Cancelling */,\n                'refresher-completing': this.state === 32 /* RefresherState.Completing */,\n            } }));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"disabled\": [\"disabledChanged\"]\n    }; }\n};\nRefresher.style = {\n    ios: refresherIosCss,\n    md: refresherMdCss\n};\n\nconst RefresherContent = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.customHTMLEnabled = config.get('innerHTMLTemplatesEnabled', ENABLE_HTML_CONTENT_DEFAULT);\n    }\n    componentWillLoad() {\n        if (this.pullingIcon === undefined) {\n            /**\n             * The native iOS refresher uses a spinner instead of\n             * an icon, so we need to see if this device supports\n             * the native iOS refresher.\n             */\n            const hasRubberBandScrolling = supportsRubberBandScrolling();\n            const mode = getIonMode(this);\n            const overflowRefresher = hasRubberBandScrolling ? 'lines' : arrowDown;\n            this.pullingIcon = config.get('refreshingIcon', mode === 'ios' && hasRubberBandScrolling ? config.get('spinner', overflowRefresher) : 'circular');\n        }\n        if (this.refreshingSpinner === undefined) {\n            const mode = getIonMode(this);\n            this.refreshingSpinner = config.get('refreshingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'circular'));\n        }\n    }\n    renderPullingText() {\n        const { customHTMLEnabled, pullingText } = this;\n        if (customHTMLEnabled) {\n            return h(\"div\", { class: \"refresher-pulling-text\", innerHTML: sanitizeDOMString(pullingText) });\n        }\n        return h(\"div\", { class: \"refresher-pulling-text\" }, pullingText);\n    }\n    renderRefreshingText() {\n        const { customHTMLEnabled, refreshingText } = this;\n        if (customHTMLEnabled) {\n            return h(\"div\", { class: \"refresher-refreshing-text\", innerHTML: sanitizeDOMString(refreshingText) });\n        }\n        return h(\"div\", { class: \"refresher-refreshing-text\" }, refreshingText);\n    }\n    render() {\n        const pullingIcon = this.pullingIcon;\n        const hasSpinner = pullingIcon != null && SPINNERS[pullingIcon] !== undefined;\n        const mode = getIonMode(this);\n        return (h(Host, { key: 'e235f8a9a84070ece2e2066ced234a64663bfa1d', class: mode }, h(\"div\", { key: '9121691818ddaa35801a5f442e144ac27686cf19', class: \"refresher-pulling\" }, this.pullingIcon && hasSpinner && (h(\"div\", { key: 'c8d65d740f1575041bd3b752c789077927397fe4', class: \"refresher-pulling-icon\" }, h(\"div\", { key: '309dd904977eaa788b09ea95b7fa4996a73bec5b', class: \"spinner-arrow-container\" }, h(\"ion-spinner\", { key: 'a2a1480f67775d56ca7822e76be1e9f983bca2f9', name: this.pullingIcon, paused: true }), mode === 'md' && this.pullingIcon === 'circular' && (h(\"div\", { key: '811d7e06d324bf4b6a18a31427a43e5177f3ae3a', class: \"arrow-container\" }, h(\"ion-icon\", { key: '86cc48e2e8dc054ff6ff1299094da35b524be63d', icon: caretBackSharp, \"aria-hidden\": \"true\" })))))), this.pullingIcon && !hasSpinner && (h(\"div\", { key: '464ae097dbc95c18a2dd7dfd03f8489153dab719', class: \"refresher-pulling-icon\" }, h(\"ion-icon\", { key: 'ed6875978b9035add562caa743a68353743d978f', icon: this.pullingIcon, lazy: false, \"aria-hidden\": \"true\" }))), this.pullingText !== undefined && this.renderPullingText()), h(\"div\", { key: 'aff891924e44354543fec484e5cde1ca92e69904', class: \"refresher-refreshing\" }, this.refreshingSpinner && (h(\"div\", { key: '842d7ac4ff10a1058775493d62f31cbdcd34f7a0', class: \"refresher-refreshing-icon\" }, h(\"ion-spinner\", { key: '8c3e6195501e7e78d5cde1e3ad1fef90fd4a953f', name: this.refreshingSpinner }))), this.refreshingText !== undefined && this.renderRefreshingText())));\n    }\n    get el() { return getElement(this); }\n};\n\nexport { Refresher as ion_refresher, RefresherContent as ion_refresher_content };\n"],"x_google_ignoreList":[0]}