{"version":3,"file":"4551.43a19f6ffc591ba9.js","mappings":"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","names":["PickerColumnInternal","constructor","hostRef","registerInstance","this","ionChange","createEvent","isScrolling","isColumnVisible","canExitInputMode","centerPickerItemInView","target","smooth","el","top","offsetTop","clientHeight","scrollTop","scroll","left","behavior","undefined","setPickerItemActiveState","item","isActive","classList","add","PICKER_ITEM_ACTIVE_CLASS","part","PICKER_ITEM_ACTIVE_PART","remove","inputModeChange","ev","numericInput","useInputMode","inputModeColumn","detail","setInputModeActive","state","scrollEndCallback","initializeScrollListener","enableHaptics","isPlatform","timeout","activeEl","activeItem","scrollCallback","raf","clearTimeout","hapticSelectionStart","bbox","getBoundingClientRect","activeElement","shadowRoot","elementFromPoint","x","width","y","height","disabled","hapticSelectionChanged","exitInputMode","setTimeout","hapticSelectionEnd","dataIndex","getAttribute","index","parseInt","selectedItem","items","value","setValue","addEventListener","destroyScrollListener","removeEventListener","parentEl","color","valueChange","scrollActiveItemIntoView","componentWillLoad","IntersectionObserver","entries","isIntersecting","oldActive","getElementRoot","querySelector","threshold","observe","closest","componentDidRender","_a","_this","_asyncToGenerator","_this2","findItem","find","emit","concat","render","mode","getIonMode","h","Host","exportparts","PICKER_ITEM_PART","tabindex","class","createColorClasses","i","map","onClick","text","getElement","watchers","style","ios","md","hostContext","selector","cssClassMap","length","Object","assign","getClassMap","classes","getClassList","Array","isArray","split","filter","c","trim","forEach","SCHEME","openURL","_ref","url","direction","animation","test","router","document","preventDefault","push","_x","_x2","_x3","_x4","apply","arguments"],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/ion-picker-column-internal.entry.js","./node_modules/@ionic/core/dist/esm/theme-17531cdf.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, d as createEvent, h, H as Host, f as getElement } from './index-847f2fde.js';\nimport { r as raf, g as getElementRoot } from './helpers-3379ba19.js';\nimport { a as hapticSelectionStart, b as hapticSelectionChanged, h as hapticSelectionEnd } from './haptic-6447af60.js';\nimport { a as isPlatform, b as getIonMode } from './ionic-global-1ef19007.js';\nimport { c as createColorClasses } from './theme-17531cdf.js';\nimport './capacitor-b4979570.js';\nimport './index-7a14ecec.js';\n\nconst pickerColumnInternalIosCss = \":host{-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px;padding-top:0px;padding-bottom:0px;height:200px;outline:none;font-size:22px;-webkit-scroll-snap-type:y mandatory;-ms-scroll-snap-type:y mandatory;scroll-snap-type:y mandatory;overflow-x:hidden;overflow-y:scroll;scrollbar-width:none;text-align:center}:host::-webkit-scrollbar{display:none}:host .picker-item{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;display:block;width:100%;height:34px;border:0px;outline:none;background:transparent;color:inherit;font-family:var(--ion-font-family, inherit);font-size:inherit;line-height:34px;text-align:inherit;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;overflow:hidden;scroll-snap-align:center}:host .picker-item-empty,:host .picker-item.picker-item-disabled{scroll-snap-align:none;cursor:default}:host .picker-item.picker-item-disabled{opacity:0.4}:host(.picker-column-active) .picker-item.picker-item-active{color:var(--ion-color-base)}@media (any-hover: hover){:host(:focus){outline:none;background:rgba(var(--ion-color-base-rgb), 0.2)}}\";\n\nconst pickerColumnInternalMdCss = \":host{-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px;padding-top:0px;padding-bottom:0px;height:200px;outline:none;font-size:22px;-webkit-scroll-snap-type:y mandatory;-ms-scroll-snap-type:y mandatory;scroll-snap-type:y mandatory;overflow-x:hidden;overflow-y:scroll;scrollbar-width:none;text-align:center}:host::-webkit-scrollbar{display:none}:host .picker-item{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;display:block;width:100%;height:34px;border:0px;outline:none;background:transparent;color:inherit;font-family:var(--ion-font-family, inherit);font-size:inherit;line-height:34px;text-align:inherit;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;overflow:hidden;scroll-snap-align:center}:host .picker-item-empty,:host .picker-item.picker-item-disabled{scroll-snap-align:none;cursor:default}:host .picker-item.picker-item-disabled{opacity:0.4}:host(.picker-column-active) .picker-item.picker-item-active{color:var(--ion-color-base)}@media (any-hover: hover){:host(:focus){outline:none;background:rgba(var(--ion-color-base-rgb), 0.2)}}:host .picker-item-active{color:var(--ion-color-base)}\";\n\nconst PickerColumnInternal = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.isScrolling = false;\n    this.isColumnVisible = false;\n    this.canExitInputMode = true;\n    this.centerPickerItemInView = (target, smooth = true, canExitInputMode = true) => {\n      const { el, isColumnVisible } = this;\n      if (isColumnVisible) {\n        // (Vertical offset from parent) - (three empty picker rows) + (half the height of the target to ensure the scroll triggers)\n        const top = target.offsetTop - 3 * target.clientHeight + target.clientHeight / 2;\n        if (el.scrollTop !== top) {\n          /**\n           * Setting this flag prevents input\n           * mode from exiting in the picker column's\n           * scroll callback. This is useful when the user manually\n           * taps an item or types on the keyboard as both\n           * of these can cause a scroll to occur.\n           */\n          this.canExitInputMode = canExitInputMode;\n          el.scroll({\n            top,\n            left: 0,\n            behavior: smooth ? 'smooth' : undefined,\n          });\n        }\n      }\n    };\n    this.setPickerItemActiveState = (item, isActive) => {\n      if (isActive) {\n        item.classList.add(PICKER_ITEM_ACTIVE_CLASS);\n        item.part.add(PICKER_ITEM_ACTIVE_PART);\n      }\n      else {\n        item.classList.remove(PICKER_ITEM_ACTIVE_CLASS);\n        item.part.remove(PICKER_ITEM_ACTIVE_PART);\n      }\n    };\n    /**\n     * When ionInputModeChange is emitted, each column\n     * needs to check if it is the one being made available\n     * for text entry.\n     */\n    this.inputModeChange = (ev) => {\n      if (!this.numericInput) {\n        return;\n      }\n      const { useInputMode, inputModeColumn } = ev.detail;\n      /**\n       * If inputModeColumn is undefined then this means\n       * all numericInput columns are being selected.\n       */\n      const isColumnActive = inputModeColumn === undefined || inputModeColumn === this.el;\n      if (!useInputMode || !isColumnActive) {\n        this.setInputModeActive(false);\n        return;\n      }\n      this.setInputModeActive(true);\n    };\n    /**\n     * Setting isActive will cause a re-render.\n     * As a result, we do not want to cause the\n     * re-render mid scroll as this will cause\n     * the picker column to jump back to\n     * whatever value was selected at the\n     * start of the scroll interaction.\n     */\n    this.setInputModeActive = (state) => {\n      if (this.isScrolling) {\n        this.scrollEndCallback = () => {\n          this.isActive = state;\n        };\n        return;\n      }\n      this.isActive = state;\n    };\n    /**\n     * When the column scrolls, the component\n     * needs to determine which item is centered\n     * in the view and will emit an ionChange with\n     * the item object.\n     */\n    this.initializeScrollListener = () => {\n      /**\n       * The haptics for the wheel picker are\n       * an iOS-only feature. As a result, they should\n       * be disabled on Android.\n       */\n      const enableHaptics = isPlatform('ios');\n      const { el } = this;\n      let timeout;\n      let activeEl = this.activeItem;\n      const scrollCallback = () => {\n        raf(() => {\n          if (timeout) {\n            clearTimeout(timeout);\n            timeout = undefined;\n          }\n          if (!this.isScrolling) {\n            enableHaptics && hapticSelectionStart();\n            this.isScrolling = true;\n          }\n          /**\n           * Select item in the center of the column\n           * which is the month/year that we want to select\n           */\n          const bbox = el.getBoundingClientRect();\n          const centerX = bbox.x + bbox.width / 2;\n          const centerY = bbox.y + bbox.height / 2;\n          const activeElement = el.shadowRoot.elementFromPoint(centerX, centerY);\n          if (activeEl !== null) {\n            this.setPickerItemActiveState(activeEl, false);\n          }\n          if (activeElement === null || activeElement.disabled) {\n            return;\n          }\n          /**\n           * If we are selecting a new value,\n           * we need to run haptics again.\n           */\n          if (activeElement !== activeEl) {\n            enableHaptics && hapticSelectionChanged();\n            if (this.canExitInputMode) {\n              /**\n               * The native iOS wheel picker\n               * only dismisses the keyboard\n               * once the selected item has changed\n               * as a result of a swipe\n               * from the user. If `canExitInputMode` is\n               * `false` then this means that the\n               * scroll is happening as a result of\n               * the `value` property programmatically changing\n               * either by an application or by the user via the keyboard.\n               */\n              this.exitInputMode();\n            }\n          }\n          activeEl = activeElement;\n          this.setPickerItemActiveState(activeElement, true);\n          timeout = setTimeout(() => {\n            this.isScrolling = false;\n            enableHaptics && hapticSelectionEnd();\n            /**\n             * Certain tasks (such as those that\n             * cause re-renders) should only be done\n             * once scrolling has finished, otherwise\n             * flickering may occur.\n             */\n            const { scrollEndCallback } = this;\n            if (scrollEndCallback) {\n              scrollEndCallback();\n              this.scrollEndCallback = undefined;\n            }\n            /**\n             * Reset this flag as the\n             * next scroll interaction could\n             * be a scroll from the user. In this\n             * case, we should exit input mode.\n             */\n            this.canExitInputMode = true;\n            const dataIndex = activeElement.getAttribute('data-index');\n            /**\n             * If no value it is\n             * possible we hit one of the\n             * empty padding columns.\n             */\n            if (dataIndex === null) {\n              return;\n            }\n            const index = parseInt(dataIndex, 10);\n            const selectedItem = this.items[index];\n            if (selectedItem.value !== this.value) {\n              this.setValue(selectedItem.value);\n            }\n          }, 250);\n        });\n      };\n      /**\n       * Wrap this in an raf so that the scroll callback\n       * does not fire when component is initially shown.\n       */\n      raf(() => {\n        el.addEventListener('scroll', scrollCallback);\n        this.destroyScrollListener = () => {\n          el.removeEventListener('scroll', scrollCallback);\n        };\n      });\n    };\n    /**\n     * Tells the parent picker to\n     * exit text entry mode. This is only called\n     * when the selected item changes during scroll, so\n     * we know that the user likely wants to scroll\n     * instead of type.\n     */\n    this.exitInputMode = () => {\n      const { parentEl } = this;\n      if (parentEl == null)\n        return;\n      parentEl.exitInputMode();\n      /**\n       * setInputModeActive only takes\n       * effect once scrolling stops to avoid\n       * a component re-render while scrolling.\n       * However, we want the visual active\n       * indicator to go away immediately, so\n       * we call classList.remove here.\n       */\n      this.el.classList.remove('picker-column-active');\n    };\n    this.isActive = false;\n    this.items = [];\n    this.value = undefined;\n    this.color = 'primary';\n    this.numericInput = false;\n  }\n  valueChange() {\n    if (this.isColumnVisible) {\n      /**\n       * Only scroll the active item into view when the picker column\n       * is actively visible to the user.\n       */\n      this.scrollActiveItemIntoView();\n    }\n  }\n  /**\n   * Only setup scroll listeners\n   * when the picker is visible, otherwise\n   * the container will have a scroll\n   * height of 0px.\n   */\n  componentWillLoad() {\n    const visibleCallback = (entries) => {\n      const ev = entries[0];\n      if (ev.isIntersecting) {\n        const { activeItem, el } = this;\n        this.isColumnVisible = true;\n        /**\n         * Because this initial call to scrollActiveItemIntoView has to fire before\n         * the scroll listener is set up, we need to manage the active class manually.\n         */\n        const oldActive = getElementRoot(el).querySelector(`.${PICKER_ITEM_ACTIVE_CLASS}`);\n        if (oldActive) {\n          this.setPickerItemActiveState(oldActive, false);\n        }\n        this.scrollActiveItemIntoView();\n        if (activeItem) {\n          this.setPickerItemActiveState(activeItem, true);\n        }\n        this.initializeScrollListener();\n      }\n      else {\n        this.isColumnVisible = false;\n        if (this.destroyScrollListener) {\n          this.destroyScrollListener();\n          this.destroyScrollListener = undefined;\n        }\n      }\n    };\n    new IntersectionObserver(visibleCallback, { threshold: 0.001 }).observe(this.el);\n    const parentEl = (this.parentEl = this.el.closest('ion-picker-internal'));\n    if (parentEl !== null) {\n      // TODO(FW-2832): type\n      parentEl.addEventListener('ionInputModeChange', (ev) => this.inputModeChange(ev));\n    }\n  }\n  componentDidRender() {\n    var _a;\n    const { activeItem, items, isColumnVisible, value } = this;\n    if (isColumnVisible) {\n      if (activeItem) {\n        this.scrollActiveItemIntoView();\n      }\n      else if (((_a = items[0]) === null || _a === void 0 ? void 0 : _a.value) !== value) {\n        /**\n         * If the picker column does not have an active item and the current value\n         * does not match the first item in the picker column, that means\n         * the value is out of bounds. In this case, we assign the value to the\n         * first item to match the scroll position of the column.\n         *\n         */\n        this.setValue(items[0].value);\n      }\n    }\n  }\n  /** @internal  */\n  async scrollActiveItemIntoView() {\n    const activeEl = this.activeItem;\n    if (activeEl) {\n      this.centerPickerItemInView(activeEl, false, false);\n    }\n  }\n  /**\n   * Sets the value prop and fires the ionChange event.\n   * This is used when we need to fire ionChange from\n   * user-generated events that cannot be caught with normal\n   * input/change event listeners.\n   * @internal\n   */\n  async setValue(value) {\n    const { items } = this;\n    this.value = value;\n    const findItem = items.find((item) => item.value === value && item.disabled !== true);\n    if (findItem) {\n      this.ionChange.emit(findItem);\n    }\n  }\n  get activeItem() {\n    return getElementRoot(this.el).querySelector(`.picker-item[data-value=\"${this.value}\"]:not([disabled])`);\n  }\n  render() {\n    const { items, color, isActive, numericInput } = this;\n    const mode = getIonMode(this);\n    /**\n     * exportparts is needed so ion-datetime can expose the parts\n     * from two layers of shadow nesting. If this causes problems,\n     * the attribute can be moved to datetime.tsx and set on every\n     * instance of ion-picker-column-internal there instead.\n     */\n    return (h(Host, { exportparts: `${PICKER_ITEM_PART}, ${PICKER_ITEM_ACTIVE_PART}`, tabindex: 0, class: createColorClasses(color, {\n        [mode]: true,\n        ['picker-column-active']: isActive,\n        ['picker-column-numeric-input']: numericInput,\n      }) }, h(\"div\", { class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), items.map((item, index) => {\n      return (h(\"button\", { tabindex: \"-1\", class: {\n          'picker-item': true,\n          'picker-item-disabled': item.disabled || false,\n        }, \"data-value\": item.value, \"data-index\": index, onClick: (ev) => {\n          this.centerPickerItemInView(ev.target, true);\n        }, disabled: item.disabled, part: PICKER_ITEM_PART }, item.text));\n    }), h(\"div\", { class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\")));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"value\": [\"valueChange\"]\n  }; }\n};\nconst PICKER_ITEM_ACTIVE_CLASS = 'picker-item-active';\nconst PICKER_ITEM_PART = 'wheel-item';\nconst PICKER_ITEM_ACTIVE_PART = 'active';\nPickerColumnInternal.style = {\n  ios: pickerColumnInternalIosCss,\n  md: pickerColumnInternalMdCss\n};\n\nexport { PickerColumnInternal as ion_picker_column_internal };\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nconst hostContext = (selector, el) => {\n  return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color, cssClassMap) => {\n  return typeof color === 'string' && color.length > 0\n    ? Object.assign({ 'ion-color': true, [`ion-color-${color}`]: true }, cssClassMap) : cssClassMap;\n};\nconst getClassList = (classes) => {\n  if (classes !== undefined) {\n    const array = Array.isArray(classes) ? classes : classes.split(' ');\n    return array\n      .filter((c) => c != null)\n      .map((c) => c.trim())\n      .filter((c) => c !== '');\n  }\n  return [];\n};\nconst getClassMap = (classes) => {\n  const map = {};\n  getClassList(classes).forEach((c) => (map[c] = true));\n  return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction, animation) => {\n  if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n    const router = document.querySelector('ion-router');\n    if (router) {\n      if (ev != null) {\n        ev.preventDefault();\n      }\n      return router.push(url, direction, animation);\n    }\n  }\n  return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n"],"x_google_ignoreList":[0,1]}