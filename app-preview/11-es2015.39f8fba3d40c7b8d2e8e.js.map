{"version":3,"sources":["webpack:///src/app/tabs/tabs-routing.module.ts","webpack:///src/app/tabs/tabs.page.ts","webpack:///src/app/tabs/tabs.page.html","webpack:///src/app/tabs/tabs.module.ts","webpack:///src/app/service/canvas-display.service.ts"],"names":["routes","path","component","TabsPage","router","canvasDisplayService","updateUseSmallUI","isMD","document","querySelector","headerHeight","this","useSmallUI","canvasArea","window","innerHeight","innerWidth","addEventListener","url","availableHeight","availableWidth","scaledWidth","scaledHeight","Math","min","height","devicePixelRatio","width","children","loadChildren","then","m","EmulationPageModule","SessionsPageModule","SettingsPageModule","AboutPageModule","redirectTo","pathMatch","TabsPageRoutingModule","forChild","TabsPageModule","BACKGROUND_COLOR_SILKSCREEN","BACKGROUND_COLOR_GRAYSCALE_DEVICE","loadImage","Promise","resolve","reject","image","Image","onload","onerror","src","prerenderedButtonFactor","sizes","Map","screenSize","has","set","canvas","createElement","ctx","getContext","Error","drawImage","get","IMAGE_SILKSCREEN_V","IMAGE_SILKSCREEN_M515","IMAGE_SILKSCREEN_IIIC","IMAGE_SILKSCREEN_M130","IMAGE_BUTTONS_V","IMAGE_BUTTONS_M515","IMAGE_BUTTONS_IIIC","IMAGE_BUTTONS_M130","DEFAULT_DIMENSIONS","m515","forEach","prerender","CanvasDisplayService","dimensions","scale","border","silkscreenHeight","separator","buttonsHeight","session","device","fillCanvasRect","backgroundColor","drawSilkscreen","drawButtons","silkscreenImage","fillRect","imageSmoothingEnabled","imageSmoothingQuality","snapshotStatistics","emulationStatistics","beginPath","fontFactor","font","fillStyle","Date","timestamp","toLocaleTimeString","pages","timeTotal","toFixed","timeBlocking","hostSpeed","emulationSpeed","averageFPS","line","i","fillText","activeButtons","ystart","buttonWidth","buttonsImage","includes","e","clip","bb","getBoundingClientRect","contentX","contentY","contentWidth","contentHeight","top","left","x","floor","clientX","y","clientY","totalHeight","style","rect","fill","iiic","i710","m130","palmV"],"mappings":"4NAKA,MAAMA,EAAiB,CACnB,CACIC,KAAM,MACNC,UCCF,M,MAAOC,EACT,YAAoBC,EAAwBC,GAAxB,KAAAD,SAAwB,KAAAC,uBAUpC,KAAAC,iBAAmB,KACvB,MAAMC,IAASC,SAASC,cAAc,WAChCC,EAAeH,EAAO,GAAK,GAIjCI,KAAKC,WACDD,KAAKE,WAAWC,OAAOC,YAAcL,GAJpBH,EAAO,GAAK,IACX,EAGgEO,OAAOE,WAAa,GACtGL,KAAKE,WAAWC,OAAOC,YAAcL,EAAe,GAJlC,EAIsDI,OAAOE,WAAa,IAqB5F,KAAAJ,YAAa,EAtCjBE,OAAOG,iBAAiB,SAAUN,KAAKL,kBAEvCK,KAAKL,mBAGT,cACI,MAA2B,mBAApBK,KAAKP,OAAOc,KAA4BP,KAAKC,WAchD,WAAWO,EAAyBC,GAIxC,IAAIC,EACAC,EAUJ,OAdAH,EAAkBI,KAAKC,IAAIL,EAAiBR,KAAKN,qBAAqBoB,OAASC,mBAC/EN,EAAiBG,KAAKC,IAAIJ,EAAgBT,KAAKN,qBAAqBsB,MAAQD,mBAKvDP,EAAkBR,KAAKN,qBAAqBsB,MAAQhB,KAAKN,qBAAqBoB,QAC/FH,EAAeH,EACfE,EAAeF,EAAkBR,KAAKN,qBAAqBoB,OAAUd,KAAKN,qBAAqBsB,QAE/FN,EAAcD,EACdE,EAAgBF,EAAiBT,KAAKN,qBAAqBsB,MAAShB,KAAKN,qBAAqBoB,QAG3FJ,EAAcC,G,6CArChBnB,GAAQ,sB,uBAARA,EAAQ,6SCTrB,mBAEE,gBACE,wBACE,2BACE,qBACA,oBAAW,mBAAQ,OACrB,OAEA,2BACE,qBACA,oBAAW,oBAAQ,OACrB,OAEA,4BACE,sBACA,qBAAW,oBAAQ,OACrB,OAEA,4BACE,sBACA,qBAAW,iBAAK,OAClB,OACF,OACF,OAEF,Q,MAvBiB,qC,wcDMX,GDAEyB,SAAU,CACN,CACI3B,KAAM,YACN4B,aAAc,IAAM,wDAA6CC,KAAMC,GAAMA,EAAEC,sBAEnF,CACI/B,KAAM,WACN4B,aAAc,IAAM,wDAA2CC,KAAMC,GAAMA,EAAEE,qBAEjF,CACIhC,KAAM,WACN4B,aAAc,IAAM,wDAA2CC,KAAMC,GAAMA,EAAEG,qBAEjF,CACIjC,KAAM,QACN4B,aAAc,IAAM,wDAAqCC,KAAMC,GAAMA,EAAEI,kBAE3E,CACIlC,KAAM,GACNmC,WAAY,gBACZC,UAAW,UAIvB,CACIpC,KAAM,GACNmC,WAAY,gBACZC,UAAW,SAQZ,IAAD,Q,MAAOC,G,6CAAAA,I,uBAAAA,I,2BAHA,CAAC,IAAaC,SAASvC,IACtB,O,GAER,GGjCA,Q,MAAOwC,G,6CAAAA,I,uBAAAA,I,2BAHA,CAAC,IAAa,IAAc,IAAa,M,GAGhD,I,kICAN,MAAMC,EAA8B,IAAsB,GACpDC,EAAoC,IAAsB,GAIhE,SAASC,EAAUzB,GACf,OAAO,IAAI0B,QAA0B,CAACC,EAASC,KAC3C,MAAMC,EAAQ,IAAIC,MAElBD,EAAME,OAAS,IAAMJ,EAAQE,GAC7BA,EAAMG,QAAU,IAAMJ,IAEtBC,EAAMI,IAAMjC,IAiBpB,SAASkC,EAAwBlC,GAC7B,MAAMmC,EAAQ,IAAIC,IAElB,OAAQC,IACCF,EAAMG,IAAID,IAAaF,EAAMI,IAAIF,EAjB9C,SAAiCrC,EAAaqC,G,kDAC1C,MAAMG,EAASlD,SAASmD,cAAc,UACtCD,EAAO/B,OAAwB,IAAf4B,EAA0C,IAAM,KAAO7B,iBACvEgC,EAAOjC,QAAyB,IAAf8B,EAA0C,IAAM,IAAM7B,iBAEvE,MAAMkC,EAAMF,EAAOG,WAAW,MAC9B,IAAKD,EAAK,MAAM,IAAIE,MAAM,qBAI1B,OAFAF,EAAIG,gBAAgBpB,EAAUzB,GAAM,EAAG,EAAGwC,EAAO/B,MAAO+B,EAAOjC,QAExDiC,IAVX,CAiB4ExC,EAAKqC,IAElEF,EAAMW,IAAIT,IAIzB,MAAMU,EAAqBtB,EAAU,gCAC/BuB,EAAwBvB,EAAU,mCAClCwB,EAAwBxB,EAAU,mCAClCyB,EAAwBzB,EAAU,mCAElC0B,EAAkBjB,EAAwB,kCAC1CkB,EAAqBlB,EAAwB,qCAC7CmB,EAAqBnB,EAAwB,qCAC7CoB,EAAqBpB,EAAwB,qCAE7CqB,EAAqB,YAAiB,IAASC,MAErD,CAACH,EAAoBF,EAAiBG,EAAoBF,GAAoBK,QAASC,IACnFA,EAAU,GACVA,EAAU,KAMP,IAAD,Q,MAAOC,EACT,cAmVQ,KAAAC,WAAaL,EAjVrB,YACI,OAAuC,IAA/B9D,KAAKmE,WAAWvB,WAA0C,EAAI,GAAK7B,iBAG/E,aACI,OAAO,EAAIf,KAAKoE,MAGpB,YACI,OAAOpE,KAAKoE,MAAQpE,KAAKmE,WAAWnD,MAAQ,EAAIhB,KAAKqE,OAGzD,gBACI,OAAsC,IAA/BrE,KAAKmE,WAAWvB,WAA0C,EAAI,EAGzE,oBACI,OAAsC,IAA/B5C,KAAKmE,WAAWvB,WAA0C,GAAK,GAG1E,aACI,OACI5C,KAAKoE,OACApE,KAAKmE,WAAWrD,OAASd,KAAKmE,WAAWG,iBAAmBtE,KAAKuE,UAAYvE,KAAKwE,eACvF,EAAIxE,KAAKqE,OAIX,WAAWtB,EAA2B0B,G,kDACxCzE,KAAKmE,WAAaM,EAAU,YAAiBA,EAAQC,QAAUZ,EAE/Df,EAAO/B,MAAQhB,KAAKgB,MACpB+B,EAAOjC,OAASd,KAAKc,OAErB,MAAMmC,EAAMF,EAAOG,WAAW,MAC9B,IAAKD,EACD,MAAM,IAAIE,MAAM,4CAGpBnD,KAAKiD,IAAMA,EAEXjD,KAAKyE,QAAUA,EACfzE,KAAK2E,eAAe,EAAG,EAAG3E,KAAKgB,MAAOhB,KAAKc,OAAQd,KAAK4E,yBAElD5E,KAAK6E,uBACL7E,KAAK8E,gBAGT,iB,kDACF,IAAK9E,KAAKiD,IAAK,OAEf,MAAMb,QAAcpC,KAAK+E,kBAEzB/E,KAAKgF,SACD,EACAhF,KAAKmE,WAAWrD,OAASd,KAAKuE,UAC9BvE,KAAKmE,WAAWnD,MAChBhB,KAAKmE,WAAWG,iBAChBxC,GAGJ9B,KAAKiD,IAAIgC,uBAAwB,EACjCjF,KAAKiD,IAAIiC,sBAAwB,OAEjClF,KAAKiD,IAAIG,UACLhB,EACApC,KAAKqE,OACLrE,KAAKqE,QAAUrE,KAAKmE,WAAWrD,OAASd,KAAKuE,WAAavE,KAAKoE,MAC/DpE,KAAKmE,WAAWnD,MAAQhB,KAAKoE,MAC7BpE,KAAKmE,WAAWG,iBAAmBtE,KAAKoE,SAI1C,eACFe,EACAC,G,kDAEA,IAAKpF,KAAKiD,IAAK,aAETjD,KAAK6E,iBAEX7E,KAAKiD,IAAIoC,YACTrF,KAAKgF,SACD,EACAhF,KAAKmE,WAAWrD,OAASd,KAAKuE,UAC9BvE,KAAKmE,WAAWnD,MAChBhB,KAAKmE,WAAWG,iBAChB,yBAGJ,MAAMgB,EAA4C,IAA/BtF,KAAKmE,WAAWvB,WAA0C,EAAI,EAEjF5C,KAAKiD,IAAIsC,KAAuB,EAAbvF,KAAKoE,MAAYkB,EAApB,eAChBtF,KAAKiD,IAAIuC,UAAY,QACrB,IACSL,GAAuBC,EAAqD,GAA/B,CAAC,+BAC/CD,EACE,CACI,4BAA4B,IAAIM,KAAKN,EAAmBO,WAAWC,uBACnE,4BAA4BR,EAAmBS,QAC/C,4BAA4BT,EAAmBU,UAAUC,QAAQ,UACjE,4BAA4BX,EAAmBY,aAAaD,QAAQ,WAExE,MACFV,EACE,CACI,4BAA4BA,EAAoBY,UAAUF,QAAQ,MAClE,4BAA4BV,EAAoBa,eAAeH,QAAQ,MACvE,4BAA4BV,EAAoBc,WAAWJ,QAAQ,MAEvE,IACR9B,QAAQ,CAACmC,EAAMC,IACbpG,KAAKiD,IAAKoD,SACNF,EACAnG,KAAKqE,OAASiB,EAAatF,KAAKoE,MAChCpE,KAAKqE,QAAUrE,KAAKmE,WAAWrD,OAASwE,GAAc,EAAQ,EAAJc,IAAUpG,KAAKoE,UAK/E,YAAYkC,EAAmC,I,kDACjD,IAAKtG,KAAKiD,IAAK,OAEf,MAAMsD,EAASvG,KAAKmE,WAAWrD,OAASd,KAAKmE,WAAWG,iBAAmBtE,KAAKuE,UAC1EiC,EAA6C,IAA/BxG,KAAKmE,WAAWvB,WAA0C,GAAK,GAEnF5C,KAAKiD,IAAIG,gBACCpD,KAAKyG,eACXzG,KAAKqE,OACLrE,KAAKqE,OAASrE,KAAKoE,MAAQmC,EAC3BvG,KAAKmE,WAAWnD,MAAQhB,KAAKoE,MAC7BpE,KAAKwE,cAAgBxE,KAAKoE,OAG1BkC,EAAcI,SAAS,IACvB1G,KAAKgF,SAAS,EAAGuB,EAAQC,EAAaxG,KAAKwE,cAlMtB,mBAoMrB8B,EAAcI,SAAS,IACvB1G,KAAKgF,SAASwB,EAAaD,EAAQC,EAAaxG,KAAKwE,cArMhC,mBAuMrB8B,EAAcI,SAAS,IACvB1G,KAAKgF,SACDhF,KAAKmE,WAAWnD,MAAQ,EAAIwF,EAC5BD,EACAC,EACAxG,KAAKwE,cA5MY,mBAgNrB8B,EAAcI,SAAS,IACvB1G,KAAKgF,SACDhF,KAAKmE,WAAWnD,MAAQwF,EACxBD,EACAC,EACAxG,KAAKwE,cArNY,mBAyNrB8B,EAAcI,SAAS,IACvB1G,KAAKgF,SACD,EAAIwB,EACJD,EACAvG,KAAKmE,WAAWnD,MAAQ,EAAIwF,EAC5BxG,KAAKwE,cAAgB,EA9NJ,mBAkOrB8B,EAAcI,SAAS,IACvB1G,KAAKgF,SACD,EAAIwB,EACJD,EAASvG,KAAKwE,cAAgB,EAC9BxE,KAAKmE,WAAWnD,MAAQ,EAAIwF,EAC5BxG,KAAKwE,cAAgB,EAvOJ,qBA6O7B,oBAAoBzB,GACX/C,KAAKiD,MAEVjD,KAAKiD,IAAIgC,uBAAwB,EACjCjF,KAAKiD,IAAIG,UACLL,EACA/C,KAAKqE,OACLrE,KAAKqE,OACLrE,KAAKoE,MAAQpE,KAAKmE,WAAWnD,MAC7BhB,KAAKoE,MAAQpE,KAAKmE,WAAWrD,SAIrC,uBAAuB6F,EAAuBC,GAAO,GACjD,IAAK5G,KAAKiD,IAAK,OAEf,MAAM4D,EAAK7G,KAAKiD,IAAIF,OAAO+D,wBAE3B,IAAIC,EACAC,EACAC,EACAC,EAIAL,EAAG7F,MAAQ6F,EAAG/F,OAASd,KAAKgB,MAAQhB,KAAKc,QACzCoG,EAAgBL,EAAG/F,OACnBmG,EAAgBjH,KAAKgB,MAAQhB,KAAKc,OAAU+F,EAAG/F,OAC/CkG,EAAWH,EAAGM,IACdJ,EAAWF,EAAGO,MAAQP,EAAG7F,MAAQiG,GAAgB,IAEjDA,EAAeJ,EAAG7F,MAClBkG,EAAiBlH,KAAKc,OAASd,KAAKgB,MAAS6F,EAAG7F,MAChD+F,EAAWF,EAAGO,KACdJ,EAAWH,EAAGM,KAAON,EAAG/F,OAASoG,GAAiB,GAItD,IAAIG,EACAzG,KAAK0G,OAASX,EAAEY,QAAUR,GAAYE,EAAgBjH,KAAKgB,MAAShB,KAAKoE,OAASpE,KAAKqE,OAASrE,KAAKoE,MACrGoD,EACA5G,KAAK0G,OAASX,EAAEc,QAAUT,GAAYE,EAAiBlH,KAAKc,OAAUd,KAAKoE,OAC3EpE,KAAKqE,OAASrE,KAAKoE,MAWnBoD,GAAKxH,KAAKmE,WAAWrD,OAASd,KAAKuE,YAAWiD,GAAK,GAEvD,MAAME,EAAc1H,KAAKmE,WAAWrD,OAASd,KAAKmE,WAAWG,iBAAmBtE,KAAKwE,cAErF,GAAIoC,EACIS,EAAI,IAAGA,EAAI,GACXA,GAAKrH,KAAKmE,WAAWnD,QAAOqG,EAAIrH,KAAKmE,WAAWnD,MAAQ,GACxDwG,EAAI,IAAGA,EAAI,GACXA,GAAKE,IACLF,EAAIxH,KAAKmE,WAAWrD,OAASd,KAAKmE,WAAWG,iBAAmB,QAGpE,GAAI+C,EAAI,GAAKA,GAAKrH,KAAKmE,WAAWnD,OAASwG,EAAI,GAAKA,GAAKE,EACrD,OAIR,MAAO,CAACL,EAAGG,GAGf,WAAW,CAAEA,IACT,OAAOA,GAAKxH,KAAKmE,WAAWrD,OAASd,KAAKmE,WAAWG,iBAGzD,iBAAiB+C,EAAGG,IAChB,MAAMhB,EAA6C,IAA/BxG,KAAKmE,WAAWvB,WAA0C,GAAK,GAEnF,OAAIyE,GAAKrH,KAAKmE,WAAWnD,MAAQwF,EAAoB,EACjDa,GAAKrH,KAAKmE,WAAWnD,MAAQ,EAAIwF,EAAoB,EACrDa,GAAK,EAAIb,EACFgB,GACHxH,KAAKmE,WAAWrD,OAASd,KAAKmE,WAAWG,iBAAmBtE,KAAKuE,UAAYvE,KAAKwE,cAAgB,EAChG,EACA,EAEN6C,GAAKb,EAAoB,EAEtB,EAGH,SAASa,EAAWG,EAAWxG,EAAeF,EAAgB6G,GAC7D3H,KAAKiD,MAEVjD,KAAKiD,IAAIoC,YACTrF,KAAKiD,IAAI2E,KACL5H,KAAKqE,OAASrE,KAAKoE,MAAQiD,EAC3BrH,KAAKqE,OAASrE,KAAKoE,MAAQoD,EAC3BxH,KAAKoE,MAAQpD,EACbhB,KAAKoE,MAAQtD,GAEjBd,KAAKiD,IAAIuC,UAAYmC,EACrB3H,KAAKiD,IAAI4E,QAGL,eAAeR,EAAWG,EAAWxG,EAAeF,EAAgB6G,GACnE3H,KAAKiD,MAEVjD,KAAKiD,IAAIoC,YACTrF,KAAKiD,IAAI2E,KAAKP,EAAGG,EAAGxG,EAAOF,GAC3Bd,KAAKiD,IAAIuC,UAAYmC,EACrB3H,KAAKiD,IAAI4E,QAGL,kB,MACJ,OAAoB,QAApB,EAAQ7H,KAAKyE,eAAO,eAAEC,QAClB,KAAK,IAASX,KACV,OAAOR,EAEX,KAAK,IAASuE,KACV,OAAOtE,EAEX,KAAK,IAASuE,KACd,KAAK,IAASC,KACV,OAAOvE,EAEX,KAAK,IAASwE,MACd,QACI,OAAO3E,GAIX,e,MACJ,OAAoB,QAApB,EAAQtD,KAAKyE,eAAO,eAAEC,QAClB,KAAK,IAASX,KACd,KAAK,IAASgE,KACV,OAAOpE,EAAmB3D,KAAKmE,WAAWvB,YAE9C,KAAK,IAASkF,KACV,OAAOlE,EAAmB5D,KAAKmE,WAAWvB,YAE9C,KAAK,IAASoF,KACV,OAAOnE,EAAmB7D,KAAKmE,WAAWvB,YAE9C,KAAK,IAASqF,MACd,QACI,OAAOvE,EAAgB1D,KAAKmE,WAAWvB,aAI3C,kB,MACJ,OAAO,YAAoB,QAAb,EAAC5C,KAAKyE,eAAO,eAAEC,QAvYC,QAuYyC3C,G,6CA9UlEmC,I,yBAAAA,EAAoB,QAApBA,EAAoB,qBAFjB,S,GAEV","file":"x","sourcesContent":["import { RouterModule, Routes } from '@angular/router';\n\nimport { NgModule } from '@angular/core';\nimport { TabsPage } from './tabs.page';\n\nconst routes: Routes = [\n    {\n        path: 'tab',\n        component: TabsPage,\n        children: [\n            {\n                path: 'emulation',\n                loadChildren: () => import('../page/emulation/emulation.module').then((m) => m.EmulationPageModule),\n            },\n            {\n                path: 'sessions',\n                loadChildren: () => import('../page/sessions/sessions.module').then((m) => m.SessionsPageModule),\n            },\n            {\n                path: 'settings',\n                loadChildren: () => import('../page/settings/settings.module').then((m) => m.SettingsPageModule),\n            },\n            {\n                path: 'about',\n                loadChildren: () => import('../page/about/about.module').then((m) => m.AboutPageModule),\n            },\n            {\n                path: '',\n                redirectTo: '/tab/sessions',\n                pathMatch: 'full',\n            },\n        ],\n    },\n    {\n        path: '',\n        redirectTo: '/tab/sessions',\n        pathMatch: 'full',\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class TabsPageRoutingModule {}\n","import { CanvasDisplayService } from './../service/canvas-display.service';\nimport { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n    selector: 'app-tabs',\n    templateUrl: 'tabs.page.html',\n    styleUrls: ['tabs.page.scss'],\n})\nexport class TabsPage {\n    constructor(private router: Router, private canvasDisplayService: CanvasDisplayService) {\n        window.addEventListener('resize', this.updateUseSmallUI);\n\n        this.updateUseSmallUI();\n    }\n\n    get smallUI(): boolean {\n        return this.router.url === '/tab/emulation' && this.useSmallUI;\n    }\n\n    private updateUseSmallUI = (): void => {\n        const isMD = !!document.querySelector('html.md');\n        const headerHeight = isMD ? 56 : 44;\n        const tabbarHeight = isMD ? 57 : 51;\n        const canvasPadding = 6;\n\n        this.useSmallUI =\n            this.canvasArea(window.innerHeight - headerHeight - tabbarHeight - canvasPadding, window.innerWidth - 6) <\n            this.canvasArea(window.innerHeight - headerHeight - 25 - canvasPadding, window.innerWidth - 6);\n    };\n\n    private canvasArea(availableHeight: number, availableWidth: number): number {\n        availableHeight = Math.min(availableHeight, this.canvasDisplayService.height / devicePixelRatio);\n        availableWidth = Math.min(availableWidth, this.canvasDisplayService.width / devicePixelRatio);\n\n        let scaledWidth: number;\n        let scaledHeight: number;\n\n        if (availableWidth / availableHeight > this.canvasDisplayService.width / this.canvasDisplayService.height) {\n            scaledHeight = availableHeight;\n            scaledWidth = (availableHeight / this.canvasDisplayService.height) * this.canvasDisplayService.width;\n        } else {\n            scaledWidth = availableWidth;\n            scaledHeight = (availableWidth / this.canvasDisplayService.width) * this.canvasDisplayService.height;\n        }\n\n        return scaledWidth * scaledHeight;\n    }\n\n    private useSmallUI = false;\n}\n","<ion-tabs>\n\n  <div class=\"overflow-wrapper\">\n    <ion-tab-bar [class.small-ui]=\"smallUI\" slot=\"bottom\">\n      <ion-tab-button tab=\"emulation\">\n        <ion-icon name=\"phone-portrait-outline\"></ion-icon>\n        <ion-label>Emulator</ion-label>\n      </ion-tab-button>\n\n      <ion-tab-button tab=\"sessions\">\n        <ion-icon name=\"albums-outline\"></ion-icon>\n        <ion-label>Sessions</ion-label>\n      </ion-tab-button>\n\n      <ion-tab-button tab=\"settings\">\n        <ion-icon name=\"cog-outline\"></ion-icon>\n        <ion-label>Settings</ion-label>\n      </ion-tab-button>\n\n      <ion-tab-button tab=\"about\">\n        <ion-icon name=\"help-outline\"></ion-icon>\n        <ion-label>About</ion-label>\n      </ion-tab-button>\n    </ion-tab-bar>\n  </div>\n\n</ion-tabs>\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { NgModule } from '@angular/core';\nimport { TabsPage } from './tabs.page';\nimport { TabsPageRoutingModule } from './tabs-routing.module';\n\n@NgModule({\n    imports: [IonicModule, CommonModule, FormsModule, TabsPageRoutingModule],\n    declarations: [TabsPage],\n})\nexport class TabsPageModule {}\n","import { DeviceId, isColor } from '../model/DeviceId';\n\nimport { EmulationStatistics } from './../model/EmulationStatistics';\nimport { GRAYSCALE_PALETTE_HEX } from './emulation.service';\nimport { Injectable } from '@angular/core';\nimport { PalmButton } from '../helper/Cloudpilot';\nimport { ScreenSize } from '../model/Dimensions';\nimport { Session } from '../model/Session';\nimport { SnapshotStatistics } from './../model/SnapshotStatistics';\nimport { deviceDimensions } from '../helper/deviceProperties';\n\nconst BACKGROUND_COLOR_SILKSCREEN = GRAYSCALE_PALETTE_HEX[2];\nconst BACKGROUND_COLOR_GRAYSCALE_DEVICE = GRAYSCALE_PALETTE_HEX[0];\nconst BACKGROUND_COLOR_COLOR_DEVICE = 'white';\nconst BACKGROUND_ACTIVE_BUTTON = 'rgba(0,0,0,0.2)';\n\nfunction loadImage(url: string): Promise<HTMLImageElement> {\n    return new Promise<HTMLImageElement>((resolve, reject) => {\n        const image = new Image();\n\n        image.onload = () => resolve(image);\n        image.onerror = () => reject();\n\n        image.src = url;\n    });\n}\n\nasync function prerenderedButton(url: string, screenSize: ScreenSize): Promise<HTMLCanvasElement> {\n    const canvas = document.createElement('canvas');\n    canvas.width = (screenSize === ScreenSize.screen320x320 ? 640 : 480) * devicePixelRatio;\n    canvas.height = (screenSize === ScreenSize.screen320x320 ? 120 : 90) * devicePixelRatio;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) throw new Error('get a new browser');\n\n    ctx.drawImage(await loadImage(url), 0, 0, canvas.width, canvas.height);\n\n    return canvas;\n}\n\nfunction prerenderedButtonFactor(url: string) {\n    const sizes = new Map<ScreenSize, Promise<HTMLCanvasElement>>();\n\n    return (screenSize: ScreenSize): Promise<HTMLCanvasElement> => {\n        if (!sizes.has(screenSize)) sizes.set(screenSize, prerenderedButton(url, screenSize));\n\n        return sizes.get(screenSize)!;\n    };\n}\n\nconst IMAGE_SILKSCREEN_V = loadImage('assets/skin/silkscreen/v.svg');\nconst IMAGE_SILKSCREEN_M515 = loadImage('assets/skin/silkscreen/m515.svg');\nconst IMAGE_SILKSCREEN_IIIC = loadImage('assets/skin/silkscreen/iiic.svg');\nconst IMAGE_SILKSCREEN_M130 = loadImage('assets/skin/silkscreen/m130.svg');\n\nconst IMAGE_BUTTONS_V = prerenderedButtonFactor('assets/skin/hard-buttons/v.svg');\nconst IMAGE_BUTTONS_M515 = prerenderedButtonFactor('assets/skin/hard-buttons/m515.svg');\nconst IMAGE_BUTTONS_IIIC = prerenderedButtonFactor('assets/skin/hard-buttons/iiic.svg');\nconst IMAGE_BUTTONS_M130 = prerenderedButtonFactor('assets/skin/hard-buttons/m130.svg');\n\nconst DEFAULT_DIMENSIONS = deviceDimensions(DeviceId.m515);\n\n[IMAGE_BUTTONS_IIIC, IMAGE_BUTTONS_V, IMAGE_BUTTONS_M130, IMAGE_BUTTONS_M515].forEach((prerender) => {\n    prerender(ScreenSize.screen160x160);\n    prerender(ScreenSize.screen320x320);\n});\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CanvasDisplayService {\n    constructor() {}\n\n    get scale(): number {\n        return (this.dimensions.screenSize === ScreenSize.screen320x320 ? 2 : 3) * devicePixelRatio;\n    }\n\n    get border(): number {\n        return 1 * this.scale;\n    }\n\n    get width(): number {\n        return this.scale * this.dimensions.width + 2 * this.border;\n    }\n\n    get separator(): number {\n        return this.dimensions.screenSize === ScreenSize.screen320x320 ? 2 : 1;\n    }\n\n    get buttonsHeight(): number {\n        return this.dimensions.screenSize === ScreenSize.screen320x320 ? 60 : 30;\n    }\n\n    get height(): number {\n        return (\n            this.scale *\n                (this.dimensions.height + this.dimensions.silkscreenHeight + this.separator + this.buttonsHeight) +\n            2 * this.border\n        );\n    }\n\n    async initialize(canvas: HTMLCanvasElement, session: Session | undefined): Promise<void> {\n        this.dimensions = session ? deviceDimensions(session.device) : DEFAULT_DIMENSIONS;\n\n        canvas.width = this.width;\n        canvas.height = this.height;\n\n        const ctx = canvas.getContext('2d');\n        if (!ctx) {\n            throw new Error('canvas not supported - get a new browser');\n        }\n\n        this.ctx = ctx;\n\n        this.session = session;\n        this.fillCanvasRect(0, 0, this.width, this.height, this.backgroundColor());\n\n        await this.drawSilkscreen();\n        await this.drawButtons();\n    }\n\n    async drawSilkscreen(): Promise<void> {\n        if (!this.ctx) return;\n\n        const image = await this.silkscreenImage();\n\n        this.fillRect(\n            0,\n            this.dimensions.height + this.separator,\n            this.dimensions.width,\n            this.dimensions.silkscreenHeight,\n            BACKGROUND_COLOR_SILKSCREEN\n        );\n\n        this.ctx.imageSmoothingEnabled = true;\n        this.ctx.imageSmoothingQuality = 'high';\n\n        this.ctx.drawImage(\n            image,\n            this.border,\n            this.border + (this.dimensions.height + this.separator) * this.scale,\n            this.dimensions.width * this.scale,\n            this.dimensions.silkscreenHeight * this.scale\n        );\n    }\n\n    async drawStatistics(\n        snapshotStatistics?: SnapshotStatistics,\n        emulationStatistics?: EmulationStatistics\n    ): Promise<void> {\n        if (!this.ctx) return;\n\n        await this.drawSilkscreen();\n\n        this.ctx.beginPath();\n        this.fillRect(\n            0,\n            this.dimensions.height + this.separator,\n            this.dimensions.width,\n            this.dimensions.silkscreenHeight,\n            'rgba(255,255,255,0.6)'\n        );\n\n        const fontFactor = this.dimensions.screenSize === ScreenSize.screen320x320 ? 2 : 1;\n\n        this.ctx.font = `${this.scale * 6 * fontFactor}px monospace`;\n        this.ctx.fillStyle = 'black';\n        [\n            ...(!snapshotStatistics && !emulationStatistics ? ['collecting statistics...'] : []),\n            ...(snapshotStatistics\n                ? [\n                      `last snapshot          : ${new Date(snapshotStatistics.timestamp).toLocaleTimeString()}`,\n                      `snapshot pages         : ${snapshotStatistics.pages}`,\n                      `snapshot time total    : ${snapshotStatistics.timeTotal.toFixed(2)} msec`,\n                      `snapshot time blocking : ${snapshotStatistics.timeBlocking.toFixed(2)} msec`,\n                  ]\n                : []),\n            ...(emulationStatistics\n                ? [\n                      `host speed             : ${emulationStatistics.hostSpeed.toFixed(2)}x`,\n                      `emulation speed        : ${emulationStatistics.emulationSpeed.toFixed(2)}x`,\n                      `average FPS            : ${emulationStatistics.averageFPS.toFixed(2)}`,\n                  ]\n                : []),\n        ].forEach((line, i) =>\n            this.ctx!.fillText(\n                line,\n                this.border + fontFactor * this.scale,\n                this.border + (this.dimensions.height + fontFactor * (8 + i * 6)) * this.scale\n            )\n        );\n    }\n\n    async drawButtons(activeButtons: Array<PalmButton> = []): Promise<void> {\n        if (!this.ctx) return;\n\n        const ystart = this.dimensions.height + this.dimensions.silkscreenHeight + this.separator;\n        const buttonWidth = this.dimensions.screenSize === ScreenSize.screen320x320 ? 60 : 30;\n\n        this.ctx.drawImage(\n            await this.buttonsImage(),\n            this.border,\n            this.border + this.scale * ystart,\n            this.dimensions.width * this.scale,\n            this.buttonsHeight * this.scale\n        );\n\n        if (activeButtons.includes(PalmButton.cal)) {\n            this.fillRect(0, ystart, buttonWidth, this.buttonsHeight, BACKGROUND_ACTIVE_BUTTON);\n        }\n        if (activeButtons.includes(PalmButton.phone)) {\n            this.fillRect(buttonWidth, ystart, buttonWidth, this.buttonsHeight, BACKGROUND_ACTIVE_BUTTON);\n        }\n        if (activeButtons.includes(PalmButton.todo)) {\n            this.fillRect(\n                this.dimensions.width - 2 * buttonWidth,\n                ystart,\n                buttonWidth,\n                this.buttonsHeight,\n                BACKGROUND_ACTIVE_BUTTON\n            );\n        }\n        if (activeButtons.includes(PalmButton.notes)) {\n            this.fillRect(\n                this.dimensions.width - buttonWidth,\n                ystart,\n                buttonWidth,\n                this.buttonsHeight,\n                BACKGROUND_ACTIVE_BUTTON\n            );\n        }\n        if (activeButtons.includes(PalmButton.up)) {\n            this.fillRect(\n                2 * buttonWidth,\n                ystart,\n                this.dimensions.width - 4 * buttonWidth,\n                this.buttonsHeight / 2,\n                BACKGROUND_ACTIVE_BUTTON\n            );\n        }\n        if (activeButtons.includes(PalmButton.down)) {\n            this.fillRect(\n                2 * buttonWidth,\n                ystart + this.buttonsHeight / 2,\n                this.dimensions.width - 4 * buttonWidth,\n                this.buttonsHeight / 2,\n                BACKGROUND_ACTIVE_BUTTON\n            );\n        }\n    }\n\n    drawEmulationCanvas(canvas: HTMLCanvasElement): void {\n        if (!this.ctx) return;\n\n        this.ctx.imageSmoothingEnabled = false;\n        this.ctx.drawImage(\n            canvas,\n            this.border,\n            this.border,\n            this.scale * this.dimensions.width,\n            this.scale * this.dimensions.height\n        );\n    }\n\n    eventToPalmCoordinates(e: MouseEvent | Touch, clip = false): [number, number] | undefined {\n        if (!this.ctx) return;\n\n        const bb = this.ctx.canvas.getBoundingClientRect();\n\n        let contentX: number;\n        let contentY: number;\n        let contentWidth: number;\n        let contentHeight: number;\n\n        // CSS object-fit keeps the aspect ratio of the canvas content, but the canvas itself\n        // looses aspect and fills the container -> manually calculate the metrics for the content\n        if (bb.width / bb.height > this.width / this.height) {\n            contentHeight = bb.height;\n            contentWidth = (this.width / this.height) * bb.height;\n            contentY = bb.top;\n            contentX = bb.left + (bb.width - contentWidth) / 2;\n        } else {\n            contentWidth = bb.width;\n            contentHeight = (this.height / this.width) * bb.width;\n            contentX = bb.left;\n            contentY = bb.top + (bb.height - contentHeight) / 2;\n        }\n\n        // Compensate for the border\n        let x =\n            Math.floor((((e.clientX - contentX) / contentWidth) * this.width) / this.scale) - this.border / this.scale;\n        let y =\n            Math.floor((((e.clientY - contentY) / contentHeight) * this.height) / this.scale) -\n            this.border / this.scale;\n\n        // The canvas layout inside the border is as follows:\n        //\n        // * 0 .. 159   : LCD\n        // * 160        : separator\n        // * 161 .. 220 : silkscreen\n        // * 221 .. 250 : buttons\n        //\n        // we map this to 160x250 lines by mapping the separator to the silkscreen\n\n        if (y >= this.dimensions.height + this.separator) y -= 1;\n\n        const totalHeight = this.dimensions.height + this.dimensions.silkscreenHeight + this.buttonsHeight;\n\n        if (clip) {\n            if (x < 0) x = 0;\n            if (x >= this.dimensions.width) x = this.dimensions.width - 1;\n            if (y < 0) y = 0;\n            if (y >= totalHeight) {\n                y = this.dimensions.height + this.dimensions.silkscreenHeight - 1;\n            }\n        } else {\n            if (x < 0 || x >= this.dimensions.width || y < 0 || y >= totalHeight) {\n                return undefined;\n            }\n        }\n\n        return [x, y];\n    }\n\n    isButtons([, y]: [number, number]): boolean {\n        return y >= this.dimensions.height + this.dimensions.silkscreenHeight;\n    }\n\n    determineButton([x, y]: [number, number]): PalmButton {\n        const buttonWidth = this.dimensions.screenSize === ScreenSize.screen320x320 ? 60 : 30;\n\n        if (x >= this.dimensions.width - buttonWidth) return PalmButton.notes;\n        if (x >= this.dimensions.width - 2 * buttonWidth) return PalmButton.todo;\n        if (x >= 2 * buttonWidth) {\n            return y >=\n                this.dimensions.height + this.dimensions.silkscreenHeight + this.separator + this.buttonsHeight / 2\n                ? PalmButton.down\n                : PalmButton.up;\n        }\n        if (x >= buttonWidth) return PalmButton.phone;\n\n        return PalmButton.cal;\n    }\n\n    private fillRect(x: number, y: number, width: number, height: number, style: string): void {\n        if (!this.ctx) return;\n\n        this.ctx.beginPath();\n        this.ctx.rect(\n            this.border + this.scale * x,\n            this.border + this.scale * y,\n            this.scale * width,\n            this.scale * height\n        );\n        this.ctx.fillStyle = style;\n        this.ctx.fill();\n    }\n\n    private fillCanvasRect(x: number, y: number, width: number, height: number, style: string): void {\n        if (!this.ctx) return;\n\n        this.ctx.beginPath();\n        this.ctx.rect(x, y, width, height);\n        this.ctx.fillStyle = style;\n        this.ctx.fill();\n    }\n\n    private silkscreenImage(): Promise<HTMLImageElement> {\n        switch (this.session?.device) {\n            case DeviceId.m515:\n                return IMAGE_SILKSCREEN_M515;\n\n            case DeviceId.iiic:\n                return IMAGE_SILKSCREEN_IIIC;\n\n            case DeviceId.i710:\n            case DeviceId.m130:\n                return IMAGE_SILKSCREEN_M130;\n\n            case DeviceId.palmV:\n            default:\n                return IMAGE_SILKSCREEN_V;\n        }\n    }\n\n    private buttonsImage(): Promise<HTMLCanvasElement> {\n        switch (this.session?.device) {\n            case DeviceId.m515:\n            case DeviceId.i710:\n                return IMAGE_BUTTONS_M515(this.dimensions.screenSize);\n\n            case DeviceId.iiic:\n                return IMAGE_BUTTONS_IIIC(this.dimensions.screenSize);\n\n            case DeviceId.m130:\n                return IMAGE_BUTTONS_M130(this.dimensions.screenSize);\n\n            case DeviceId.palmV:\n            default:\n                return IMAGE_BUTTONS_V(this.dimensions.screenSize);\n        }\n    }\n\n    private backgroundColor(): string {\n        return isColor(this.session?.device) ? BACKGROUND_COLOR_COLOR_DEVICE : BACKGROUND_COLOR_GRAYSCALE_DEVICE;\n    }\n\n    private ctx: CanvasRenderingContext2D | undefined;\n    private session: Session | undefined;\n\n    private dimensions = DEFAULT_DIMENSIONS;\n}\n"]}