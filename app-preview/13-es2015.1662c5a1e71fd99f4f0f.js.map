{"version":3,"sources":["webpack:///src/app/service/backup.service.ts","webpack:///src/app/page/emulation/context-menu/context-menu.component.ts","webpack:///src/app/page/emulation/context-menu/context-menu.component.html","webpack:///src/app/service/event-handling.service.ts","webpack:///src/app/service/installation.service.ts","webpack:///src/app/page/emulation/emulation.page.html","webpack:///src/app/page/emulation/emulation-routing.module.ts","webpack:///src/app/page/emulation/emulation.page.ts","webpack:///src/app/page/emulation/emulation.module.ts"],"names":["BackupService","emulationService","loadingController","snapshotService","fileService","emulationStateService","alertService","currentSession","this","getCurrentSession","loader","create","present","archive","failedDatabases","pause","waitForPendingSnapshot","cloudpilot","backup","dbBackup","Init","IsInProgress","db","GetCurrentDatabase","Save","push","Promise","r","setTimeout","getArchive","dismiss","resume","length","message","saveFile","filename","errorMessage","ContextMenuComponent","backupService","onClick","showHelp","reset","resetNoExtensions","resetHard","engagePower","saveBackup","isRunning","isPowerOff","isUiInitialized","power","help","EventHandlingService","canvasDisplayService","ngZone","handleMouseDown","e","button","coords","eventToPalmCoordinates","area","determineArea","interactionMouse","handlePointerMove","determineButton","handleButtonDown","handleMouseMove","buttons","handeMouseUp","interaction","undefined","handleButtonUp","handlePointerUp","handleTouchStart","i","changedTouches","touch","item","interactionsTouch","set","identifier","cancelable","preventDefault","handleTouchMove","get","handleTouchEnd","delete","handleKeyDown","isToggleGameMode","run","gameMode","buttonFromEvent","keyCode","keyCodeFromEvent","handleKeyUp","key","btn","activeButtons","clear","drawButtons","Map","Set","canvas","release","runOutsideAngular","addEventListener","window","removeEventListener","clip","bb","getBoundingClientRect","contentX","contentY","contentWidth","contentHeight","width","height","top","left","x","Math","floor","clientX","y","clientY","has","add","Array","from","values","ctrlKey","shiftKey","isGameModeActive","charCodeAt","InstallationService","files","filesSuccess","filesFail","filesRequireReset","file","test","name","installDb","content","messageSucces","messageFailed","messageRequireReset","filter","join","header","routes","path","component","EmulationPage","emulationState","storageService","eventHandlingService","kvsService","audioService","popoverController","modalController","installlationService","onSnapshot","statistics","kvs","showStatistics","drawStatistics","getStatistics","onNewFrame","drawEmulationCanvas","canvasWidth","devicePixelRatio","canvasHeight","session","storedSession","getSession","initialize","canvasRef","nativeElement","then","getCanvas","newFrameEvent","addHandler","snapshotEvent","bind","removeHandler","popover","event","backdropDismiss","showBackdrop","componentProps","openFiles","installFiles","modal","url","Help","isInitialized","isMuted","volume","muted","mute","openContextMenu","EmulationPageRoutingModule","forChild","EmulationPageModule"],"mappings":"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","file":"x","sourcesContent":["import { concatFilenames, filenameForBackup } from 'src/app/helper/filename';\n\nimport { AlertService } from './alert.service';\nimport { EmulationService } from './emulation.service';\nimport { EmulationStateService } from './emulation-state.service';\nimport { FileService } from 'src/app/service/file.service';\nimport { Injectable } from '@angular/core';\nimport { LoadingController } from '@ionic/angular';\nimport { SnapshotService } from './snapshot.service';\n\n@Injectable({ providedIn: 'root' })\nexport class BackupService {\n    constructor(\n        private emulationService: EmulationService,\n        private loadingController: LoadingController,\n        private snapshotService: SnapshotService,\n        private fileService: FileService,\n        private emulationStateService: EmulationStateService,\n        private alertService: AlertService\n    ) {}\n\n    async saveBackup(): Promise<void> {\n        const currentSession = this.emulationStateService.getCurrentSession();\n        if (!currentSession) return;\n\n        const loader = await this.loadingController.create();\n        await loader.present();\n\n        let failedDatabases: Array<string> = [];\n        let archive: Uint8Array | undefined;\n\n        await this.emulationService.pause();\n        await this.snapshotService.waitForPendingSnapshot();\n\n        try {\n            const cloudpilot = await this.emulationService.cloudpilot;\n\n            await cloudpilot.backup(async (dbBackup) => {\n                dbBackup.Init();\n\n                while (dbBackup.IsInProgress()) {\n                    const db = dbBackup.GetCurrentDatabase();\n\n                    if (!dbBackup.Save()) failedDatabases.push(db);\n\n                    await new Promise((r) => setTimeout(r, 0));\n                }\n\n                archive = cloudpilot.getArchive(dbBackup);\n            });\n        } finally {\n            await loader.dismiss();\n            await this.emulationService.resume();\n        }\n\n        if (!archive) {\n            await this.alertService.errorMessage('Backup failed.');\n        } else if (failedDatabases.length > 0) {\n            await this.alertService.message(\n                'Backup complete',\n                `\n                    ${concatFilenames(failedDatabases)} failed  to backup.\n                    <br/><br/>\n                    Open databases cannot be backuped. Please run backup from the launcher\n                    in order to backup all databases.\n                `,\n                { 'Save Backup': () => this.fileService.saveFile(filenameForBackup(currentSession), archive!) },\n                'Cancel'\n            );\n        } else {\n            this.fileService.saveFile(filenameForBackup(currentSession), archive);\n        }\n    }\n}\n","import { Component, Input, OnInit } from '@angular/core';\n\nimport { BackupService } from './../../../service/backup.service';\nimport { EmulationService } from './../../../service/emulation.service';\n\n@Component({\n    selector: 'app-emulation-context-menu',\n    templateUrl: './context-menu.component.html',\n    styleUrls: ['./context-menu.component.scss'],\n})\nexport class ContextMenuComponent implements OnInit {\n    constructor(public emulationService: EmulationService, private backupService: BackupService) {}\n\n    ngOnInit(): void {}\n\n    reset(): void {\n        this.emulationService.reset();\n\n        this.onClick();\n    }\n\n    resetNoExtensions(): void {\n        this.emulationService.resetNoExtensions();\n\n        this.onClick();\n    }\n\n    resetHard(): void {\n        this.emulationService.resetHard();\n\n        this.onClick();\n    }\n\n    power(): void {\n        this.emulationService.engagePower();\n\n        this.onClick();\n    }\n\n    help(): void {\n        this.showHelp();\n\n        this.onClick();\n    }\n\n    backup(): void {\n        this.backupService.saveBackup();\n\n        this.onClick();\n    }\n\n    get backupDisabled(): boolean {\n        return (\n            !this.emulationService.isRunning() ||\n            this.emulationService.isPowerOff() ||\n            !this.emulationService.isUiInitialized()\n        );\n    }\n\n    @Input()\n    onClick: () => void = () => undefined;\n\n    @Input()\n    showHelp: () => void = () => undefined;\n}\n","<ion-list>\n  <ion-item button [detail]=\"false\" (click)=\"power()\" [disabled]=\"!emulationService.isRunning()\">\n    Power\n  </ion-item>\n  <ion-item button [detail]=\"false\" (click)=\"reset()\" [disabled]=\"!emulationService.isRunning()\">\n    Reset\n  </ion-item>\n  <ion-item button [detail]=\"false\" (click)=\"resetNoExtensions()\" [disabled]=\"!emulationService.isRunning()\">\n    Reset (no extensions)\n  </ion-item>\n  <ion-item button [detail]=\"false\" (click)=\"resetHard()\" [disabled]=\"!emulationService.isRunning()\">\n    Hard reset\n  </ion-item>\n  <ion-item button [detail]=\"false\" (click)=\"backup()\" [disabled]=\"backupDisabled\">\n    Save backup\n  </ion-item>\n  <ion-item button [detail]=\"false\" (click)=\"help()\">\n    Help\n  </ion-item>\n</ion-list>\n","import { BORDER, CanvasDisplayService, HEIGHT, SCALE, WIDTH } from './canvas-display.service';\nimport { Injectable, NgZone } from '@angular/core';\n\nimport { EmulationService } from './emulation.service';\nimport { PalmButton } from '../helper/Cloudpilot';\n\nconst enum Area {\n    silkscreen,\n    buttons,\n}\n\ninterface InteractionSilkscreen {\n    area: Area.silkscreen;\n}\n\ninterface InteractionButton {\n    area: Area.buttons;\n    button: PalmButton;\n}\n\ntype Interaction = InteractionSilkscreen | InteractionButton;\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class EventHandlingService {\n    constructor(\n        private emulationService: EmulationService,\n        private canvasDisplayService: CanvasDisplayService,\n        private ngZone: NgZone\n    ) {}\n\n    bind(canvas: HTMLCanvasElement): void {\n        if (this.canvas) {\n            this.release();\n        }\n\n        this.canvas = canvas;\n\n        this.ngZone.runOutsideAngular(() => {\n            canvas.addEventListener('mousedown', this.handleMouseDown);\n            window.addEventListener('mouseup', this.handeMouseUp);\n            window.addEventListener('mousemove', this.handleMouseMove);\n\n            canvas.addEventListener('touchstart', this.handleTouchStart);\n            canvas.addEventListener('touchmove', this.handleTouchMove);\n            canvas.addEventListener('touchend', this.handleTouchEnd);\n            canvas.addEventListener('touchcancel', this.handleTouchEnd);\n\n            window.addEventListener('keydown', this.handleKeyDown);\n            window.addEventListener('keyup', this.handleKeyUp);\n        });\n    }\n\n    release(): void {\n        if (!this.canvas) return;\n\n        this.canvas.removeEventListener('mousedown', this.handleMouseDown);\n        window.removeEventListener('mouseup', this.handeMouseUp);\n        window.removeEventListener('mousemove', this.handleMouseMove);\n\n        this.canvas.removeEventListener('touchstart', this.handleTouchStart);\n        this.canvas.removeEventListener('touchmove', this.handleTouchMove);\n        this.canvas.removeEventListener('touchend', this.handleTouchEnd);\n        this.canvas.removeEventListener('touchcancel', this.handleTouchEnd);\n\n        window.removeEventListener('keydown', this.handleKeyDown);\n        window.removeEventListener('keyup', this.handleKeyUp);\n\n        for (const button of this.activeButtons) {\n            this.handleButtonUp(button);\n        }\n\n        this.activeButtons.clear();\n        this.interactionsTouch.clear();\n        this.interactionMouse = undefined;\n\n        this.canvas = undefined;\n    }\n\n    isGameMode(): boolean {\n        return this.gameMode;\n    }\n\n    private handleMouseDown = (e: MouseEvent): void => {\n        if (e.button !== 0) return;\n\n        const coords = this.eventToPalmCoordinates(e);\n        if (!coords) return;\n\n        const area = this.determineArea(coords);\n\n        if (area === Area.silkscreen) {\n            this.interactionMouse = { area };\n            this.emulationService.handlePointerMove(...coords);\n        } else {\n            const button = this.determineButton(coords);\n            this.interactionMouse = { area, button };\n\n            this.handleButtonDown(button);\n        }\n    };\n\n    private handleMouseMove = (e: MouseEvent): void => {\n        // tslint:disable-next-line: no-bitwise\n        if (!(e.buttons & 0x01) || this.interactionMouse?.area !== Area.silkscreen) return;\n\n        const coords = this.eventToPalmCoordinates(e, true);\n        if (!coords) return;\n\n        this.emulationService.handlePointerMove(...coords);\n    };\n\n    private handeMouseUp = (e: MouseEvent): void => {\n        if (e.button !== 0) return;\n\n        const interaction = this.interactionMouse;\n        this.interactionMouse = undefined;\n\n        switch (interaction?.area) {\n            case Area.buttons:\n                this.handleButtonUp(interaction.button);\n\n                break;\n\n            case Area.silkscreen:\n                this.emulationService.handlePointerUp();\n\n                break;\n        }\n    };\n\n    private handleTouchStart = (e: TouchEvent): void => {\n        for (let i = 0; i < e.changedTouches.length; i++) {\n            const touch = e.changedTouches.item(i);\n            if (!touch) continue;\n\n            const coords = this.eventToPalmCoordinates(touch);\n            if (!coords) continue;\n\n            const area = this.determineArea(coords);\n            if (area === Area.silkscreen) {\n                this.interactionsTouch.set(touch.identifier, { area });\n                this.emulationService.handlePointerMove(...coords);\n            } else {\n                const button = this.determineButton(coords);\n                this.interactionsTouch.set(touch.identifier, { area, button });\n\n                this.handleButtonDown(button);\n            }\n        }\n\n        if (e.cancelable !== false) e.preventDefault();\n    };\n\n    private handleTouchMove = (e: TouchEvent): void => {\n        for (let i = 0; i < e.changedTouches.length; i++) {\n            const touch = e.changedTouches.item(i);\n            if (!touch) continue;\n\n            if (this.interactionsTouch.get(touch.identifier)?.area === Area.silkscreen) {\n                const coords = this.eventToPalmCoordinates(touch, true);\n                if (!coords) continue;\n\n                this.emulationService.handlePointerMove(...coords);\n            }\n        }\n\n        if (e.cancelable !== false) e.preventDefault();\n    };\n\n    private handleTouchEnd = (e: TouchEvent): void => {\n        for (let i = 0; i < e.changedTouches.length; i++) {\n            const touch = e.changedTouches.item(i);\n            if (!touch) continue;\n\n            const interaction = this.interactionsTouch.get(touch.identifier);\n            this.interactionsTouch.delete(touch.identifier);\n\n            switch (interaction?.area) {\n                case Area.buttons:\n                    this.handleButtonUp(interaction.button);\n\n                    break;\n\n                case Area.silkscreen:\n                    this.emulationService.handlePointerUp();\n\n                    break;\n            }\n        }\n\n        if (e.cancelable !== false) e.preventDefault();\n    };\n\n    private handleKeyDown = (e: KeyboardEvent): void => {\n        if (this.isToggleGameMode(e)) {\n            e.preventDefault();\n\n            this.ngZone.run(() => (this.gameMode = !this.gameMode));\n\n            return;\n        }\n\n        const button = this.buttonFromEvent(e);\n        if (button !== undefined) {\n            this.handleButtonDown(button);\n            e.preventDefault();\n\n            return;\n        }\n\n        const keyCode = this.keyCodeFromEvent(e);\n        if (keyCode !== undefined) {\n            this.emulationService.handleKeyDown(keyCode);\n            e.preventDefault();\n        }\n    };\n\n    private handleKeyUp = (e: KeyboardEvent): void => {\n        const button = this.buttonFromEvent(e);\n        if (button !== undefined) {\n            this.handleButtonUp(button);\n            e.preventDefault();\n\n            return;\n        }\n\n        if (e.key === 'Control') {\n            for (const btn of this.activeButtons) {\n                this.emulationService.handleButtonUp(btn);\n            }\n\n            this.activeButtons.clear();\n            this.canvasDisplayService.drawButtons([]);\n        }\n    };\n\n    private eventToPalmCoordinates(e: MouseEvent | Touch, clip = false): [number, number] | undefined {\n        if (!this.canvas) return;\n\n        const bb = this.canvas.getBoundingClientRect();\n\n        let contentX: number;\n        let contentY: number;\n        let contentWidth: number;\n        let contentHeight: number;\n\n        // CSS object-fit keeps the aspect ratio of the canvas content, but the canvas itself\n        // looses aspect and fills the container -> manually calculate the metrics for the content\n        if (bb.width / bb.height > WIDTH / HEIGHT) {\n            contentHeight = bb.height;\n            contentWidth = (WIDTH / HEIGHT) * bb.height;\n            contentY = bb.top;\n            contentX = bb.left + (bb.width - contentWidth) / 2;\n        } else {\n            contentWidth = bb.width;\n            contentHeight = (HEIGHT / WIDTH) * bb.width;\n            contentX = bb.left;\n            contentY = bb.top + (bb.height - contentHeight) / 2;\n        }\n\n        // Compensate for the border\n        let x = Math.floor((((e.clientX - contentX) / contentWidth) * WIDTH) / SCALE) - BORDER / SCALE;\n        let y = Math.floor((((e.clientY - contentY) / contentHeight) * HEIGHT) / SCALE) - BORDER / SCALE;\n\n        // The canvas layout inside the border is as follows:\n        //\n        // * 0 .. 159   : LCD\n        // * 160        : separator\n        // * 161 .. 220 : silkscreen\n        // * 221 .. 250 : buttons\n        //\n        // we map this to 160x250 lines by mapping the separator to the silkscreen\n\n        if (y >= 161) y -= 1;\n\n        if (clip) {\n            if (x < 0) x = 0;\n            if (x > 159) x = 159;\n            if (y < 0) y = 0;\n            if (y > 249) y = 249;\n        } else {\n            if (x < 0 || x >= 160 || y < 0 || y >= 250) return undefined;\n        }\n\n        return [x, y];\n    }\n\n    private determineArea([, y]: [number, number]): Area {\n        return y >= 220 ? Area.buttons : Area.silkscreen;\n    }\n\n    private determineButton([x, y]: [number, number]): PalmButton {\n        if (x >= 130) return PalmButton.notes;\n        if (x >= 100) return PalmButton.todo;\n        if (x >= 60) return y >= 236 ? PalmButton.down : PalmButton.up;\n        if (x >= 30) return PalmButton.phone;\n\n        return PalmButton.cal;\n    }\n\n    private handleButtonDown(button: PalmButton): void {\n        if (this.activeButtons.has(button)) return;\n\n        this.activeButtons.add(button);\n        this.emulationService.handleButtonDown(button);\n        this.canvasDisplayService.drawButtons(Array.from(this.activeButtons.values()));\n    }\n\n    private handleButtonUp(button: PalmButton): void {\n        if (!this.activeButtons.has(button)) return;\n\n        this.activeButtons.delete(button);\n        this.emulationService.handleButtonUp(button);\n        this.canvasDisplayService.drawButtons(Array.from(this.activeButtons.values()));\n    }\n\n    private isToggleGameMode(e: KeyboardEvent): boolean {\n        return (e.key === 'Shift' && e.ctrlKey) || (e.key === 'Control' && e.shiftKey);\n    }\n\n    private isGameModeActive(e: KeyboardEvent): boolean {\n        return (!this.gameMode && e.ctrlKey) || (this.gameMode && !e.ctrlKey);\n    }\n\n    private buttonFromEvent(e: KeyboardEvent): PalmButton | undefined {\n        switch (e.key) {\n            case 'PageUp':\n                return PalmButton.up;\n\n            case 'PageDown':\n                return PalmButton.down;\n        }\n\n        if (!this.isGameModeActive(e)) return;\n\n        switch (e.key) {\n            case 'w':\n            case 'i':\n            case 'ArrowUp':\n                return PalmButton.up;\n\n            case 's':\n            case 'k':\n            case 'ArrowDown':\n                return PalmButton.down;\n\n            case 'a':\n            case 'j':\n            case 'y':\n            case 'z':\n            case 'ArrowLeft':\n                return PalmButton.cal;\n\n            case 'q':\n            case 'u':\n            case 'x':\n                return PalmButton.phone;\n\n            case 'e':\n            case 'o':\n            case 'c':\n                return PalmButton.todo;\n\n            case 'd':\n            case 'l':\n            case 'v':\n            case 'ArrowRight':\n                return PalmButton.notes;\n        }\n\n        return undefined;\n    }\n\n    private keyCodeFromEvent(e: KeyboardEvent): number | undefined {\n        if (this.isGameModeActive(e)) return;\n\n        if (e.key.length === 1 && e.key.charCodeAt(0) <= 255) return e.key.charCodeAt(0);\n\n        switch (e.key) {\n            case 'ArrowLeft':\n                return 0x1c;\n\n            case 'ArrowRight':\n                return 0x1d;\n\n            case 'ArrowUp':\n                return 0x1e;\n\n            case 'ArrowDown':\n                return 0x1f;\n\n            case 'Backspace':\n                return 0x08;\n\n            case 'Tab':\n                return 0x09;\n\n            case 'Enter':\n                return 0x0a;\n\n            default:\n                return undefined;\n        }\n    }\n\n    private canvas: HTMLCanvasElement | undefined;\n    private interactionMouse: Interaction | undefined;\n    private interactionsTouch = new Map<number, Interaction>();\n    private activeButtons = new Set<PalmButton>();\n    private gameMode = false;\n}\n","import { AlertService } from './alert.service';\nimport { DbInstallResult } from '../helper/Cloudpilot';\nimport { EmulationService } from './emulation.service';\nimport { EmulationStateService } from './emulation-state.service';\nimport { FileDescriptor } from './file.service';\nimport { Injectable } from '@angular/core';\nimport { LoadingController } from '@ionic/angular';\nimport { SnapshotService } from './snapshot.service';\nimport { concatFilenames } from '../helper/filename';\n\n@Injectable({ providedIn: 'root' })\nexport class InstallationService {\n    constructor(\n        private emulationService: EmulationService,\n        private loadingController: LoadingController,\n        private snapshotService: SnapshotService,\n        private emulationStateService: EmulationStateService,\n        private alertService: AlertService\n    ) {}\n\n    async installFiles(files: Array<FileDescriptor>): Promise<void> {\n        const loader = await this.loadingController.create({\n            message: 'Installing...',\n        });\n\n        await loader.present();\n        await this.emulationService.pause();\n        await this.snapshotService.waitForPendingSnapshot();\n\n        const filesSuccess: Array<string> = [];\n        const filesFail: Array<string> = [];\n        const filesRequireReset: Array<string> = [];\n\n        try {\n            for (const file of files) {\n                if (!/\\.(prc|pdb|pqa)$/i.test(file.name)) {\n                    filesFail.push(file.name);\n\n                    continue;\n                }\n\n                switch (await this.emulationService.installDb(file.content)) {\n                    case DbInstallResult.failure:\n                        filesFail.push(file.name);\n                        break;\n\n                    case DbInstallResult.needsReboot:\n                        filesRequireReset.push(file.name);\n                        filesSuccess.push(file.name);\n                        break;\n\n                    case DbInstallResult.success:\n                        filesSuccess.push(file.name);\n                        break;\n                }\n\n                await new Promise((r) => setTimeout(r, 0));\n            }\n        } finally {\n            loader.dismiss();\n\n            this.emulationService.resume();\n        }\n\n        const message = [\n            this.messageSucces(filesSuccess),\n            this.messageFailed(filesFail),\n            this.messageRequireReset(filesRequireReset),\n        ]\n            .filter((x) => !!x)\n            .join('<br/><br/>');\n\n        let header;\n\n        if (filesFail.length === 0) {\n            header = 'Installation successful';\n        } else if (filesSuccess.length === 0) {\n            header = 'Installation failed';\n        } else {\n            header = 'Installation errors';\n        }\n\n        this.alertService.message(\n            header,\n            message,\n            filesRequireReset.length > 0 ? { 'Reset now': () => this.emulationService.reset() } : undefined\n        );\n    }\n\n    private messageSucces(filesSuccess: Array<string>): string | undefined {\n        switch (filesSuccess.length) {\n            case 0:\n                return undefined;\n\n            case 1:\n                return `Installation of ${filesSuccess[0]} successful.`;\n\n            default:\n                return `Installation of ${filesSuccess.length} files successful.`;\n        }\n    }\n\n    private messageFailed(filesFail: Array<string>): string | undefined {\n        return filesFail.length > 0 ? `Installation of  ${concatFilenames(filesFail)} failed.` : undefined;\n    }\n\n    private messageRequireReset(filesRequireReset: Array<string>): string | undefined {\n        return filesRequireReset.length > 0\n            ? `${concatFilenames(filesRequireReset)} require a device reset.`\n            : undefined;\n    }\n}\n","<ion-header>\n  <ion-toolbar>\n    <ion-title>{{title}}</ion-title>\n\n    <ion-buttons slot=\"end\">\n      <ion-button [disabled]=\"installFileDisabled\" (click)=\"installFiles()\">\n        <ion-icon name=\"download-outline\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n\n    <ion-buttons slot=\"start\">\n      <ion-button (click)=\"openContextMenu($event)\">\n        <ion-icon name=\"ellipsis-vertical-outline\"></ion-icon>\n      </ion-button>\n\n      <ion-button *ngIf=\"isMuted && !isAudioOff\" (click)=\"mute(false)\">\n        <ion-icon name=\"volume-mute-outline\"></ion-icon>\n      </ion-button>\n      <ion-button *ngIf=\"!isMuted && !isAudioOff\" (click)=\"mute(true)\">\n        <ion-icon name=\"volume-high-outline\"></ion-icon>\n      </ion-button>\n      <ion-button *ngIf=\"eventHandlingService.isGameMode()\" (click)=\"showGameModeHint()\">\n        <ion-icon name=\"game-controller-outline\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n\n  <div class=\"container running-session\" [style.display]=\"emulationState.getCurrentSession() ? undefined : 'none'\">\n    <canvas #canvas [width]=\"canvasWidth\" [height]=\"canvasHeight\" [style.width]=\"cssWidth\" [style.height]=\"cssHeight\"\n      [style.display]=\"emulationState.getCurrentSession() ? 'block' : 'none'\"></canvas>\n  </div>\n\n  <div class=\"container no-session\" *ngIf=\" !emulationState.getCurrentSession()\">\n    <div>No session selected</div>\n  </div>\n\n</ion-content>\n","import { RouterModule, Routes } from '@angular/router';\n\nimport { EmulationPage } from './emulation.page';\nimport { NgModule } from '@angular/core';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: EmulationPage,\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class EmulationPageRoutingModule {}\n","import { AfterViewInit, Component, ElementRef, ViewChild } from '@angular/core';\nimport { CanvasDisplayService, HEIGHT, WIDTH } from './../../service/canvas-display.service';\nimport { LoadingController, ModalController, PopoverController } from '@ionic/angular';\n\nimport { AlertService } from 'src/app/service/alert.service';\nimport { AudioService } from './../../service/audio.service';\nimport { ContextMenuComponent } from './context-menu/context-menu.component';\nimport { EmulationService } from './../../service/emulation.service';\nimport { EmulationStateService } from './../../service/emulation-state.service';\nimport { EventHandlingService } from './../../service/event-handling.service';\nimport { FileService } from 'src/app/service/file.service';\nimport { HelpComponent } from 'src/app/component/help/help.component';\nimport { InstallationService } from './../../service/installation.service';\nimport { KvsService } from './../../service/kvs.service';\nimport { SnapshotService } from './../../service/snapshot.service';\nimport { SnapshotStatistics } from './../../model/SnapshotStatistics';\nimport { StorageService } from './../../service/storage.service';\nimport { getStoredSession } from 'src/app/helper/storedSession';\n\n@Component({\n    selector: 'app-emulation',\n    templateUrl: './emulation.page.html',\n    styleUrls: ['./emulation.page.scss'],\n})\nexport class EmulationPage implements AfterViewInit {\n    constructor(\n        public emulationService: EmulationService,\n        public emulationState: EmulationStateService,\n        private storageService: StorageService,\n        public eventHandlingService: EventHandlingService,\n        private canvasDisplayService: CanvasDisplayService,\n        private kvsService: KvsService,\n        private audioService: AudioService,\n        private popoverController: PopoverController,\n        private modalController: ModalController,\n        private alertService: AlertService,\n        private fileService: FileService,\n        private loadingController: LoadingController,\n        private snapshotService: SnapshotService,\n        private installlationService: InstallationService\n    ) {}\n\n    ngAfterViewInit(): void {}\n\n    get canvasWidth(): number {\n        return WIDTH;\n    }\n\n    get canvasHeight(): number {\n        return HEIGHT;\n    }\n\n    get cssWidth(): string {\n        return this.canvasWidth / devicePixelRatio + 'px';\n    }\n\n    get cssHeight(): string {\n        return this.canvasHeight / devicePixelRatio + 'px';\n    }\n\n    async ionViewDidEnter(): Promise<void> {\n        let session = this.emulationState.getCurrentSession();\n        const storedSession = getStoredSession();\n\n        if (!session && storedSession !== undefined) {\n            session = await this.storageService.getSession(storedSession);\n        }\n        this.canvasDisplayService.initialize(this.canvasRef.nativeElement, session).then(() => {\n            if (this.kvsService.kvs.showStatistics) this.canvasDisplayService.drawStatistics();\n        });\n        this.onNewFrame(this.emulationService.getCanvas());\n\n        this.emulationService.newFrameEvent.addHandler(this.onNewFrame);\n        this.snapshotService.snapshotEvent.addHandler(this.onSnapshot);\n\n        this.emulationService.resume();\n\n        this.eventHandlingService.bind(this.canvasRef.nativeElement);\n    }\n\n    ionViewWillLeave() {\n        this.emulationService.pause();\n\n        this.emulationService.newFrameEvent.removeHandler(this.onNewFrame);\n        this.snapshotService.snapshotEvent.removeHandler(this.onSnapshot);\n\n        this.eventHandlingService.release();\n    }\n\n    async openContextMenu(e: MouseEvent): Promise<void> {\n        const popover = await this.popoverController.create({\n            component: ContextMenuComponent,\n            event: e,\n            backdropDismiss: true,\n            showBackdrop: false,\n            componentProps: {\n                onClick: () => popover.dismiss(),\n                showHelp: () => this.showHelp(),\n            },\n        });\n\n        popover.present();\n    }\n\n    installFiles(): void {\n        this.fileService.openFiles(this.installlationService.installFiles.bind(this.installlationService));\n    }\n\n    async showHelp(): Promise<void> {\n        const modal = await this.modalController.create({\n            component: HelpComponent,\n            componentProps: {\n                url: 'assets/doc/emulation.md',\n            },\n        });\n        await modal.present();\n    }\n\n    async showGameModeHint(): Promise<void> {\n        await this.alertService.message(\n            'Game mode',\n            `\n                The keyboard is in game mode and controls the hardware buttons.\n                Press ctrl-shift in order to exit game mode.\n                <br/><br/>\n                Check the help page for a description of the different keyboard mappings.\n            `,\n            {\n                Help: () => this.showHelp(),\n            }\n        );\n    }\n\n    get installFileDisabled(): boolean {\n        return (\n            !this.emulationService.isRunning() ||\n            this.emulationService.isPowerOff() ||\n            !this.emulationService.isUiInitialized()\n        );\n    }\n\n    get title(): string {\n        return this.emulationState.getCurrentSession()?.name || '';\n    }\n\n    get isMuted(): boolean {\n        return !this.audioService.isInitialized() || this.audioService.isMuted();\n    }\n\n    get isAudioOff(): boolean {\n        return this.kvsService.kvs.volume <= 0;\n    }\n\n    mute(muted: boolean): void {\n        if (muted) {\n            this.audioService.mute(true);\n        } else {\n            if (this.audioService.isInitialized()) {\n                this.audioService.mute(false);\n            } else {\n                this.audioService.initialize();\n            }\n        }\n    }\n\n    private onSnapshot = (statistics: SnapshotStatistics): void => {\n        if (this.kvsService.kvs.showStatistics) {\n            this.canvasDisplayService.drawStatistics(statistics, this.emulationService.getStatistics());\n        }\n    };\n\n    private onNewFrame = (canvas: HTMLCanvasElement): void => {\n        this.canvasDisplayService.drawEmulationCanvas(canvas);\n    };\n\n    @ViewChild('canvas') private canvasRef!: ElementRef<HTMLCanvasElement>;\n}\n","import { CommonModule } from '@angular/common';\nimport { ContextMenuComponent } from './context-menu/context-menu.component';\nimport { EmulationPage } from './emulation.page';\nimport { EmulationPageRoutingModule } from './emulation-routing.module';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { NgModule } from '@angular/core';\nimport { SharedComponentModule } from './../../component/shared-component.module';\n\n@NgModule({\n    imports: [CommonModule, FormsModule, IonicModule, EmulationPageRoutingModule, SharedComponentModule],\n    declarations: [EmulationPage, ContextMenuComponent],\n})\nexport class EmulationPageModule {}\n"]}