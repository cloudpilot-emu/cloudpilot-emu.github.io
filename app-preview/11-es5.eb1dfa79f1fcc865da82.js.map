{"version":3,"sources":["webpack:///src/app/tabs/tabs.page.ts","webpack:///src/app/tabs/tabs.module.ts","webpack:///src/app/tabs/tabs-routing.module.ts","webpack:///src/app/tabs/tabs.page.html","webpack:///src/app/service/canvas-display.service.ts"],"names":["TabsPage","TabsPageModule","TabsPageRoutingModule","routes","path","component","router","canvasDisplayService","updateUseSmallUI","isMD","document","querySelector","headerHeight","this","useSmallUI","canvasArea","window","innerHeight","innerWidth","addEventListener","url","availableHeight","availableWidth","scaledWidth","scaledHeight","Math","min","height","devicePixelRatio","width","children","loadChildren","then","m","EmulationPageModule","SessionsPageModule","SettingsPageModule","AboutPageModule","redirectTo","pathMatch","forChild","BACKGROUND_COLOR_SILKSCREEN","BACKGROUND_COLOR_GRAYSCALE_DEVICE","prerender","image","cachedWidth","cachedHeight","canvas","createElement","ctx","getContext","Error","drawImage","loadImage","Promise","resolve","reject","Image","onload","onerror","src","IMAGE_SILKSCREEN_V","IMAGE_SILKSCREEN_M515","IMAGE_SILKSCREEN_IIIC","IMAGE_SILKSCREEN_M130","IMAGE_SILKSCREEN_TUNGSTENW","IMAGE_BUTTONS_V","IMAGE_BUTTONS_M515","IMAGE_BUTTONS_IIIC","IMAGE_BUTTONS_M130","IMAGE_BUTTONS_TUNGSTENW","DEFAULT_DIMENSIONS","m515","CanvasDisplayService","dimensions","screenSize","scale","border","silkscreenHeight","separator","buttonsHeight","session","device","backgroundColor","fillCanvasRect","drawSilkscreen","drawButtons","fillRect","imageSmoothingEnabled","imageSmoothingQuality","silkscreenImage","snapshotStatistics","emulationStatistics","beginPath","fontFactor","font","fillStyle","Date","timestamp","toLocaleTimeString","pages","timeTotal","toFixed","timeBlocking","hostSpeed","emulationSpeed","averageFPS","forEach","line","i","fillText","activeButtons","ystart","buttonWidth","buttonsImage","includes","e","clip","contentX","contentY","contentWidth","contentHeight","bb","getBoundingClientRect","top","left","x","floor","clientX","y","clientY","totalHeight","style","rect","fill","iiic","m130","i710","palmV"],"mappings":"swDASaA,ECEAC,ECiCAC,E,wEAvCPC,EAAiB,CACnB,CACIC,KAAM,MACNC,WFCKL,EAAP,WACF,WAAoBM,EAAwBC,wBAAxB,KAAAD,SAAwB,KAAAC,uBAUpC,KAAAC,iBAAmB,WACvB,IAAMC,IAASC,SAASC,cAAc,WAChCC,EAAeH,EAAO,GAAK,GAIjCI,EAAKC,WACDD,EAAKE,WAAWC,OAAOC,YAAcL,GAJpBH,EAAO,GAAK,IACX,EAGgEO,OAAOE,WAAa,GACtGL,EAAKE,WAAWC,OAAOC,YAAcL,EAAe,GAJlC,EAIsDI,OAAOE,WAAa,IAqB5F,KAAAJ,cAtCJE,OAAOG,iBAAiB,SAAUN,KAAKL,kBAEvCK,KAAKL,mBAJP,+BAOF,WACI,MAA2B,mBAApBK,KAAKP,OAAOc,KAA4BP,KAAKC,aARtD,wBAsBM,SAAWO,EAAyBC,GAIxC,IAAIC,EACAC,EAUJ,OAdAH,EAAkBI,KAAKC,IAAIL,EAAiBR,KAAKN,qBAAqBoB,OAASC,mBAC/EN,EAAiBG,KAAKC,IAAIJ,EAAgBT,KAAKN,qBAAqBsB,MAAQD,mBAKvDP,EAAkBR,KAAKN,qBAAqBsB,MAAQhB,KAAKN,qBAAqBoB,QAC/FH,EAAeH,EACfE,EAAeF,EAAkBR,KAAKN,qBAAqBoB,OAAUd,KAAKN,qBAAqBsB,QAE/FN,EAAcD,EACdE,EAAgBF,EAAiBT,KAAKN,qBAAqBsB,MAAShB,KAAKN,qBAAqBoB,QAG3FJ,EAAcC,MArCvB,K,sCAAOxB,GAAQ,sB,uBAARA,EAAQ,6SGTrB,mBAEE,gBACE,wBACE,2BACE,qBACA,oBAAW,mBAAQ,OACrB,OAEA,2BACE,qBACA,oBAAW,oBAAQ,OACrB,OAEA,4BACE,sBACA,qBAAW,oBAAQ,OACrB,OAEA,4BACE,sBACA,qBAAW,iBAAK,OAClB,OACF,OACF,OAEF,Q,MAvBiB,qC,wcDMT8B,SAAU,CACN,CACI1B,KAAM,YACN2B,aAAc,kBAAM,wDAA6CC,KAAMC,YAAC,OAAKA,EAAEC,wBAEnF,CACI9B,KAAM,WACN2B,aAAc,kBAAM,wDAA2CC,KAAMC,YAAC,OAAKA,EAAEE,uBAEjF,CACI/B,KAAM,WACN2B,aAAc,kBAAM,wDAA2CC,KAAMC,YAAC,OAAKA,EAAEG,uBAEjF,CACIhC,KAAM,QACN2B,aAAc,kBAAM,wDAAqCC,KAAMC,YAAC,OAAKA,EAAEI,oBAE3E,CACIjC,KAAM,GACNkC,WAAY,gBACZC,UAAW,UAIvB,CACInC,KAAM,GACNkC,WAAY,gBACZC,UAAW,SAQZ,IAAMrC,EAAP,yB,oCAAOA,I,uBAAAA,I,2BAHA,CAAC,IAAasC,SAASrC,IACtB,O,GD/BR,IAAOF,EAAP,yB,oCAAOA,I,uBAAAA,I,2BAHA,CAAC,IAAa,IAAc,IAAa,M,sIGGhDwC,EAA8B,IAAsB,GACpDC,EAAoC,IAAsB,GAMhE,SAASC,EAAUC,OACXC,EACAC,EAFWF,OAGTG,EAASrC,SAASsC,cAAc,UAEtC,OAAO,SAAOnB,EAAeF,GAAtB,OAAyC,YAAD,gBAAC,wBAAD,qGACvCkB,IAAgBhB,GAASiB,IAAiBnB,EADH,yCAEhCoB,GAFgC,UAK3CA,EAAOlB,MAAQA,EACfkB,EAAOpB,OAASA,EAEVsB,EAAMF,EAAOG,WAAW,MARa,sBAS3B,IAAIC,MAAM,qBATiB,OAW7B,OAX6B,KAW3CF,EAX2C,SAWvBL,EAXuB,+BAWVG,EAAOlB,MAXG,KAWIkB,EAAOpB,OAXX,KAWvCyB,UAXuC,eAWhB,EAAG,EAXa,WAa3CP,EAAchB,EACdiB,EAAenB,EAd4B,kBAgBpCoB,GAhBoC,2CAoBnD,SAASM,EAAUjC,GACf,OAAO,IAAIkC,QAA0B,SAACC,EAASC,GAC3C,IAAMZ,EAAQ,IAAIa,MAElBb,EAAMc,OAAS,kBAAMH,EAAQX,IAC7BA,EAAMe,QAAU,kBAAMH,KAEtBZ,EAAMgB,IAAMxC,IAIpB,IAAMyC,EAAqBlB,EAAUU,EAAU,iCACzCS,EAAwBnB,EAAUU,EAAU,oCAC5CU,EAAwBpB,EAAUU,EAAU,oCAC5CW,EAAwBrB,EAAUU,EAAU,oCAC5CY,EAA6BtB,EAAUU,EAAU,yCAEjDa,EAAkBvB,EAAUU,EAAU,mCACtCc,EAAqBxB,EAAUU,EAAU,sCACzCe,EAAqBzB,EAAUU,EAAU,sCACzCgB,EAAqB1B,EAAUU,EAAU,sCACzCiB,EAA0B3B,EAAUU,EAAU,2CAE9CkB,EAAqB,YAAiB,IAASC,MAK9C,EAAD,eAAOC,EAAP,WACF,aAAa,UAwVL,KAAAC,WAAaH,EAzVnB,6BAGF,WACI,OAAuC,IAA/B1D,KAAK6D,WAAWC,WAA0C,EAAI,GAAK/C,mBAJ7E,kBAOF,WACI,OAAO,EAAIf,KAAK+D,QARlB,iBAWF,WACI,OAAO/D,KAAK+D,MAAQ/D,KAAK6D,WAAW7C,MAAQ,EAAIhB,KAAKgE,SAZvD,qBAeF,WACI,OAAOhE,KAAKgE,OAAShE,KAAK+D,QAhB5B,yBAmBF,WACI,OAAsC,IAA/B/D,KAAK6D,WAAWC,WAA0C,GAAK,KApBxE,kBAuBF,WACI,OACI9D,KAAK+D,OACA/D,KAAK6D,WAAW/C,OAASd,KAAK6D,WAAWI,iBAAmBjE,KAAKkE,UAAYlE,KAAKmE,eACvF,EAAInE,KAAKgE,SA3Bf,wBA+BI,SAAW9B,EAA2BkC,G,mKACxCpE,KAAK6D,WAAaO,EAAU,YAAiBA,EAAQC,QAAUX,EAE/DxB,EAAOlB,MAAQhB,KAAKgB,MACpBkB,EAAOpB,OAASd,KAAKc,OAEfsB,EAAMF,EAAOG,WAAW,M,sBAEpB,IAAIC,MAAM,4C,OAMoCgC,OAHxDtE,KAAKoC,IAAMA,EAEXpC,KAAKoE,QAAUA,EACfpE,KAAKuE,eAAe,EAAG,EAAGvE,KAAKgB,MAAOhB,KAAKc,OAAQd,KAAKsE,mB,SAElDtE,KAAKwE,iB,OAAAA,O,UACLxE,KAAKyE,c,iDAhDb,4BAmDI,W,kKACGzE,KAAKoC,K,sBAaS,OAXnBpC,KAAK0E,SACD,EACA1E,KAAK6D,WAAW/C,OAASd,KAAKkE,UAC9BlE,KAAK6D,WAAW7C,MAChBhB,KAAK6D,WAAWI,iBAChBrC,GAGJ5B,KAAKoC,IAAIuC,yBACT3E,KAAKoC,IAAIwC,sBAAwB,O,KAEjC5E,KAAKoC,I,SACKpC,KAAK6E,iBAAL7E,CACFA,KAAK6D,WAAW7C,MAAQhB,KAAK+D,MAC7B/D,KAAK6D,WAAWI,iBAAmBjE,KAAK+D,O,wBAE5C/D,KAAKgE,O,KACLhE,KAAKgE,QAAUhE,KAAK6D,WAAW/C,OAASd,KAAKkE,WAAalE,KAAK+D,M,KAC/D/D,KAAK6D,WAAW7C,MAAQhB,KAAK+D,M,KAC7B/D,KAAK6D,WAAWI,iBAAmBjE,KAAK+D,M,KARnCxB,U,qFAjEX,4BA6EI,SACFuC,EACAC,G,0KAEK/E,KAAKoC,I,iDAAY,O,SAEhBpC,KAAKwE,iB,OAEXxE,KAAKoC,IAAI4C,YACThF,KAAK0E,SACD,EACA1E,KAAK6D,WAAW/C,OAASd,KAAKkE,UAC9BlE,KAAK6D,WAAW7C,MAChBhB,KAAK6D,WAAWI,iBAChB,yBAGEgB,EAA4C,IAA/BjF,KAAK6D,WAAWC,WAA0C,EAAI,EAEjF9D,KAAKoC,IAAI8C,KAAuB,EAAblF,KAAK+D,MAAYkB,EAApB,eAChBjF,KAAKoC,IAAI+C,UAAY,QACrB,YACSL,GAAuBC,EAAqD,GAA/B,CAAC,6BADvD,EAEQD,EACE,CAAC,4BAAD,OACgC,IAAIM,KAAKN,EAAmBO,WAAWC,sBADvE,mCAEgCR,EAAmBS,OAFnD,mCAGgCT,EAAmBU,UAAUC,QAAQ,GAHrE,4CAIgCX,EAAmBY,aAAaD,QAAQ,GAJxE,UAMA,IATV,EAUQV,EACE,CAAC,4BAAD,OACgCA,EAAoBY,UAAUF,QAAQ,GADtE,wCAEgCV,EAAoBa,eAAeH,QAAQ,GAF3E,wCAGgCV,EAAoBc,WAAWJ,QAAQ,KAEvE,KACRK,QAAQ,SAACC,EAAMC,GAAP,OACNhG,EAAKoC,IAAK6D,SACNF,EACA/F,EAAKgE,OAASiB,EAAajF,EAAK+D,MAChC/D,EAAKgE,QAAUhE,EAAK6D,WAAW/C,OAASmE,GAAc,EAAQ,EAAJe,IAAUhG,EAAK+D,S,gDAvHnF,yBA4HI,WAAkD,IAAtCmC,EAAsC,uDAAH,G,qKAC5ClG,KAAKoC,I,iDAKS,OAHb+D,EAASnG,KAAK6D,WAAW/C,OAASd,KAAK6D,WAAWI,iBAAmBjE,KAAKkE,UAC1EkC,EAA6C,IAA/BpG,KAAK6D,WAAWC,WAA0C,GAAK,G,KAEnF9D,KAAKoC,I,SACKpC,KAAKqG,cAALrG,CAAoBA,KAAK+D,MAAQ/D,KAAK6D,WAAW7C,MAAOhB,KAAKmE,cAAgBnE,KAAK+D,O,wBACxF/D,KAAKgE,O,KACLhE,KAAKgE,OAAShE,KAAK+D,MAAQoC,E,KAC3BnG,KAAK6D,WAAW7C,MAAQhB,KAAK+D,M,KAC7B/D,KAAKmE,cAAgBnE,KAAK+D,M,KALrBxB,U,oCAQL2D,EAAcI,SAAS,IACvBtG,KAAK0E,SAAS,EAAGyB,EAAQC,EAAapG,KAAKmE,cApMtB,mBAsMrB+B,EAAcI,SAAS,IACvBtG,KAAK0E,SAAS0B,EAAaD,EAAQC,EAAapG,KAAKmE,cAvMhC,mBAyMrB+B,EAAcI,SAAS,IACvBtG,KAAK0E,SACD1E,KAAK6D,WAAW7C,MAAQ,EAAIoF,EAC5BD,EACAC,EACApG,KAAKmE,cA9MY,mBAkNrB+B,EAAcI,SAAS,IACvBtG,KAAK0E,SACD1E,KAAK6D,WAAW7C,MAAQoF,EACxBD,EACAC,EACApG,KAAKmE,cAvNY,mBA2NrB+B,EAAcI,SAAS,IACvBtG,KAAK0E,SACD,EAAI0B,EACJD,EACAnG,KAAK6D,WAAW7C,MAAQ,EAAIoF,EAC5BpG,KAAKmE,cAAgB,EAhOJ,mBAoOrB+B,EAAcI,SAAS,IACvBtG,KAAK0E,SACD,EAAI0B,EACJD,EAASnG,KAAKmE,cAAgB,EAC9BnE,KAAK6D,WAAW7C,MAAQ,EAAIoF,EAC5BpG,KAAKmE,cAAgB,EAzOJ,mB,iDAyD3B,iCAsLF,SAAoBjC,GACXlC,KAAKoC,MAEVpC,KAAKoC,IAAIuC,yBACT3E,KAAKoC,IAAIG,UACLL,EACAlC,KAAKgE,OACLhE,KAAKgE,OACLhE,KAAK+D,MAAQ/D,KAAK6D,WAAW7C,MAC7BhB,KAAK+D,MAAQ/D,KAAK6D,WAAW/C,WA/LnC,oCAmMF,SAAuByF,GAA8B,IAAPC,EAAO,wDACjD,GAAKxG,KAAKoC,IAAV,CAEA,IAEIqE,EACAC,EACAC,EACAC,EALEC,EAAK7G,KAAKoC,IAAIF,OAAO4E,wBASvBD,EAAG7F,MAAQ6F,EAAG/F,OAASd,KAAKgB,MAAQhB,KAAKc,QACzC8F,EAAgBC,EAAG/F,OACnB6F,EAAgB3G,KAAKgB,MAAQhB,KAAKc,OAAU+F,EAAG/F,OAC/C4F,EAAWG,EAAGE,IACdN,EAAWI,EAAGG,MAAQH,EAAG7F,MAAQ2F,GAAgB,IAEjDA,EAAeE,EAAG7F,MAClB4F,EAAiB5G,KAAKc,OAASd,KAAKgB,MAAS6F,EAAG7F,MAChDyF,EAAWI,EAAGG,KACdN,EAAWG,EAAGE,KAAOF,EAAG/F,OAAS8F,GAAiB,GAItD,IAAIK,EACArG,KAAKsG,OAASX,EAAEY,QAAUV,GAAYE,EAAgB3G,KAAKgB,MAAShB,KAAK+D,OAAS/D,KAAKgE,OAAShE,KAAK+D,MACrGqD,EACAxG,KAAKsG,OAASX,EAAEc,QAAUX,GAAYE,EAAiB5G,KAAKc,OAAUd,KAAK+D,OAC3E/D,KAAKgE,OAAShE,KAAK+D,MAWnBqD,GAAKpH,KAAK6D,WAAW/C,OAASd,KAAKkE,YAAWkD,GAAK,GAEvD,IAAME,EAActH,KAAK6D,WAAW/C,OAASd,KAAK6D,WAAWI,iBAAmBjE,KAAKmE,cAErF,GAAIqC,EACIS,EAAI,IAAGA,EAAI,GACXA,GAAKjH,KAAK6D,WAAW7C,QAAOiG,EAAIjH,KAAK6D,WAAW7C,MAAQ,GACxDoG,EAAI,IAAGA,EAAI,GACXA,GAAKE,IACLF,EAAIpH,KAAK6D,WAAW/C,OAASd,KAAK6D,WAAWI,iBAAmB,QAGpE,GAAIgD,EAAI,GAAKA,GAAKjH,KAAK6D,WAAW7C,OAASoG,EAAI,GAAKA,GAAKE,EACrD,OAIR,MAAO,CAACL,EAAGG,MA5Pb,uBA+PF,YACI,OADSA,WACGpH,KAAK6D,WAAW/C,OAASd,KAAK6D,WAAWI,mBAhQvD,6BAmQF,YAAoBmD,aAAHH,EAAGG,YACVhB,EAA6C,IAA/BpG,KAAK6D,WAAWC,WAA0C,GAAK,GAEnF,OAAImD,GAAKjH,KAAK6D,WAAW7C,MAAQoF,EAAoB,EACjDa,GAAKjH,KAAK6D,WAAW7C,MAAQ,EAAIoF,EAAoB,EACrDa,GAAK,EAAIb,EACFgB,GACHpH,KAAK6D,WAAW/C,OAASd,KAAK6D,WAAWI,iBAAmBjE,KAAKkE,UAAYlE,KAAKmE,cAAgB,EAChG,EACA,EAEN8C,GAAKb,EAAoB,EAEtB,IAhRT,sBAmRM,SAASa,EAAWG,EAAWpG,EAAeF,EAAgByG,GAC7DvH,KAAKoC,MAEVpC,KAAKoC,IAAI4C,YACThF,KAAKoC,IAAIoF,KACLxH,KAAKgE,OAAShE,KAAK+D,MAAQkD,EAC3BjH,KAAKgE,OAAShE,KAAK+D,MAAQqD,EAC3BpH,KAAK+D,MAAQ/C,EACbhB,KAAK+D,MAAQjD,GAEjBd,KAAKoC,IAAI+C,UAAYoC,EACrBvH,KAAKoC,IAAIqF,UA9RX,4BAiSM,SAAeR,EAAWG,EAAWpG,EAAeF,EAAgByG,GACnEvH,KAAKoC,MAEVpC,KAAKoC,IAAI4C,YACThF,KAAKoC,IAAIoF,KAAKP,EAAGG,EAAGpG,EAAOF,GAC3Bd,KAAKoC,IAAI+C,UAAYoC,EACrBvH,KAAKoC,IAAIqF,UAvSX,6BA0SM,W,MACJ,OAAoB,QAApB,EAAQzH,KAAKoE,mBAAO,WAAEC,QAClB,KAAK,IAASV,KACV,OAAOV,EAEX,KAAK,IAASyE,KACV,OAAOxE,EAEX,KAAK,IAASyE,KACV,OAAOxE,EAEX,KAAK,IAASyE,KACV,OAAOxE,EAEX,KAAK,IAASyE,MACd,QACI,OAAO7E,KA1TjB,0BA8TM,W,MACJ,OAAoB,QAApB,EAAQhD,KAAKoE,mBAAO,WAAEC,QAClB,KAAK,IAASV,KACV,OAAOL,EAEX,KAAK,IAASoE,KACV,OAAOnE,EAEX,KAAK,IAASoE,KACV,OAAOnE,EAEX,KAAK,IAASoE,KACV,OAAOnE,EAEX,KAAK,IAASoE,MACd,QACI,OAAOxE,KA9UjB,6BAkVM,W,MACJ,OAAO,YAAoB,QAAb,EAACrD,KAAKoE,mBAAO,WAAEC,QA7YC,QA6YyCxC,MAnVzE,K,6CAAO+B,I,yBAAAA,EAAoB,QAApBA,EAAoB,qBAFjB,S,EAEV,O","file":"x","sourcesContent":["import { CanvasDisplayService } from './../service/canvas-display.service';\nimport { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n    selector: 'app-tabs',\n    templateUrl: 'tabs.page.html',\n    styleUrls: ['tabs.page.scss'],\n})\nexport class TabsPage {\n    constructor(private router: Router, private canvasDisplayService: CanvasDisplayService) {\n        window.addEventListener('resize', this.updateUseSmallUI);\n\n        this.updateUseSmallUI();\n    }\n\n    get smallUI(): boolean {\n        return this.router.url === '/tab/emulation' && this.useSmallUI;\n    }\n\n    private updateUseSmallUI = (): void => {\n        const isMD = !!document.querySelector('html.md');\n        const headerHeight = isMD ? 56 : 44;\n        const tabbarHeight = isMD ? 57 : 51;\n        const canvasPadding = 6;\n\n        this.useSmallUI =\n            this.canvasArea(window.innerHeight - headerHeight - tabbarHeight - canvasPadding, window.innerWidth - 6) <\n            this.canvasArea(window.innerHeight - headerHeight - 25 - canvasPadding, window.innerWidth - 6);\n    };\n\n    private canvasArea(availableHeight: number, availableWidth: number): number {\n        availableHeight = Math.min(availableHeight, this.canvasDisplayService.height / devicePixelRatio);\n        availableWidth = Math.min(availableWidth, this.canvasDisplayService.width / devicePixelRatio);\n\n        let scaledWidth: number;\n        let scaledHeight: number;\n\n        if (availableWidth / availableHeight > this.canvasDisplayService.width / this.canvasDisplayService.height) {\n            scaledHeight = availableHeight;\n            scaledWidth = (availableHeight / this.canvasDisplayService.height) * this.canvasDisplayService.width;\n        } else {\n            scaledWidth = availableWidth;\n            scaledHeight = (availableWidth / this.canvasDisplayService.width) * this.canvasDisplayService.height;\n        }\n\n        return scaledWidth * scaledHeight;\n    }\n\n    private useSmallUI = false;\n}\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { NgModule } from '@angular/core';\nimport { TabsPage } from './tabs.page';\nimport { TabsPageRoutingModule } from './tabs-routing.module';\n\n@NgModule({\n    imports: [IonicModule, CommonModule, FormsModule, TabsPageRoutingModule],\n    declarations: [TabsPage],\n})\nexport class TabsPageModule {}\n","import { RouterModule, Routes } from '@angular/router';\n\nimport { NgModule } from '@angular/core';\nimport { TabsPage } from './tabs.page';\n\nconst routes: Routes = [\n    {\n        path: 'tab',\n        component: TabsPage,\n        children: [\n            {\n                path: 'emulation',\n                loadChildren: () => import('../page/emulation/emulation.module').then((m) => m.EmulationPageModule),\n            },\n            {\n                path: 'sessions',\n                loadChildren: () => import('../page/sessions/sessions.module').then((m) => m.SessionsPageModule),\n            },\n            {\n                path: 'settings',\n                loadChildren: () => import('../page/settings/settings.module').then((m) => m.SettingsPageModule),\n            },\n            {\n                path: 'about',\n                loadChildren: () => import('../page/about/about.module').then((m) => m.AboutPageModule),\n            },\n            {\n                path: '',\n                redirectTo: '/tab/sessions',\n                pathMatch: 'full',\n            },\n        ],\n    },\n    {\n        path: '',\n        redirectTo: '/tab/sessions',\n        pathMatch: 'full',\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class TabsPageRoutingModule {}\n","<ion-tabs>\n\n  <div class=\"overflow-wrapper\">\n    <ion-tab-bar [class.small-ui]=\"smallUI\" slot=\"bottom\">\n      <ion-tab-button tab=\"emulation\">\n        <ion-icon name=\"phone-portrait-outline\"></ion-icon>\n        <ion-label>Emulator</ion-label>\n      </ion-tab-button>\n\n      <ion-tab-button tab=\"sessions\">\n        <ion-icon name=\"albums-outline\"></ion-icon>\n        <ion-label>Sessions</ion-label>\n      </ion-tab-button>\n\n      <ion-tab-button tab=\"settings\">\n        <ion-icon name=\"cog-outline\"></ion-icon>\n        <ion-label>Settings</ion-label>\n      </ion-tab-button>\n\n      <ion-tab-button tab=\"about\">\n        <ion-icon name=\"help-outline\"></ion-icon>\n        <ion-label>About</ion-label>\n      </ion-tab-button>\n    </ion-tab-bar>\n  </div>\n\n</ion-tabs>\n","import { DeviceId, isColor } from '../model/DeviceId';\n\nimport { EmulationStatistics } from './../model/EmulationStatistics';\nimport { GRAYSCALE_PALETTE_HEX } from './emulation.service';\nimport { Injectable } from '@angular/core';\nimport { PalmButton } from '../helper/Cloudpilot';\nimport { ScreenSize } from '../model/Dimensions';\nimport { Session } from '../model/Session';\nimport { SnapshotStatistics } from './../model/SnapshotStatistics';\nimport { deviceDimensions } from '../helper/deviceProperties';\n\nconst BACKGROUND_COLOR_SILKSCREEN = GRAYSCALE_PALETTE_HEX[2];\nconst BACKGROUND_COLOR_GRAYSCALE_DEVICE = GRAYSCALE_PALETTE_HEX[0];\nconst BACKGROUND_COLOR_COLOR_DEVICE = 'white';\nconst BACKGROUND_ACTIVE_BUTTON = 'rgba(0,0,0,0.2)';\n\ntype PrerenderedImage = (width: number, height: number) => Promise<HTMLCanvasElement>;\n\nfunction prerender(image: Promise<HTMLImageElement>): PrerenderedImage {\n    let cachedWidth: number;\n    let cachedHeight: number;\n    const canvas = document.createElement('canvas');\n\n    return async (width: number, height: number) => {\n        if (cachedWidth === width && cachedHeight === height) {\n            return canvas;\n        }\n\n        canvas.width = width;\n        canvas.height = height;\n\n        const ctx = canvas.getContext('2d');\n        if (!ctx) throw new Error('get a new browser');\n\n        ctx.drawImage(await image, 0, 0, canvas.width, canvas.height);\n\n        cachedWidth = width;\n        cachedHeight = height;\n\n        return canvas;\n    };\n}\n\nfunction loadImage(url: string): Promise<HTMLImageElement> {\n    return new Promise<HTMLImageElement>((resolve, reject) => {\n        const image = new Image();\n\n        image.onload = () => resolve(image);\n        image.onerror = () => reject();\n\n        image.src = url;\n    });\n}\n\nconst IMAGE_SILKSCREEN_V = prerender(loadImage('assets/skin/silkscreen/v.svg'));\nconst IMAGE_SILKSCREEN_M515 = prerender(loadImage('assets/skin/silkscreen/m515.svg'));\nconst IMAGE_SILKSCREEN_IIIC = prerender(loadImage('assets/skin/silkscreen/iiic.svg'));\nconst IMAGE_SILKSCREEN_M130 = prerender(loadImage('assets/skin/silkscreen/m130.svg'));\nconst IMAGE_SILKSCREEN_TUNGSTENW = prerender(loadImage('assets/skin/silkscreen/tungstenw.svg'));\n\nconst IMAGE_BUTTONS_V = prerender(loadImage('assets/skin/hard-buttons/v.svg'));\nconst IMAGE_BUTTONS_M515 = prerender(loadImage('assets/skin/hard-buttons/m515.svg'));\nconst IMAGE_BUTTONS_IIIC = prerender(loadImage('assets/skin/hard-buttons/iiic.svg'));\nconst IMAGE_BUTTONS_M130 = prerender(loadImage('assets/skin/hard-buttons/m130.svg'));\nconst IMAGE_BUTTONS_TUNGSTENW = prerender(loadImage('assets/skin/hard-buttons/tungstenw.svg'));\n\nconst DEFAULT_DIMENSIONS = deviceDimensions(DeviceId.m515);\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CanvasDisplayService {\n    constructor() {}\n\n    get scale(): number {\n        return (this.dimensions.screenSize === ScreenSize.screen320x320 ? 2 : 3) * devicePixelRatio;\n    }\n\n    get border(): number {\n        return 1 * this.scale;\n    }\n\n    get width(): number {\n        return this.scale * this.dimensions.width + 2 * this.border;\n    }\n\n    get separator(): number {\n        return this.border / this.scale;\n    }\n\n    get buttonsHeight(): number {\n        return this.dimensions.screenSize === ScreenSize.screen320x320 ? 60 : 30;\n    }\n\n    get height(): number {\n        return (\n            this.scale *\n                (this.dimensions.height + this.dimensions.silkscreenHeight + this.separator + this.buttonsHeight) +\n            2 * this.border\n        );\n    }\n\n    async initialize(canvas: HTMLCanvasElement, session: Session | undefined): Promise<void> {\n        this.dimensions = session ? deviceDimensions(session.device) : DEFAULT_DIMENSIONS;\n\n        canvas.width = this.width;\n        canvas.height = this.height;\n\n        const ctx = canvas.getContext('2d');\n        if (!ctx) {\n            throw new Error('canvas not supported - get a new browser');\n        }\n\n        this.ctx = ctx;\n\n        this.session = session;\n        this.fillCanvasRect(0, 0, this.width, this.height, this.backgroundColor());\n\n        await this.drawSilkscreen();\n        await this.drawButtons();\n    }\n\n    async drawSilkscreen(): Promise<void> {\n        if (!this.ctx) return;\n\n        this.fillRect(\n            0,\n            this.dimensions.height + this.separator,\n            this.dimensions.width,\n            this.dimensions.silkscreenHeight,\n            BACKGROUND_COLOR_SILKSCREEN\n        );\n\n        this.ctx.imageSmoothingEnabled = true;\n        this.ctx.imageSmoothingQuality = 'high';\n\n        this.ctx.drawImage(\n            await this.silkscreenImage()(\n                this.dimensions.width * this.scale,\n                this.dimensions.silkscreenHeight * this.scale\n            ),\n            this.border,\n            this.border + (this.dimensions.height + this.separator) * this.scale,\n            this.dimensions.width * this.scale,\n            this.dimensions.silkscreenHeight * this.scale\n        );\n    }\n\n    async drawStatistics(\n        snapshotStatistics?: SnapshotStatistics,\n        emulationStatistics?: EmulationStatistics\n    ): Promise<void> {\n        if (!this.ctx) return;\n\n        await this.drawSilkscreen();\n\n        this.ctx.beginPath();\n        this.fillRect(\n            0,\n            this.dimensions.height + this.separator,\n            this.dimensions.width,\n            this.dimensions.silkscreenHeight,\n            'rgba(255,255,255,0.6)'\n        );\n\n        const fontFactor = this.dimensions.screenSize === ScreenSize.screen320x320 ? 2 : 1;\n\n        this.ctx.font = `${this.scale * 6 * fontFactor}px monospace`;\n        this.ctx.fillStyle = 'black';\n        [\n            ...(!snapshotStatistics && !emulationStatistics ? ['collecting statistics...'] : []),\n            ...(snapshotStatistics\n                ? [\n                      `last snapshot          : ${new Date(snapshotStatistics.timestamp).toLocaleTimeString()}`,\n                      `snapshot pages         : ${snapshotStatistics.pages}`,\n                      `snapshot time total    : ${snapshotStatistics.timeTotal.toFixed(2)} msec`,\n                      `snapshot time blocking : ${snapshotStatistics.timeBlocking.toFixed(2)} msec`,\n                  ]\n                : []),\n            ...(emulationStatistics\n                ? [\n                      `host speed             : ${emulationStatistics.hostSpeed.toFixed(2)}x`,\n                      `emulation speed        : ${emulationStatistics.emulationSpeed.toFixed(2)}x`,\n                      `average FPS            : ${emulationStatistics.averageFPS.toFixed(2)}`,\n                  ]\n                : []),\n        ].forEach((line, i) =>\n            this.ctx!.fillText(\n                line,\n                this.border + fontFactor * this.scale,\n                this.border + (this.dimensions.height + fontFactor * (8 + i * 6)) * this.scale\n            )\n        );\n    }\n\n    async drawButtons(activeButtons: Array<PalmButton> = []): Promise<void> {\n        if (!this.ctx) return;\n\n        const ystart = this.dimensions.height + this.dimensions.silkscreenHeight + this.separator;\n        const buttonWidth = this.dimensions.screenSize === ScreenSize.screen320x320 ? 60 : 30;\n\n        this.ctx.drawImage(\n            await this.buttonsImage()(this.scale * this.dimensions.width, this.buttonsHeight * this.scale),\n            this.border,\n            this.border + this.scale * ystart,\n            this.dimensions.width * this.scale,\n            this.buttonsHeight * this.scale\n        );\n\n        if (activeButtons.includes(PalmButton.cal)) {\n            this.fillRect(0, ystart, buttonWidth, this.buttonsHeight, BACKGROUND_ACTIVE_BUTTON);\n        }\n        if (activeButtons.includes(PalmButton.phone)) {\n            this.fillRect(buttonWidth, ystart, buttonWidth, this.buttonsHeight, BACKGROUND_ACTIVE_BUTTON);\n        }\n        if (activeButtons.includes(PalmButton.todo)) {\n            this.fillRect(\n                this.dimensions.width - 2 * buttonWidth,\n                ystart,\n                buttonWidth,\n                this.buttonsHeight,\n                BACKGROUND_ACTIVE_BUTTON\n            );\n        }\n        if (activeButtons.includes(PalmButton.notes)) {\n            this.fillRect(\n                this.dimensions.width - buttonWidth,\n                ystart,\n                buttonWidth,\n                this.buttonsHeight,\n                BACKGROUND_ACTIVE_BUTTON\n            );\n        }\n        if (activeButtons.includes(PalmButton.up)) {\n            this.fillRect(\n                2 * buttonWidth,\n                ystart,\n                this.dimensions.width - 4 * buttonWidth,\n                this.buttonsHeight / 2,\n                BACKGROUND_ACTIVE_BUTTON\n            );\n        }\n        if (activeButtons.includes(PalmButton.down)) {\n            this.fillRect(\n                2 * buttonWidth,\n                ystart + this.buttonsHeight / 2,\n                this.dimensions.width - 4 * buttonWidth,\n                this.buttonsHeight / 2,\n                BACKGROUND_ACTIVE_BUTTON\n            );\n        }\n    }\n\n    drawEmulationCanvas(canvas: HTMLCanvasElement): void {\n        if (!this.ctx) return;\n\n        this.ctx.imageSmoothingEnabled = false;\n        this.ctx.drawImage(\n            canvas,\n            this.border,\n            this.border,\n            this.scale * this.dimensions.width,\n            this.scale * this.dimensions.height\n        );\n    }\n\n    eventToPalmCoordinates(e: MouseEvent | Touch, clip = false): [number, number] | undefined {\n        if (!this.ctx) return;\n\n        const bb = this.ctx.canvas.getBoundingClientRect();\n\n        let contentX: number;\n        let contentY: number;\n        let contentWidth: number;\n        let contentHeight: number;\n\n        // CSS object-fit keeps the aspect ratio of the canvas content, but the canvas itself\n        // looses aspect and fills the container -> manually calculate the metrics for the content\n        if (bb.width / bb.height > this.width / this.height) {\n            contentHeight = bb.height;\n            contentWidth = (this.width / this.height) * bb.height;\n            contentY = bb.top;\n            contentX = bb.left + (bb.width - contentWidth) / 2;\n        } else {\n            contentWidth = bb.width;\n            contentHeight = (this.height / this.width) * bb.width;\n            contentX = bb.left;\n            contentY = bb.top + (bb.height - contentHeight) / 2;\n        }\n\n        // Compensate for the border\n        let x =\n            Math.floor((((e.clientX - contentX) / contentWidth) * this.width) / this.scale) - this.border / this.scale;\n        let y =\n            Math.floor((((e.clientY - contentY) / contentHeight) * this.height) / this.scale) -\n            this.border / this.scale;\n\n        // The canvas layout inside the border is as follows:\n        //\n        // * 0 .. 159   : LCD\n        // * 160        : separator\n        // * 161 .. 220 : silkscreen\n        // * 221 .. 250 : buttons\n        //\n        // we map this to 160x250 lines by mapping the separator to the silkscreen\n\n        if (y >= this.dimensions.height + this.separator) y -= 1;\n\n        const totalHeight = this.dimensions.height + this.dimensions.silkscreenHeight + this.buttonsHeight;\n\n        if (clip) {\n            if (x < 0) x = 0;\n            if (x >= this.dimensions.width) x = this.dimensions.width - 1;\n            if (y < 0) y = 0;\n            if (y >= totalHeight) {\n                y = this.dimensions.height + this.dimensions.silkscreenHeight - 1;\n            }\n        } else {\n            if (x < 0 || x >= this.dimensions.width || y < 0 || y >= totalHeight) {\n                return undefined;\n            }\n        }\n\n        return [x, y];\n    }\n\n    isButtons([, y]: [number, number]): boolean {\n        return y >= this.dimensions.height + this.dimensions.silkscreenHeight;\n    }\n\n    determineButton([x, y]: [number, number]): PalmButton {\n        const buttonWidth = this.dimensions.screenSize === ScreenSize.screen320x320 ? 60 : 30;\n\n        if (x >= this.dimensions.width - buttonWidth) return PalmButton.notes;\n        if (x >= this.dimensions.width - 2 * buttonWidth) return PalmButton.todo;\n        if (x >= 2 * buttonWidth) {\n            return y >=\n                this.dimensions.height + this.dimensions.silkscreenHeight + this.separator + this.buttonsHeight / 2\n                ? PalmButton.down\n                : PalmButton.up;\n        }\n        if (x >= buttonWidth) return PalmButton.phone;\n\n        return PalmButton.cal;\n    }\n\n    private fillRect(x: number, y: number, width: number, height: number, style: string): void {\n        if (!this.ctx) return;\n\n        this.ctx.beginPath();\n        this.ctx.rect(\n            this.border + this.scale * x,\n            this.border + this.scale * y,\n            this.scale * width,\n            this.scale * height\n        );\n        this.ctx.fillStyle = style;\n        this.ctx.fill();\n    }\n\n    private fillCanvasRect(x: number, y: number, width: number, height: number, style: string): void {\n        if (!this.ctx) return;\n\n        this.ctx.beginPath();\n        this.ctx.rect(x, y, width, height);\n        this.ctx.fillStyle = style;\n        this.ctx.fill();\n    }\n\n    private silkscreenImage(): PrerenderedImage {\n        switch (this.session?.device) {\n            case DeviceId.m515:\n                return IMAGE_SILKSCREEN_M515;\n\n            case DeviceId.iiic:\n                return IMAGE_SILKSCREEN_IIIC;\n\n            case DeviceId.m130:\n                return IMAGE_SILKSCREEN_M130;\n\n            case DeviceId.i710:\n                return IMAGE_SILKSCREEN_TUNGSTENW;\n\n            case DeviceId.palmV:\n            default:\n                return IMAGE_SILKSCREEN_V;\n        }\n    }\n\n    private buttonsImage(): PrerenderedImage {\n        switch (this.session?.device) {\n            case DeviceId.m515:\n                return IMAGE_BUTTONS_M515;\n\n            case DeviceId.iiic:\n                return IMAGE_BUTTONS_IIIC;\n\n            case DeviceId.m130:\n                return IMAGE_BUTTONS_M130;\n\n            case DeviceId.i710:\n                return IMAGE_BUTTONS_TUNGSTENW;\n\n            case DeviceId.palmV:\n            default:\n                return IMAGE_BUTTONS_V;\n        }\n    }\n\n    private backgroundColor(): string {\n        return isColor(this.session?.device) ? BACKGROUND_COLOR_COLOR_DEVICE : BACKGROUND_COLOR_GRAYSCALE_DEVICE;\n    }\n\n    private ctx: CanvasRenderingContext2D | undefined;\n    private session: Session | undefined;\n\n    private dimensions = DEFAULT_DIMENSIONS;\n}\n"]}